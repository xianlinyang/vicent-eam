--  set global log_bin_trust_function_creators=TRUE;  执行这段才能建函数


/**********************************************数据库修改区域-begin*******************************************************/
-- 资产处置主表
CREATE TABLE IF NOT EXISTS `tbl_Audit_Process_Set`(
   `id`					    INT UNSIGNED AUTO_INCREMENT,
   `f_accountid`		INT NOT NULL COMMENT '',
   `f_customid`			int  NOT NULL  COMMENT '客户ID' ,    
   `f_busid`        int   NULL COMMENT '业务ID关联权限表ID' , 
   `f_busname`			varchar(100)    NULL  COMMENT '业务名称' , 
   `f_isaudit`      int  NOT NULL DEFAULT 0 COMMENT '是否开启审批' ,  
   `f_first_bool`      int  NOT NULL DEFAULT 0 COMMENT '开启一审' ,  
   `f_first_deptid`       varchar(300)   NULL  COMMENT '允许一审的部门 -1表示所属部门' , 
   `f_first_PostionID`    varchar(300)   NULL  COMMENT '允许一审的职位' , 
   `f_two_bool`      int  NOT NULL DEFAULT 0 COMMENT '开启二审' , 
   `f_two_deptid`    varchar(300)   NULL  COMMENT '允许二审的部门 -1表示所属部门 其他用逗号分开' , 
   `f_two_PostionID`      varchar(300)   NULL  COMMENT '允许二审的职位' , 
   `f_three_bool`      int  NOT NULL DEFAULT 0 COMMENT '开启三审' , 
   `f_three_deptid`    varchar(300)   NULL  COMMENT '允许三审的部门 -1表示所属部门' , 
   `f_three_PostionID`      varchar(300)   NULL  COMMENT '允许三审的职位' ,     
   `f_note`				  VARCHAR(100)  NULL COMMENT '备注',   
   `f_create_user`	INT NOT NULL COMMENT '创建人',
   `f_create_time`	datetime NOT NULL   COMMENT '创建时间',
   `f_update_user`	INT NULL COMMENT '最后修改人',
   `f_update_time`	datetime    COMMENT '创建时间', 
   `f_flag`		      INT NOT NULL DEFAULT 0   COMMENT '状态 0正常 1删除', 
   `f_delete_user`	int NULL    COMMENT '删除人', 
   `f_delete_time`	datetime  NULL  COMMENT '删除时间',      
   PRIMARY KEY (`id`)
)ENGINE=InnoDB DEFAULT charset=utf8;

 -- 审批流水表
CREATE TABLE IF NOT EXISTS `tbl_User_audit_stream`(
   `id`			          int UNSIGNED AUTO_INCREMENT, 
   `f_customid`			  int  NOT NULL  COMMENT '客户ID' , 
   `f_userid`			    int  NOT NULL  COMMENT '审批用户ID',   
   `f_busid`			    int  NOT NULL  COMMENT '业务类型ID',    
   `f_busname`			  varchar(100)   NULL  COMMENT '业务名称',   
   `f_mid`            int NOT NULL COMMENT '业务单据ID',    
   `f_serno`           varchar(50) NULL COMMENT '业务单据编号', 
   `f_createuserid`            int NOT NULL COMMENT '创建人ID',  
   `f_createdate`            datetime NOT NULL COMMENT '创建时间',  
   `f_auditdate`            datetime NOT NULL COMMENT '审批时间',  
   `f_qty`            decimal(18,2) NOT NULL DEFAULT 0 COMMENT '资产数量',  
   `f_level`          int NOT NULL DEFAULT 0 COMMENT '当前审批级别',  
   `f_memo`           varchar(500)   NULL COMMENT '单据备注',    
   `f_auditmemo`      varchar(500)   NULL COMMENT '审批备注', 
   `f_audittype`      varchar(50)    NOT NULL COMMENT  '审批类型 审批完成，驳回 等', 
   `f_flag`		      INT NOT NULL DEFAULT 0   COMMENT '状态 0正常 1删除',  
   `f_delete_time`	datetime  NULL  COMMENT '删除时间',        
   PRIMARY KEY (`id`)
)ENGINE=InnoDB DEFAULT charset=utf8 COMMENT='用户审批流水表';


 -- 职位表
CREATE TABLE IF NOT EXISTS `tbl_position`(
   `id`			  INT UNSIGNED AUTO_INCREMENT, 
   `f_customid`			  int  NOT NULL  COMMENT '客户ID' , 
   `f_name`			VARCHAR(100)   NULL  COMMENT '职位名称', 
   `f_status`		int  NOT NULL  COMMENT '状态 1正常 0停用 ',
   `f_memo`			VARCHAR(100)   NULL  COMMENT '备注',
   `f_create_user`		INT NOT NULL COMMENT '创建人',
   `f_create_time`		datetime    COMMENT '创建时间',
   `f_update_user`		INT NULL COMMENT '最后修改人',
   `f_update_time`		datetime    COMMENT '创建时间',
   `f_ordid`		INT  NOT NULL DEFAULT 0 COMMENT '排序号', 
   `f_flag`     INT  NOT NULL DEFAULT 0 COMMENT '删除状态 0正常 1已删除',
   `f_delete_user`   INT   NULL COMMENT '删除人',
   `f_delete_time`   datetime   NULL COMMENT '删除时间',
   PRIMARY KEY (`id`)
)ENGINE=InnoDB DEFAULT charset=utf8;


 -- 审批计划表
CREATE TABLE IF NOT EXISTS `tbl_bus_audit_plant`(
   `id`			          int UNSIGNED AUTO_INCREMENT, 
   `f_customid`			  int  NOT NULL  COMMENT '客户ID' , 
   `f_busid`			  int  NOT NULL  COMMENT '业务ID',    
   `f_busname`			  varchar(100)   NULL  COMMENT '业务名称',   
   `f_mid`			    int  NOT NULL  COMMENT '业务单据ID',    
   `f_AuditLevel`		  int  NOT NULL  COMMENT '审批级别 1一审 2二审 3三审 ',
   `f_valtype`			  int  NOT NULL  COMMENT '1部门ID 2职位ID 3批定人员ID',
   `f_valid`			  int  NOT NULL  COMMENT '部门或是职位人员ID ',      
   `f_audituserid`			  int   NULL  COMMENT '指定的审批人员 ',     

   PRIMARY KEY (`id`)
)ENGINE=InnoDB DEFAULT charset=utf8 COMMENT='业务审批计算表，新增单据时插入计划审批时按计划审批';

-- 资产处置主表
CREATE TABLE IF NOT EXISTS `tbl_Audit_Process_Set`(
   `id`					    INT UNSIGNED AUTO_INCREMENT,
   `f_accountid`		INT NOT NULL COMMENT '',
   `f_customid`			int  NOT NULL  COMMENT '客户ID' ,    
   `f_busid`        int   NULL COMMENT '业务ID关联权限表ID' , 
   `f_busname`			varchar(100)    NULL  COMMENT '业务名称' , 
   `f_first_bool`      int  NOT NULL DEFAULT 0 COMMENT '开启一审' , 
   `f_first_deptid`      int   NULL  COMMENT '允许一审的部门' , 
   `f_first_PostionID`      int   NULL  COMMENT '允许一审的职位' , 
   `f_two_bool`      int  NOT NULL DEFAULT 0 COMMENT '开启二审' , 
   `f_two_deptid`      int   NULL  COMMENT '允许二审的部门' , 
   `f_two_PostionID`      int   NULL  COMMENT '允许二审的职位' , 
   `f_three_bool`      int  NOT NULL DEFAULT 0 COMMENT '开启三审' , 
   `f_three_deptid`      int   NULL  COMMENT '允许三审的部门' , 
   `f_three_PostionID`      int   NULL  COMMENT '允许三审的职位' ,     
   `f_note`				  VARCHAR(100)  NULL COMMENT '备注',   
   `f_create_user`	INT NOT NULL COMMENT '创建人',
   `f_create_time`	datetime NOT NULL   COMMENT '创建时间',
   `f_update_user`	INT NULL COMMENT '最后修改人',
   `f_update_time`	datetime    COMMENT '创建时间', 
   `f_flag`		      INT NOT NULL DEFAULT 0   COMMENT '状态 0正常 1删除', 
   `f_delete_user`	int NULL    COMMENT '删除人', 
   `f_delete_time`	datetime  NULL  COMMENT '删除时间',      
   PRIMARY KEY (`id`)
)ENGINE=InnoDB DEFAULT charset=utf8;

-- 资产处置主表
CREATE TABLE IF NOT EXISTS `tbl_Handle_Main`(
   `id`					    INT UNSIGNED AUTO_INCREMENT,
   `f_accountid`		INT NOT NULL COMMENT '',
   `f_customid`			int  NOT NULL  COMMENT '客户ID' , 
   `f_serno`			  char(50)  not  NULL COMMENT '单号',
   `f_status`			  int  NOT NULL  COMMENT '单据状态', 
   `f_deptid`			  int  NOT NULL  COMMENT '制单部门ID', 
   `f_billdate`			datetime  NOT NULL  COMMENT '处置日期', 
   `f_jsr`			    int  NOT NULL  COMMENT '经手人', 
   `f_costprice`		DECIMAL(18, 2) NULL  COMMENT '处置成本', 
   `f_saletotal`		DECIMAL(18, 2) NULL  COMMENT '处置收入',  
   `f_audit`		    INT NOT NULL DEFAULT 0  COMMENT '是否生效',  
   `f_audit_date`		DATETIME NULL  COMMENT '审核生效时间', 
   `f_audit_userid`	INT NULL  COMMENT '审核人', 
   `f_note`				  VARCHAR(100)  NULL COMMENT '备注',   
   `f_create_user`	INT NOT NULL COMMENT '创建人',
   `f_create_time`	datetime NOT NULL   COMMENT '创建时间',
   `f_update_user`	INT NULL COMMENT '最后修改人',
   `f_update_time`	datetime    COMMENT '创建时间', 
   `f_flag`		      INT NOT NULL DEFAULT 0   COMMENT '状态 0正常 1删除', 
   `f_delete_user`	int NULL    COMMENT '删除人', 
   `f_delete_time`	datetime  NULL  COMMENT '删除时间', 
     
   PRIMARY KEY (`id`)
)ENGINE=InnoDB DEFAULT charset=utf8;

 
-- 资产变动从表
CREATE TABLE IF NOT EXISTS `tbl_Handle_Detail`(
   `id`					      INT UNSIGNED AUTO_INCREMENT,
   `f_customid`			  int  NOT NULL  COMMENT '客户ID' , 
   `f_mid`			      INT not  NULL COMMENT '主单号',
   `f_spid`			      int  NOT NULL  COMMENT '商品ID',  
   `f_state`			    int  NULL  COMMENT '处置类型 关联tbl_dictionary表 处置类型 ', 
   `f_memo`	  	      varchar(100)  COMMENT '处理说明', 
   `f_price`		      decimal(18,2)  COMMENT '资产原值',       
   `f_note`			    	VARCHAR(100)  NULL COMMENT '备注',    
   `f_create_user`		INT NOT NULL COMMENT '创建人',
   `f_create_time`		datetime NOT NULL   COMMENT '创建时间',
   `f_update_user`		INT NULL COMMENT '最后修改人',
   `f_update_time`		datetime    COMMENT '创建时间',
   `f_flag`		        INT NOT NULL DEFAULT 0   COMMENT '状态 0正常 1删除', 
   `f_delete_user`		int NULL    COMMENT '删除人', 
   `f_delete_time`		datetime  NULL  COMMENT '删除时间',        
   PRIMARY KEY (`id`)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;
 

-- 资产处置主表
CREATE TABLE IF NOT EXISTS `tbl_Repair_Main`(
   `id`					    INT UNSIGNED AUTO_INCREMENT,
   `f_accountid`		INT NOT NULL COMMENT '',
   `f_customid`			int  NOT NULL  COMMENT '客户ID' , 
   `f_serno`			  char(50)  not  NULL COMMENT '单号',
   `f_status`			  int  NOT NULL  COMMENT '单据状态', 
   `f_deptid`			  int  NOT NULL  COMMENT '制单部门ID', 
   `f_billdate`			datetime  NOT NULL  COMMENT '返修日期',    
   `f_audit`		    INT NOT NULL DEFAULT 0  COMMENT '是否完成',  
   `f_audit_date`		DATETIME NULL  COMMENT '审核生效时间', 
   `f_audit_userid`	INT NULL  COMMENT '审核人', 
   `f_fx_reason`	  VARCHAR(200)  NULL COMMENT '返修原因',  
   `f_fx_memo`	    VARCHAR(200)  NULL COMMENT '送修内容',   
   `f_fx_total`	    decimal(18,2) NOT NULL DEFAULT 0 COMMENT '送修金额',
   `f_sx_memo`	      VARCHAR(200)  NULL COMMENT '送修备注',    
   `f_jfmemo`	      VARCHAR(200)  NULL COMMENT '交付备注',   
   `f_create_user`	INT NOT NULL COMMENT '创建人',
   `f_create_time`	datetime NOT NULL   COMMENT '创建时间',
   `f_update_user`	INT NULL COMMENT '最后修改人',
   `f_update_time`	datetime    COMMENT '创建时间', 
   `f_flag`		      INT NOT NULL DEFAULT 0   COMMENT '状态 0正常 1删除', 
   `f_delete_user`	int NULL    COMMENT '删除人', 
   `f_delete_time`	datetime  NULL  COMMENT '删除时间', 
     
   PRIMARY KEY (`id`)
)ENGINE=InnoDB DEFAULT CHARSET=utf8 comment='资产维修主表';

 
-- 资产变动从表
CREATE TABLE IF NOT EXISTS `tbl_Repair_Detail`(
   `id`					      INT UNSIGNED AUTO_INCREMENT,
   `f_customid`			  int  NOT NULL  COMMENT '客户ID' , 
   `f_mid`			      INT not  NULL COMMENT '主单号',
   `f_spid`			      int  NOT NULL  COMMENT '商品ID',           
   `f_note`			    	VARCHAR(100)  NULL COMMENT '备注',    
   `f_create_user`		INT NOT NULL COMMENT '创建人',
   `f_create_time`		datetime NOT NULL   COMMENT '创建时间',
   `f_update_user`		INT NULL COMMENT '最后修改人',
   `f_update_time`		datetime    COMMENT '创建时间',
   `f_flag`		        INT NOT NULL DEFAULT 0   COMMENT '状态 0正常 1删除', 
   `f_delete_user`		int NULL    COMMENT '删除人', 
   `f_delete_time`		datetime  NULL  COMMENT '删除时间',        
   PRIMARY KEY (`id`)
)ENGINE=InnoDB DEFAULT CHARSET=utf8 comment='资产维修从表';



-- 资产报废主表
CREATE TABLE IF NOT EXISTS `tbl_Scrapped_Main`(
   `id`					    INT UNSIGNED AUTO_INCREMENT,
   `f_accountid`		INT NOT NULL COMMENT '',
   `f_customid`			int  NOT NULL  COMMENT '客户ID' , 
   `f_serno`			  char(50)  not  NULL COMMENT '单号',
   `f_status`			  int  NOT NULL  COMMENT '单据状态', 
   `f_deptid`			  int  NOT NULL  COMMENT '制单部门ID', 
   `f_billdate`			datetime  NOT NULL  COMMENT '处置日期', 
   `f_jsr`			    int  NOT NULL  COMMENT '经手人', 
   `f_sp_postion`		int NULL  COMMENT '报废后存放位置', 
   `f_sp_deptid`		int NULL  COMMENT '报废后管理部门', 
   `f_sp_userid`		int NULL  COMMENT '报废后管理人员',     
   `f_audit`		    INT NOT NULL DEFAULT 0  COMMENT '是否生效',  
   `f_audit_date`		DATETIME NULL  COMMENT '审核生效时间', 
   `f_audit_userid`	INT NULL  COMMENT '审核人', 
   `f_note`				  VARCHAR(100)  NULL COMMENT '备注',   
   `f_create_user`	INT NOT NULL COMMENT '创建人',
   `f_create_time`	datetime NOT NULL   COMMENT '创建时间',
   `f_update_user`	INT NULL COMMENT '最后修改人',
   `f_update_time`	datetime    COMMENT '创建时间', 
   `f_flag`		      INT NOT NULL DEFAULT 0   COMMENT '状态 0正常 1删除', 
   `f_delete_user`	int NULL    COMMENT '删除人', 
   `f_delete_time`	datetime  NULL  COMMENT '删除时间', 
     
   PRIMARY KEY (`id`)
)ENGINE=InnoDB DEFAULT charset=utf8;

 
 
-- 资产报废从表
CREATE TABLE IF NOT EXISTS `tbl_Scrapped_Detail`(
   `id`					      INT UNSIGNED AUTO_INCREMENT,
   `f_customid`			  int  NOT NULL  COMMENT '客户ID' , 
   `f_mid`			      INT not  NULL COMMENT '主单号',
   `f_spid`			      int  NOT NULL  COMMENT '商品ID',  
   `f_reason`			    int  NULL  COMMENT '报废原因 关联 tbl_dictionary 表的处置方式', 
   `f_memo`	  	      varchar(100)   COMMENT '报废说明', 
   `f_price`		      decimal(18,2)  COMMENT '资产原值',        
   `f_postion`			  int  NOT NULL  COMMENT '报废后存放位置',  
   `f_custody_deptid` int  NOT NULL  COMMENT '报废后管理部门',     
   `f_custody_userid`	int  NOT NULL  COMMENT '报废后管理人员',    
   `f_note`			      varchar(100) NULL  COMMENT '备注', 
   `f_create_user`		INT NOT NULL COMMENT '创建人',
   `f_create_time`		datetime NOT NULL   COMMENT '创建时间',
   `f_update_user`		INT NULL COMMENT '最后修改人',
   `f_update_time`		datetime    COMMENT '创建时间',
   `f_flag`		        INT NOT NULL DEFAULT 0   COMMENT '状态 0正常 1删除', 
   `f_delete_user`		int NULL    COMMENT '删除人', 
   `f_delete_time`		datetime  NULL  COMMENT '删除时间',        
   PRIMARY KEY (`id`)
)ENGINE=InnoDB DEFAULT charset=utf8;

 -- 职位表
CREATE TABLE IF NOT EXISTS `tbl_position`(
   `id`			  INT UNSIGNED AUTO_INCREMENT, 
   `f_customid`			  int  NOT NULL  COMMENT '客户ID' , 
   `f_name`			VARCHAR(100)   NULL  COMMENT '职位名称', 
   `f_status`		int  NOT NULL  COMMENT '状态 1正常 0停用 ',
   `f_memo`			VARCHAR(100)   NULL  COMMENT '备注',
   `f_create_user`		INT NOT NULL COMMENT '创建人',
   `f_create_time`		datetime    COMMENT '创建时间',
   `f_update_user`		INT NULL COMMENT '最后修改人',
   `f_update_time`		datetime    COMMENT '创建时间',
   `f_ordid`		INT  NOT NULL DEFAULT 0 COMMENT '排序号', 
   `f_flag`   VARCHAR(200)   NULL COMMENT '删除状态 0正常 1已删除',
   `f_delete_user`   INT   NULL COMMENT '删除人',
   `f_delete_time`   INT   NULL COMMENT '删除时间',
   PRIMARY KEY (`id`)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

  -- 编号存取表
CREATE TABLE IF NOT EXISTS `sys_Get_Bill`(
   `id`			        INT UNSIGNED AUTO_INCREMENT,
   `f_customid`			INT   NOT NULL COMMENT '客户编号',   
   `f_type`		      int   NOT NULL  COMMENT '类型 0部门 1分类 2存放位置  3供应商 ',
   `f_svrdate`			VARCHAR(100)   NULL  COMMENT '最后获取日期 20201208 格式',
   `f_count`			  int   NULL  COMMENT '当日已获取条码个数',
   `f_Code`		      varchar(100)   NULL  COMMENT '最后获取的编号',    
   `f_update_time`  datetime   NULL COMMENT '最后获取时间',
   PRIMARY KEY (`id`)
)ENGINE=InnoDB DEFAULT charset=utf8;


-- 增加字段存储过程
DROP PROCEDURE IF EXISTS add_tb_column;
DELIMITER $$
CREATE PROCEDURE add_tb_column()
BEGIN
		DECLARE  CurrentDatabase VARCHAR(100);
		SELECT DATABASE() INTO CurrentDatabase;

    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_token' AND COLUMN_NAME='f_note1' )  THEN
	      ALTER TABLE tbl_token ADD COLUMN f_note1 VARCHAR(32) DEFAULT NULL COMMENT '备注';
    END IF;

    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_receive_main' AND COLUMN_NAME='f_re_postion' )  THEN
	      ALTER TABLE tbl_receive_main ADD COLUMN f_re_postion int NOT null DEFAULT -1 COMMENT '领用后存放位置';
    END IF;

    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_return_main' AND COLUMN_NAME='f_postion' )  THEN
	      ALTER TABLE tbl_return_main ADD COLUMN f_postion int NOT null DEFAULT -1 COMMENT '退还后存放位置';
    END IF;

    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_lend_out_main' AND COLUMN_NAME='f_Lend_In_postion' )  THEN
	      ALTER TABLE tbl_lend_out_main ADD COLUMN f_Lend_In_postion int NOT null DEFAULT -1 COMMENT '内部借用时借出后存放位置';
    END IF;

    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_lend_in_main' AND COLUMN_NAME='f_postion' )  THEN
	      ALTER TABLE tbl_lend_in_main ADD COLUMN f_postion int NOT null DEFAULT -1 COMMENT '归还后存放位置';
    END IF;

    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_db_main' AND COLUMN_NAME='f_In_postion' )  THEN
	      ALTER TABLE tbl_db_main ADD COLUMN f_In_postion int NOT null DEFAULT -1 COMMENT '调入后存放位置';
    END IF;

    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_receive_apply_main' AND COLUMN_NAME='f_re_postion' )  THEN
	      ALTER TABLE tbl_receive_apply_main ADD COLUMN f_re_postion int NOT null DEFAULT -1 COMMENT '申请领用位置';
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_spinfo' AND COLUMN_NAME='f_rfidcode' )  THEN
	      ALTER TABLE tbl_spinfo ADD COLUMN f_rfidcode varchar(50)  NULL   COMMENT 'RFID编码';
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_spinfo' AND COLUMN_NAME='f_OtherState' )  THEN
	      ALTER TABLE tbl_spinfo ADD COLUMN f_OtherState int NOT NULL DEFAULT -1   COMMENT '其他扩展类型   关联tbl_dictionary表  如果资产状态为处置就是关联处置类型其他也一样';
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_spinfo' AND COLUMN_NAME='f_usecount' )  THEN
	      ALTER TABLE tbl_spinfo ADD COLUMN f_usecount int NOT NULL DEFAULT 0   COMMENT '资产使用次数';
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_repair_detail' AND COLUMN_NAME='f_picname1' )  THEN
	      ALTER TABLE tbl_repair_detail ADD COLUMN f_picname1 varchar(300)   COMMENT '维修图片1';
    END IF;

    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_repair_detail' AND COLUMN_NAME='f_picname2' )  THEN
	      ALTER TABLE tbl_repair_detail ADD COLUMN f_picname2 varchar(300)   COMMENT '维修图片2';
    END IF;

    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_repair_detail' AND COLUMN_NAME='f_picname3' )  THEN
	      ALTER TABLE tbl_repair_detail ADD COLUMN f_picname3 varchar(300)   COMMENT '维修图片3';
    END IF;

    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_role' AND COLUMN_NAME='f_LBType' )  THEN
	      ALTER TABLE tbl_role ADD COLUMN f_LBType int NOT NULL DEFAULT 1   COMMENT '关联可操作类别 1所有类别 2指定类别';
    END IF;
 
    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_receive_apply_main' AND COLUMN_NAME='f_rejected' )  THEN
	      ALTER TABLE tbl_receive_apply_main ADD COLUMN f_rejected int NOT NULL DEFAULT 0   COMMENT '0 正常 1驳回';
    END IF;
    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_receive_apply_main' AND COLUMN_NAME='f_audit_level' )  THEN
	      ALTER TABLE tbl_receive_apply_main ADD COLUMN f_audit_level int NOT NULL DEFAULT 0   COMMENT '当前审批等级 0：还未一审 1还未二审 2还未三审';
    END IF; 
    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_receive_apply_main' AND COLUMN_NAME='f_audit_Sys_level' )  THEN
	      ALTER TABLE tbl_receive_apply_main ADD COLUMN f_audit_Sys_level int NOT NULL DEFAULT 0   COMMENT '审批等级 0 不需要审批 1为只需一审 2需要二审 3需要三审';
    END IF;  
    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_user' AND COLUMN_NAME='f_postionid' )  THEN
	      ALTER TABLE tbl_user ADD COLUMN f_postionid int NOT NULL DEFAULT -1   COMMENT '关联职位对应 tbl_postion表';
    END IF;  
    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_receive_apply_main' AND COLUMN_NAME='f_isaudit' )  THEN
	      ALTER TABLE tbl_receive_apply_main ADD COLUMN f_isaudit int NOT NULL DEFAULT 0   COMMENT '审批流程是否完成 单据是否可以转领用';
    END IF;  
    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_receive_apply_main' AND COLUMN_NAME='f_lystate' )  THEN
	      ALTER TABLE tbl_receive_apply_main ADD COLUMN f_lystate int NOT NULL DEFAULT 0   COMMENT '领用状态 0未领用  1部份领用 2全部领用';
    END IF;  
    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_User_audit_stream' AND COLUMN_NAME='f_nextaudit_user' )  THEN
	      ALTER TABLE tbl_User_audit_stream ADD COLUMN f_nextaudit_user int  NULL DEFAULT 0   COMMENT '记录有多级审批时单据当前的下一审批人，用于返审时找到上一审批人';
    END IF;    
    
         
    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_change_main' AND COLUMN_NAME='f_audit_Sys_level' )  THEN
	      ALTER TABLE tbl_change_main ADD COLUMN f_audit_Sys_level int  NULL DEFAULT 0   COMMENT '审批等级 0 不需要审批 1为只需一审 2需要二审 3需要三审';
    END IF;  
    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_change_main' AND COLUMN_NAME='f_audit_level' )  THEN
	      ALTER TABLE tbl_change_main ADD COLUMN f_audit_level int  NULL DEFAULT 0   COMMENT '当前审批等级 0：还未一审 1还未二审 2还未三审';
    END IF;  
    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_change_main' AND COLUMN_NAME='f_nextaudit_user' )  THEN
	      ALTER TABLE tbl_change_main ADD COLUMN f_nextaudit_user int  NULL DEFAULT -1  COMMENT '审批: 下一审批人';
    END IF;  
    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_change_main' AND COLUMN_NAME='f_rejected' )  THEN
	      ALTER TABLE tbl_change_main ADD COLUMN f_rejected int  NULL DEFAULT 0   COMMENT '审批状态 0 正常 1驳回';
    END IF;  
    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase        
                   AND TABLE_NAME='tbl_change_main' AND COLUMN_NAME='f_is_approval' )  THEN
	      ALTER TABLE tbl_change_main ADD COLUMN f_is_approval int  NULL DEFAULT -1   COMMENT '审批状态 -1 不需要审批 0未审批完成 1已全部审批完成';
    END IF; 


    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_db_main' AND COLUMN_NAME='f_audit_Sys_level' )  THEN
	      ALTER TABLE tbl_db_main ADD COLUMN f_audit_Sys_level int  NULL DEFAULT 0   COMMENT '审批等级 0 不需要审批 1为只需一审 2需要二审 3需要三审';
    END IF;  
    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_db_main' AND COLUMN_NAME='f_audit_level' )  THEN
	      ALTER TABLE tbl_db_main ADD COLUMN f_audit_level int  NULL DEFAULT 0   COMMENT '当前审批等级 0：还未一审 1还未二审 2还未三审';
    END IF;  
    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_db_main' AND COLUMN_NAME='f_nextaudit_user' )  THEN
	      ALTER TABLE tbl_db_main ADD COLUMN f_nextaudit_user int  NULL DEFAULT -1  COMMENT '审批: 下一审批人';
    END IF;  
    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_db_main' AND COLUMN_NAME='f_rejected' )  THEN
	      ALTER TABLE tbl_db_main ADD COLUMN f_rejected int  NULL DEFAULT 0   COMMENT '审批状态 0 正常 1驳回';
    END IF;  
    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase        
                   AND TABLE_NAME='tbl_db_main' AND COLUMN_NAME='f_is_approval' )  THEN
	      ALTER TABLE tbl_db_main ADD COLUMN f_is_approval int  NULL DEFAULT -1   COMMENT '审批状态 -1 不需要审批 0未审批完成 1已全部审批完成';
    END IF; 

    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_handle_main' AND COLUMN_NAME='f_audit_Sys_level' )  THEN
	      ALTER TABLE tbl_handle_main ADD COLUMN f_audit_Sys_level int  NULL DEFAULT 0   COMMENT '审批等级 0 不需要审批 1为只需一审 2需要二审 3需要三审';
    END IF;  
    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_handle_main' AND COLUMN_NAME='f_audit_level' )  THEN
	      ALTER TABLE tbl_handle_main ADD COLUMN f_audit_level int  NULL DEFAULT 0   COMMENT '当前审批等级 0：还未一审 1还未二审 2还未三审';
    END IF;  
    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_handle_main' AND COLUMN_NAME='f_nextaudit_user' )  THEN
	      ALTER TABLE tbl_handle_main ADD COLUMN f_nextaudit_user int  NULL DEFAULT -1  COMMENT '审批: 下一审批人';
    END IF;  
    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_handle_main' AND COLUMN_NAME='f_rejected' )  THEN
	      ALTER TABLE tbl_handle_main ADD COLUMN f_rejected int  NULL DEFAULT 0   COMMENT '审批状态 0 正常 1驳回';
    END IF;  
    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase        
                   AND TABLE_NAME='tbl_handle_main' AND COLUMN_NAME='f_is_approval' )  THEN
	      ALTER TABLE tbl_handle_main ADD COLUMN f_is_approval int  NULL DEFAULT -1   COMMENT '审批状态 -1 不需要审批 0未审批完成 1已全部审批完成';
    END IF; 

    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_lend_in_main' AND COLUMN_NAME='f_audit_Sys_level' )  THEN
	      ALTER TABLE tbl_lend_in_main ADD COLUMN f_audit_Sys_level int  NULL DEFAULT 0   COMMENT '审批等级 0 不需要审批 1为只需一审 2需要二审 3需要三审';
    END IF;  
    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_lend_in_main' AND COLUMN_NAME='f_audit_level' )  THEN
	      ALTER TABLE tbl_lend_in_main ADD COLUMN f_audit_level int  NULL DEFAULT 0   COMMENT '当前审批等级 0：还未一审 1还未二审 2还未三审';
    END IF;  
    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_lend_in_main' AND COLUMN_NAME='f_nextaudit_user' )  THEN
	      ALTER TABLE tbl_lend_in_main ADD COLUMN f_nextaudit_user int  NULL DEFAULT -1  COMMENT '审批: 下一审批人';
    END IF;  
    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_lend_in_main' AND COLUMN_NAME='f_rejected' )  THEN
	      ALTER TABLE tbl_lend_in_main ADD COLUMN f_rejected int  NULL DEFAULT 0   COMMENT '审批状态 0 正常 1驳回';
    END IF;  
    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase        
                   AND TABLE_NAME='tbl_lend_in_main' AND COLUMN_NAME='f_is_approval' )  THEN
	      ALTER TABLE tbl_lend_in_main ADD COLUMN f_is_approval int  NULL DEFAULT -1   COMMENT '审批状态 -1 不需要审批 0未审批完成 1已全部审批完成';
    END IF; 

    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_lend_out_main' AND COLUMN_NAME='f_audit_Sys_level' )  THEN
	      ALTER TABLE tbl_lend_out_main ADD COLUMN f_audit_Sys_level int  NULL DEFAULT 0   COMMENT '审批等级 0 不需要审批 1为只需一审 2需要二审 3需要三审';
    END IF;  
    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_lend_out_main' AND COLUMN_NAME='f_audit_level' )  THEN
	      ALTER TABLE tbl_lend_out_main ADD COLUMN f_audit_level int  NULL DEFAULT 0   COMMENT '当前审批等级 0：还未一审 1还未二审 2还未三审';
    END IF;  
    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_lend_out_main' AND COLUMN_NAME='f_nextaudit_user' )  THEN
	      ALTER TABLE tbl_lend_out_main ADD COLUMN f_nextaudit_user int  NULL DEFAULT -1  COMMENT '审批: 下一审批人';
    END IF;  
    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_lend_out_main' AND COLUMN_NAME='f_rejected' )  THEN
	      ALTER TABLE tbl_lend_out_main ADD COLUMN f_rejected int  NULL DEFAULT 0   COMMENT '审批状态 0 正常 1驳回';
    END IF;  
    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase        
                   AND TABLE_NAME='tbl_lend_out_main' AND COLUMN_NAME='f_is_approval' )  THEN
	      ALTER TABLE tbl_lend_out_main ADD COLUMN f_is_approval int  NULL DEFAULT -1   COMMENT '审批状态 -1 不需要审批 0未审批完成 1已全部审批完成';
    END IF; 

    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_receive_main' AND COLUMN_NAME='f_audit_Sys_level' )  THEN
	      ALTER TABLE tbl_receive_main ADD COLUMN f_audit_Sys_level int  NULL DEFAULT 0   COMMENT '审批等级 0 不需要审批 1为只需一审 2需要二审 3需要三审';
    END IF;  
    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_receive_main' AND COLUMN_NAME='f_audit_level' )  THEN
	      ALTER TABLE tbl_receive_main ADD COLUMN f_audit_level int  NULL DEFAULT 0   COMMENT '当前审批等级 0：还未一审 1还未二审 2还未三审';
    END IF;  
    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_receive_main' AND COLUMN_NAME='f_nextaudit_user' )  THEN
	      ALTER TABLE tbl_receive_main ADD COLUMN f_nextaudit_user int  NULL DEFAULT -1  COMMENT '审批: 下一审批人';
    END IF;  
    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_receive_main' AND COLUMN_NAME='f_rejected' )  THEN
	      ALTER TABLE tbl_receive_main ADD COLUMN f_rejected int  NULL DEFAULT 0   COMMENT '审批状态 0 正常 1驳回';
    END IF;  
    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase        
                   AND TABLE_NAME='tbl_receive_main' AND COLUMN_NAME='f_is_approval' )  THEN
	      ALTER TABLE tbl_receive_main ADD COLUMN f_is_approval int  NULL DEFAULT -1   COMMENT '审批状态 -1 不需要审批 0未审批完成 1已全部审批完成';
    END IF; 

    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_repair_main' AND COLUMN_NAME='f_audit_Sys_level' )  THEN
	      ALTER TABLE tbl_repair_main ADD COLUMN f_audit_Sys_level int  NULL DEFAULT 0   COMMENT '审批等级 0 不需要审批 1为只需一审 2需要二审 3需要三审';
    END IF;  
    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_repair_main' AND COLUMN_NAME='f_audit_level' )  THEN
	      ALTER TABLE tbl_repair_main ADD COLUMN f_audit_level int  NULL DEFAULT 0   COMMENT '当前审批等级 0：还未一审 1还未二审 2还未三审';
    END IF;  
    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_repair_main' AND COLUMN_NAME='f_nextaudit_user' )  THEN
	      ALTER TABLE tbl_repair_main ADD COLUMN f_nextaudit_user int  NULL DEFAULT -1  COMMENT '审批: 下一审批人';
    END IF;  
    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_repair_main' AND COLUMN_NAME='f_rejected' )  THEN
	      ALTER TABLE tbl_repair_main ADD COLUMN f_rejected int  NULL DEFAULT 0   COMMENT '审批状态 0 正常 1驳回';
    END IF;  
    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase        
                   AND TABLE_NAME='tbl_repair_main' AND COLUMN_NAME='f_is_approval' )  THEN
	      ALTER TABLE tbl_repair_main ADD COLUMN f_is_approval int  NULL DEFAULT -1   COMMENT '审批状态 -1 不需要审批 0未审批完成 1已全部审批完成';
    END IF; 

    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_return_main' AND COLUMN_NAME='f_audit_Sys_level' )  THEN
	      ALTER TABLE tbl_return_main ADD COLUMN f_audit_Sys_level int  NULL DEFAULT 0   COMMENT '审批等级 0 不需要审批 1为只需一审 2需要二审 3需要三审';
    END IF;  
    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_return_main' AND COLUMN_NAME='f_audit_level' )  THEN
	      ALTER TABLE tbl_return_main ADD COLUMN f_audit_level int  NULL DEFAULT 0   COMMENT '当前审批等级 0：还未一审 1还未二审 2还未三审';
    END IF;  
    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_return_main' AND COLUMN_NAME='f_nextaudit_user' )  THEN
	      ALTER TABLE tbl_return_main ADD COLUMN f_nextaudit_user int  NULL DEFAULT -1  COMMENT '审批: 下一审批人';
    END IF;  
    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_return_main' AND COLUMN_NAME='f_rejected' )  THEN
	      ALTER TABLE tbl_return_main ADD COLUMN f_rejected int  NULL DEFAULT 0   COMMENT '审批状态 0 正常 1驳回';
    END IF;  
    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase        
                   AND TABLE_NAME='tbl_return_main' AND COLUMN_NAME='f_is_approval' )  THEN
	      ALTER TABLE tbl_return_main ADD COLUMN f_is_approval int  NULL DEFAULT -1   COMMENT '审批状态 -1 不需要审批 0未审批完成 1已全部审批完成';
    END IF; 

    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_scrapped_main' AND COLUMN_NAME='f_audit_Sys_level' )  THEN
	      ALTER TABLE tbl_scrapped_main ADD COLUMN f_audit_Sys_level int  NULL DEFAULT 0   COMMENT '审批等级 0 不需要审批 1为只需一审 2需要二审 3需要三审';
    END IF;  
    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_scrapped_main' AND COLUMN_NAME='f_audit_level' )  THEN
	      ALTER TABLE tbl_scrapped_main ADD COLUMN f_audit_level int  NULL DEFAULT 0   COMMENT '当前审批等级 0：还未一审 1还未二审 2还未三审';
    END IF;  
    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_scrapped_main' AND COLUMN_NAME='f_nextaudit_user' )  THEN
	      ALTER TABLE tbl_scrapped_main ADD COLUMN f_nextaudit_user int  NULL DEFAULT -1  COMMENT '审批: 下一审批人';
    END IF;  
    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase             
                   AND TABLE_NAME='tbl_scrapped_main' AND COLUMN_NAME='f_rejected' )  THEN
	      ALTER TABLE tbl_scrapped_main ADD COLUMN f_rejected int  NULL DEFAULT 0   COMMENT '审批状态 0 正常 1驳回';
    END IF;  
    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase        
                   AND TABLE_NAME='tbl_scrapped_main' AND COLUMN_NAME='f_is_approval' )  THEN
	      ALTER TABLE tbl_scrapped_main ADD COLUMN f_is_approval int  NULL DEFAULT -1   COMMENT '审批状态 -1 不需要审批 0未审批完成 1已全部审批完成';
    END IF; 

    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase        
                   AND TABLE_NAME='tbl_repair_main' AND COLUMN_NAME='f_wxstate' )  THEN
	      ALTER TABLE tbl_repair_main ADD COLUMN f_wxstate int  NULL DEFAULT 0   COMMENT '维修状态 -1已拒绝 0未提交 1已送修 2维修中 3维修完成 ';
    END IF; 

    IF NOT EXISTS (SELECT 1 FROM information_schema.COLUMNS  WHERE   TABLE_SCHEMA=CurrentDatabase        
                   AND TABLE_NAME='tbl_repair_main' AND COLUMN_NAME='f_note' )  THEN
	      ALTER TABLE tbl_repair_main ADD COLUMN f_note varchar(100)   COMMENT '备注';
    END IF;  
 
END
$$ 
DELIMITER ;
CALL add_tb_column;
DROP PROCEDURE add_tb_column;
 



alter table tbl_lend_out_main modify column f_Return_date datetime NULL comment '预计归还时间';

alter table tbl_lend_out_detail modify column f_Return_date datetime NULL comment '预计归还时间';

/**********************************************数据库修改区域-end*********************************************************/


/**********************************************触发器修改区域-begin*******************************************************/
DROP TRIGGER IF EXISTS t_afterupdat_On_tbl_spinfo;
DELIMITER $$
-- 商品修改时自动打流水日志,只用于商品修改打流水，别的业务不能走这里需要单独写流水
create TRIGGER t_afterupdat_On_tbl_spinfo
after update on tbl_spinfo
for each ROW
BEGIN
--   if new.USER_NAME <>old.USER_NAME or new.DEPT_ID <> old.DEPT_ID THEN
--     insert into cfq_tab(id,type_id,type,status) values (null,new.UID,2,0);
--   INSERT INTO temp_test(no) VALUE(new.f_code) ;
    DECLARE C_MEMO varchar(8000);
    DECLARE C_ORD  int;
    DECLARE S varchar(200);
    DECLARE S1 varchar(200);
    DECLARE lastuserid int;

    IF @t_afterupdat_On_tbl_spinfo IS null then
 
        SET lastuserid = new.f_update_user;
        SET C_ORD = 1;
        SET C_MEMO = '';
        IF NEW.f_Code <> OLD.f_Code THEN
            SET C_MEMO = CONCAT(C_MEMO,'\n',C_ORD,'、','资产编号：原“',old.f_code,'”，变更后为“',new.f_code,'”');
            SET C_ORD = C_ORD+1;
        END IF;
    
        IF NEW.f_Name <> OLD.f_Name THEN
            SET C_MEMO = CONCAT(C_MEMO,'\n',C_ORD,'、','资产名称：原“',old.f_Name,'”，变更后为“',new.f_Name,'”');
            SET C_ORD = C_ORD+1;
        END IF;
        IF NEW.f_Typeid <> OLD.f_Typeid THEN
            SELECT F_NAME INTO S1 FROM tbl_basic tb WHERE ID = NEW.f_Typeid;
            SELECT F_NAME INTO S FROM tbl_basic tb WHERE ID = OLD.f_Typeid;
            SET C_MEMO = CONCAT(C_MEMO,'\n',C_ORD,'、','资产类别：原“',S,'”，变更后为“',S1,'”');
            SET C_ORD = C_ORD+1;
        END IF;
        IF NEW.f_Providerid <> OLD.f_Providerid THEN
            SELECT F_NAME INTO S1 FROM tbl_basic tb WHERE ID = NEW.f_Providerid;
            SELECT F_NAME INTO S FROM tbl_basic tb WHERE ID = OLD.f_Providerid;
            SET C_MEMO = CONCAT(C_MEMO,'\n',C_ORD,'、','供应商：原“',s,'”，变更后为“',s1,'”');
            SET C_ORD = C_ORD+1;
        END IF;
    
        IF NEW.f_Specification <> OLD.f_Specification THEN
            SET C_MEMO = CONCAT(C_MEMO,'\n',C_ORD,'、','资产规格：原“',old.f_Specification,'”，变更后为“',new.f_Specification,'”');
            SET C_ORD = C_ORD+1;
        END IF;
    
        IF NEW.f_Model <> OLD.f_Model THEN
            SET C_MEMO = CONCAT(C_MEMO,'\n',C_ORD,'、','资产型号：原“',old.f_Model,'”，变更后为“',new.f_Model,'”');
            SET C_ORD = C_ORD+1;
        END IF;
    
        IF NEW.f_Unit <> OLD.f_Unit THEN
            SET C_MEMO = CONCAT(C_MEMO,'\n',C_ORD,'、','资产单位：原“',old.f_Unit,'”，变更后为“',new.f_Unit,'”');
            SET C_ORD = C_ORD+1;
        END IF;
    
        IF NEW.f_Price <> OLD.f_Price THEN
            SET C_MEMO = CONCAT(C_MEMO,'\n',C_ORD,'、','资产价格：原“',old.f_Price,'”，变更后为“',new.f_Price,'”');
            SET C_ORD = C_ORD+1;
        END IF;
    
        IF NEW.f_Dept <> OLD.f_Dept THEN
            SELECT f_name INTO s from tbl_dept td WHERE id = OLD.f_Dept;
            SELECT f_name INTO s1 from tbl_dept td WHERE id = NEW.f_Dept;
            SET C_MEMO = CONCAT(C_MEMO,'\n',C_ORD,'、','所属部门：原“',s,'”，变更后为“',s1,'”');
            SET C_ORD = C_ORD+1;
        END IF;
    
        IF NEW.f_Invoice <> OLD.f_Invoice THEN
            SET C_MEMO = CONCAT(C_MEMO,'\n',C_ORD,'、','发票号：原“',old.f_Invoice,'”，变更后为“',new.f_Invoice,'”');
            SET C_ORD = C_ORD+1;
        END IF;
    
        IF NEW.f_InvoiceDate <> OLD.f_InvoiceDate THEN
            SET C_MEMO = CONCAT(C_MEMO,'\n',C_ORD,'、','开票日期：原“',old.f_InvoiceDate,'”，变更后为“',new.f_InvoiceDate,'”');
            SET C_ORD = C_ORD+1;
        END IF;
        IF NEW.f_BuyDate <> OLD.f_BuyDate THEN
            SET C_MEMO = CONCAT(C_MEMO,'\n',C_ORD,'、','购买时间：原“',old.f_BuyDate,'”，变更后为“',new.f_BuyDate,'”');
            SET C_ORD = C_ORD+1;
        END IF;
        IF NEW.f_ScrappedDate <> OLD.f_ScrappedDate THEN
            SET C_MEMO = CONCAT(C_MEMO,'\n',C_ORD,'、','报废日期：原“',old.f_ScrappedDate,'”，变更后为“',new.f_ScrappedDate,'”');
            SET C_ORD = C_ORD+1;
        END IF;
        IF NEW.f_MaintenanceDate <> OLD.f_MaintenanceDate THEN
            SET C_MEMO = CONCAT(C_MEMO,'\n',C_ORD,'、','过保日期：原“',old.f_MaintenanceDate,'”，变更后为“',new.f_MaintenanceDate,'”');
            SET C_ORD = C_ORD+1;
        END IF;
        IF NEW.f_IsPD <> OLD.f_IsPD THEN
            SET C_MEMO = CONCAT(C_MEMO,'\n',C_ORD,'、','是否盘点：原“',old.f_IsPD,'”，变更后为“',new.f_IsPD,'”');
            SET C_ORD = C_ORD+1;
        END IF;
        IF NEW.f_UseWay <> OLD.f_UseWay THEN
            SET C_MEMO = CONCAT(C_MEMO,'\n',C_ORD,'、','资产用途：原“',old.f_UseWay,'”，变更后为“',new.f_UseWay,'”');
            SET C_ORD = C_ORD+1;
        END IF;
        IF NEW.f_note <> OLD.f_note THEN
            SET C_MEMO = CONCAT(C_MEMO,'\n',C_ORD,'、','资产备注：原“',old.f_note,'”，变更后为“',new.f_note,'”');
            SET C_ORD = C_ORD+1;
        END IF;
      
        IF C_MEMO <> '' THEN
            INSERT INTO tbl_spinfo_water(f_customid,f_type,f_spid,f_billid,f_billno,f_opruserid,f_memo,f_create_time)
            VALUES(new.f_customid,1,new.id,-1,'',lastuserid,C_MEMO,NOW()); 
        END IF; 
    END IF;
 
END
$$ 
DELIMITER ;



/**********************************************触发器修改区域-  end *******************************************************/


 
/**********************************************视图区域-begin*******************************************************/
DROP VIEW IF EXISTS view_Menu;
 
create view view_Menu as 
SELECT f_qxid,f_pid,f_code,f_alias AS f_name,'' AS f_api,f_status,f_level FROM tbl_menu 
UNION ALL
SELECT tp.f_qxid,tp.f_menu_id AS f_pid,tp.f_code,tp.f_name,tp.f_api,tp.f_status,3 AS f_level FROM tbl_perms tp;


DROP VIEW IF EXISTS View_SPInfo;
create view View_SPInfo as 
SELECT ts.*,tb.f_name AS f_typename ,tb1.f_name AS providername,td.f_name AS f_deptname,td1.f_name AS f_UseDeptname,tu.f_name AS f_CustodyPeoplename,
       tu1.f_name AS f_UsePeoplename,td2.f_name AS f_PositionDeptname,DIC.f_name AS f_StatusNAME,ts.id AS f_spid
FROM tbl_spinfo ts
INNER JOIN tbl_basic tb ON ts.f_Typeid = tb.id AND tb.f_type = 1
LEFT JOIN tbl_basic tb1 ON ts.f_Providerid = tb1.id AND tb.f_type = 3
LEFT JOIN tbl_dept td ON ts.f_Dept = td.id
LEFT JOIN tbl_dept td1 ON ts.f_UseDept = td1.id
LEFT JOIN tbl_user tu ON ts.f_CustodyPeople = tu.id
LEFT JOIN tbl_user tu1 ON ts.f_UsePeople = tu1.id
LEFT JOIN (SELECT id,f_name FROM tbl_basic tb WHERE tb.f_type =4) td2 ON ts.f_PositionDept = td2.id
INNER JOIN tbl_sys_dictionary DIC ON TS.f_Status = DIC.f_id AND dic.f_type = 0;  -- f_type 0表示商品资料状态

/**********************************************视图区域-end*********************************************************/


/**********************************************函数区域-begin*********************************************************/
--必须执行
set global log_bin_trust_function_creators=TRUE;

DELIMITER $$
DROP FUNCTION IF EXISTS fn_GetOprDept$$
create function fn_GetOprDept(c_userid int) returns varchar(300)
begin 
    declare c_usertype int;
    DECLARE c_returns  varchar(300) DEFAULT '';

    SELECT f_type INTO c_usertype FROM tbl_user WHERE id = c_userid;

    IF c_usertype = 1 THEN   
        SET c_returns = '-1';
    ELSE
        SELECT f_deptno INTO c_returns FROM tbl_user WHERE ID = c_userid;
    END IF;
    
    RETURN c_returns;
END $$
DELIMITER ;
/**********************************************函数区域-end  *********************************************************/



/**********************************************存储过程区域-begin*******************************************************/
-- 主单查询
DROP PROCEDURE IF EXISTS Msp_BillMain_Query;  
DELIMITER $$
CREATE PROCEDURE Msp_BillMain_Query(
  c_type      int,             -- 业务 0领用申请  1领用查询 2退库主单查询  3借用主单查询  4借用归还 5资产变动 6调拨 7资产处置 8资产报废 9资产维修
  c_modle     int,             -- 0查合计数据 1查所有数据
  c_value     varchar(50),     -- 普通查询条件
  c_userid    int,             -- 查询人
  c_gj_value  varchar(2000),    -- 高级筛选    
  c_curPage   int,
  c_pageSize  int,
  c_ord       varchar(300) )   -- 排序    
label:BEGIN
    DECLARE c_count  int DEFAULT 0;
    DECLARE c_where varchar(2000) DEFAULT '';
    DECLARE C_TABLE  varchar(100) DEFAULT '';
    DECLARE C_BID    int DEFAULT 0;
    DECLARE C_ENID   int DEFAULT 0;
    DECLARE C_DEPT   varchar(8000);  -- 可操作部门
    DECLARE C_ORDERBY varchar(300) DEFAULT '';
    DECLARE c_customid int;
 
    -- 供应商类型临时表
    drop temporary table if exists temporary_temp_main;
    drop temporary TABLE IF EXISTS temporary_temp_dept;
    
    CREATE temporary TABLE if not exists temporary_temp_main(id INT UNSIGNED AUTO_INCREMENT,mid  int,PRIMARY KEY (`id`));  
    CREATE temporary TABLE if not exists temporary_temp_dept(id INT );  

    -- 找出客户ID
    SELECT tu.f_customid INTO c_customid FROM tbl_user tu WHERE id= c_userid;
    
    SET  C_BID = (c_curPage-1)*c_pageSize;
    SET  C_ENID = c_pageSize;

    SELECT fn_GetOprDept(c_userid) INTO C_DEPT;

    IF c_ord = '' THEN
        SET C_ORDERBY = ' ORDER BY M.ID DESC ';
    ELSE
        SET C_ORDERBY = c_ord;
    END IF;
 

    IF C_DEPT = '-1' THEN
        SET @sql = CONCAT( ' insert into temporary_temp_dept(id) select id from tbl_dept  where f_customid = ',c_customid);
    ELSE 
        SET @sql = CONCAT(' insert into temporary_temp_dept(id) select id from tbl_dept where  id in (',C_DEPT,')');
    END IF;
    
    -- 装入部门
    PREPARE stmt FROM  @sql;  
    ## 执行SQL语句
    EXECUTE stmt;  
    ## 释放掉预处理段

    SET c_where = CONCAT(' where m.f_customid = ',c_customid,' and m.f_flag =0');
    IF c_type = 0 THEN  -- 查询领用申请
        SET C_TABLE = ' tbl_receive_apply_main ';
    ELSEIF c_type = 1 THEN
      SET C_TABLE = ' tbl_receive_main ';
    ELSEIF c_type = 2 THEN
      SET C_TABLE = ' tbl_Return_Main '; 
    ELSEIF c_type = 3 THEN
      SET C_TABLE = ' tbl_lend_out_main '; 
    ELSEIF c_type = 4 THEN
      SET C_TABLE = ' tbl_lend_in_main '; 
    ELSEIF c_type = 5 THEN
      SET C_TABLE = ' tbl_change_main '; 
    ELSEIF c_type = 6 THEN
      SET C_TABLE = ' tbl_db_main ';
    ELSEIF c_type = 7 THEN
      set C_TABLE = 'tbl_Handle_Main';
    ELSEIF c_type = 8 THEN  
      set C_TABLE = 'tbl_Scrapped_Main';
    ELSEIF c_type = 9 THEN  
      SET C_TABLE = 'tbl_repair_main';
    END IF;


    IF c_value <> '' THEN
         SET c_where = CONCAT(c_where,' and m.f_serno like ''' ,c_value,'%''');
    end if ;

    IF c_gj_value <> '' THEN

         SET c_where =CONCAT(c_where,c_gj_value) ; 

    END IF;

    -- 如果是员工看申请只能看自已的
    IF EXISTS(SELECT id FROM tbl_user tu WHERE id = c_userid AND tu.f_type = 2) THEN
 
          set c_where = CONCAT(c_where,' and  m.f_create_user = ',c_userid,')');
 
    end IF;

 
    -- 插入主单ID
    IF c_type = 0 THEN  -- 领用申请
      SET @sql = CONCAT(' insert into temporary_temp_main(mid) select m.id from ', C_TABLE,' m inner join temporary_temp_dept b on m.f_re_deptid = b.id ',c_where,C_ORDERBY);
    ELSEIF c_type = 1 THEN
      SET @sql = CONCAT(' insert into temporary_temp_main(mid) select m.id from ', C_TABLE,' m inner join temporary_temp_dept b on m.f_re_deptid = b.id ',c_where,C_ORDERBY);
    ELSEIF c_type = 2 THEN
      SET @sql = CONCAT(' insert into temporary_temp_main(mid) select m.id from ', C_TABLE,' m inner join temporary_temp_dept b on m.f_deptid = b.id ',c_where,C_ORDERBY);
    ELSEIF c_type = 3 THEN
      SET @sql = CONCAT(' insert into temporary_temp_main(mid) select m.id from ', C_TABLE,' m inner join temporary_temp_dept b on m.f_deptid = b.id ',c_where,C_ORDERBY);
    ELSEIF c_type = 4 then
      SET @sql = CONCAT(' insert into temporary_temp_main(mid) select m.id from ', C_TABLE,' m inner join temporary_temp_dept b on m.f_deptid = b.id ',c_where,C_ORDERBY);
    ELSEIF c_type = 5 then
      SET @sql = CONCAT(' insert into temporary_temp_main(mid) select m.id from ', C_TABLE,' m inner join temporary_temp_dept b on m.f_deptid = b.id ',c_where,C_ORDERBY);
    ELSEIF c_type = 6 THEN 
      SET @sql = CONCAT(' insert into temporary_temp_main(mid) select m.id from ', C_TABLE,' m inner join temporary_temp_dept b on m.f_deptid = b.id ',c_where,C_ORDERBY);
    ELSEIF c_type = 7 THEN
      SET @sql = CONCAT(' insert into temporary_temp_main(mid) select m.id from ', C_TABLE,' m inner join temporary_temp_dept b on m.f_deptid = b.id ',c_where,C_ORDERBY);
    ELSEIF c_type = 8 THEN
      SET @sql = CONCAT(' insert into temporary_temp_main(mid) select m.id from ', C_TABLE,' m inner join temporary_temp_dept b on m.f_deptid = b.id ',c_where,C_ORDERBY);
    ELSEIF c_type = 9 THEN
      SET @sql = CONCAT(' insert into temporary_temp_main(mid) select m.id from ', C_TABLE,' m inner join temporary_temp_dept b on m.f_deptid = b.id ',c_where,C_ORDERBY);
    END IF;
 
 
    PREPARE stmt FROM  @sql;  
    ## 执行SQL语句
    EXECUTE stmt;  
    ## 释放掉预处理段
 
 

    
    IF c_modle = 0 THEN
        SELECT COUNT(*) AS icount FROM temporary_temp_main;
    ELSE      
        IF c_type = 0 THEN  -- 领用申请
            SELECT tram.*,td.f_name AS f_re_deptname,tu.f_name AS  f_re_username,tu1.f_name AS f_apply_username,tu2.f_name AS f_create_username,tu3.f_name AS f_update_username,
                   (SELECT COUNT(*) FROM tbl_receive_apply_detail trad WHERE f_mid = tram.id) AS i_dcount,(SELECT SUM(trad.f_qty) FROM tbl_receive_apply_detail trad WHERE f_mid = tram.id) AS qty,
                   (SELECT SUM(trad.f_total) FROM tbl_receive_apply_detail trad WHERE f_mid = tram.id) AS total,
                   (CASE WHEN  tram.f_isaudit = 1 THEN (case f_lystate when 0 THEN '已生效' WHEN 1 THEN '部份领用' WHEN 2 then '全部领用' else '' END) 
                         else (CASE WHEN tram.f_status <> 0 THEN  (CASE WHEN tram.f_rejected = 0 THEN  td1.f_name ELSE '已驳回' END ) ELSE td1.f_name end )
                   
                   END )
                   AS f_statusname,
                   tu4.f_name AS f_nextaudit_username,wz.f_name AS f_re_postionName
            FROM tbl_receive_apply_main tram   
            INNER JOIN (SELECT * FROM temporary_temp_main LIMIT C_BID,C_ENID) b ON tram.id = b.mid
            INNER   JOIN tbl_dept td ON tram.f_re_deptid = td.id
            INNER JOIN tbl_user tu ON tram.f_re_userid = tu.id
            INNER JOIN tbl_user tu1 ON tram.f_apply_userid = tu1.id
            INNER JOIN tbl_user tu2 ON td.f_create_user = tu2.id
            INNER JOIN tbl_sys_dictionary td1 ON tram.f_status = td1.f_id AND td1.f_type = 1
            LEFT  JOIN tbl_user tu3 ON td.f_update_user = tu3.id
            LEFT JOIN tbl_user tu4 ON tram.f_nextaudit_user = tu4.id 
            LEFT JOIN (SELECT id,f_name FROM tbl_basic tb WHERE tb.f_customid = c_customid AND tb.f_type = 4) wz ON tram.f_re_postion = wz.id
            ORDER BY b.id ;
        ELSEIF c_type = 1 THEN  -- 领用
            SELECT tram.*,td.f_name AS f_re_deptname,tu.f_name AS  f_re_username,tu2.f_name AS f_create_username,tu3.f_name AS f_update_username,
                   (SELECT COUNT(*) FROM tbl_receive_apply_detail trad WHERE f_mid = tram.id) AS i_dcount,(SELECT SUM(trad.f_qty) FROM tbl_receive_apply_detail trad WHERE f_mid = tram.id) AS qty,
                   (SELECT SUM(trad.f_total) FROM tbl_receive_apply_detail trad WHERE f_mid = tram.id) AS total,TRAM1.f_serno AS f_apply_billNo,
                   -- td1.f_name AS f_statusname,
                   (CASE  WHEN tram.f_audit = 1 THEN '单据' else (CASE WHEN tram.f_status <> 0 THEN  (CASE WHEN tram.f_rejected = 0 THEN  td1.f_name ELSE '已驳回' END ) ELSE td1.f_name END ) END) AS f_statusname,
                    tu4.f_name AS f_nextaudit_username,
                    wz.f_name AS f_re_postionname
            FROM tbl_receive_main tram   
            INNER JOIN (SELECT * FROM temporary_temp_main LIMIT C_BID,C_ENID) b ON tram.id = b.mid
            INNER   JOIN tbl_dept td ON tram.f_re_deptid = td.id
            INNER JOIN tbl_user tu ON tram.f_re_userid = tu.id
            INNER JOIN tbl_user tu2 ON td.f_create_user = tu2.id
            INNER JOIN tbl_sys_dictionary td1 ON tram.f_status = td1.f_id AND td1.f_type = 2
            LEFT  JOIN tbl_user tu3 ON td.f_update_user = tu3.id
            LEFT  JOIN tbl_receive_apply_main tram1 ON TRAM.f_apply_billid = tram1.id 
            LEFT JOIN tbl_user tu4 ON tram.f_nextaudit_user = tu4.id 
            LEFT JOIN (SELECT id,f_name FROM tbl_basic tb WHERE tb.f_customid = c_customid AND tb.f_type = 4) wz ON tram.f_re_postion = wz.id
            ORDER BY b.id;
        ELSEIF c_type = 2 THEN  -- 领用退库
            SELECT tram.*,td.f_name AS f_return_deptname,tu.f_name AS  f_return_username,tu2.f_name AS f_create_username,tu3.f_name AS f_update_username,td2.F_NAME AS f_deptname,
                   (SELECT COUNT(*) FROM tbl_Return_Detail trad WHERE f_mid = tram.id) AS i_dcount,(SELECT SUM(trad.f_qty) FROM tbl_Return_Detail trad WHERE f_mid = tram.id) AS qty,
                   (SELECT SUM(trad.f_total) FROM tbl_Return_Detail trad WHERE f_mid = tram.id) AS total,td1.f_name AS f_statusname,wz.f_name AS f_postionname,
                   (CASE  WHEN tram.f_audit = 1 THEN '单据' else (CASE WHEN tram.f_status <> 0 THEN  (CASE WHEN tram.f_rejected = 0 THEN  td1.f_name ELSE '已驳回' END ) ELSE td1.f_name END ) END) AS f_statusname,
                    tu4.f_name AS f_nextaudit_username
            FROM tbl_Return_Main tram   
            INNER JOIN (SELECT * FROM temporary_temp_main LIMIT C_BID,C_ENID) b ON tram.id = b.mid
            INNER   JOIN tbl_dept td ON tram.f_return_deptid = td.id
            INNER   JOIN tbl_dept td2 ON TRAM.f_deptid = TD2.ID
            INNER JOIN tbl_user tu ON tram.f_return_userid = tu.id
            INNER JOIN tbl_user tu2 ON td.f_create_user = tu2.id
            INNER JOIN tbl_sys_dictionary td1 ON tram.f_status = td1.f_id AND td1.f_type = 3
            LEFT  JOIN tbl_user tu3 ON td.f_update_user = tu3.id 
            LEFT JOIN tbl_user tu4 ON tram.f_nextaudit_user = tu4.id 
            LEFT JOIN (SELECT id,f_name FROM tbl_basic tb WHERE tb.f_customid = c_customid AND tb.f_type = 4) wz ON tram.f_postion = wz.id
            ORDER BY b.id;       
        ELSEIF c_type = 3 THEN  -- 借出
            SELECT tram.*,tu2.f_name AS f_create_username,tu3.f_name AS f_update_username,td2.F_NAME AS f_deptname,td1.f_name AS f_statusname,
                   (SELECT COUNT(*) FROM tbl_lend_out_detail trad WHERE f_mid = tram.id) AS i_dcount,
                   (SELECT SUM(trad.f_qty) FROM tbl_lend_out_detail trad WHERE f_mid = tram.id) AS qty,
                   (SELECT SUM(trad.f_total) FROM tbl_lend_out_detail trad WHERE f_mid = tram.id) AS total, 
                   (CASE tram.f_Type WHEN 0 THEN tu.f_name  WHEN 1 THEN  tu4.f_name WHEN 2 THEN p.f_name ELSE '' END) AS f_lendName,
                   (CASE tram.f_Type WHEN 0 THEN tram.f_Lend_In_people WHEN 1 THEN tram.f_Lend_Out_people WHEN 2 THEN tram.f_Lend_PID  ELSE -1 END) AS f_lendid ,
                   (CASE tram.f_Type WHEN 0 THEN '内部借用' WHEN 1 THEN '外部联系人借用' WHEN 2 THEN '供应商借用' ELSE '' END ) AS f_typename,wz.f_name AS f_Lend_In_postionname,
                   td.f_name AS f_Lend_DeptidName,
                   (CASE  WHEN tram.f_audit = 1 THEN '单据' else (CASE WHEN tram.f_status <> 0 THEN  (CASE WHEN tram.f_rejected = 0 THEN  td1.f_name ELSE '已驳回' END ) ELSE td1.f_name END ) END) AS f_statusname,
                    tu5.f_name AS f_nextaudit_username
            FROM tbl_lend_out_main tram   
            INNER JOIN (SELECT * FROM temporary_temp_main LIMIT C_BID,C_ENID) b ON tram.id = b.mid
            INNER JOIN tbl_dept td2 ON TRAM.f_deptid = TD2.ID      
            INNER JOIN tbl_user tu2 ON tram.f_create_user = tu2.id
            INNER JOIN tbl_sys_dictionary td1 ON tram.f_status = td1.f_id AND td1.f_type = 4
            LEFT JOIN tbl_user tu  ON tram.f_Lend_In_people = tu.id
            LEFT  JOIN tbl_user tu3 ON tram.f_update_user = tu3.id 
            LEFT JOIN tbl_user tu5 ON tram.f_nextaudit_user = tu5.id 
            LEFT JOIN (SELECT id,f_name FROM tbl_basic tb WHERE tb.f_customid =c_customid AND  tb.f_type = 3 ) P ON tram.f_Lend_PID = p.id  -- 供应商
            LEFT JOIN (SELECT id,f_name FROM tbl_basic tb WHERE tb.f_customid =c_customid AND  tb.f_type = 5 ) tu4 ON tram.f_Lend_Out_people = tu4.id  -- 外部联系人
            LEFT JOIN (SELECT id,f_name FROM tbl_basic tb WHERE tb.f_customid = c_customid AND tb.f_type = 4) wz ON tram.f_Lend_In_postion = wz.id
            LEFT JOIN tbl_dept td ON tram.f_Lend_Deptid = td.id
            ORDER BY b.id;  
             --  CALL Msp_BillMain_Query (3,1,"",1,'',1,20," order by m.id desc ")
        ELSEIF c_type = 4 THEN -- 借用归还
            SELECT tram.*,tu2.f_name AS f_create_username,tu3.f_name AS f_update_username,td2.F_NAME AS f_deptname,td1.f_name AS f_statusname,
                   (SELECT COUNT(*) FROM tbl_lend_in_detail trad WHERE f_mid = tram.id) AS i_dcount,
                   (SELECT SUM(trad.f_qty) FROM tbl_lend_in_detail trad WHERE f_mid = tram.id) AS qty,
                   (SELECT SUM(trad.f_total) FROM tbl_lend_in_detail trad WHERE f_mid = tram.id) AS total, 
                   (CASE tram.f_Type WHEN 0 THEN tu.f_name  WHEN 1 THEN  tu4.f_name WHEN 2 THEN p.f_name ELSE '' END) AS f_lendName,
                   (CASE tram.f_Type WHEN 0 THEN tram.f_R_In_people WHEN 1 THEN tram.f_R_Out_people WHEN 2 THEN tram.f_R_PID  ELSE -1 END) AS f_lendid,
                   (CASE tram.f_Type WHEN 0 THEN '内部借用' WHEN 1 THEN '外部联系人借用' WHEN 2 THEN '供应商借用' ELSE '' END ) AS f_typename,wz.f_name AS f_R_postionname,
                   (CASE  WHEN tram.f_audit = 1 THEN '单据' else (CASE WHEN tram.f_status <> 0 THEN  (CASE WHEN tram.f_rejected = 0 THEN  td1.f_name ELSE '已驳回' END ) ELSE td1.f_name END ) END) AS f_statusname,
                    tu5.f_name AS f_nextaudit_username
            FROM tbl_lend_in_main tram   
            INNER JOIN (SELECT * FROM temporary_temp_main LIMIT C_BID,C_ENID) b ON tram.id = b.mid
            INNER JOIN tbl_dept td2 ON TRAM.f_deptid = TD2.ID      
            INNER JOIN tbl_user tu2 ON tram.f_create_user = tu2.id
            INNER JOIN tbl_sys_dictionary td1 ON tram.f_status = td1.f_id AND td1.f_type = 5
            LEFT JOIN tbl_user tu  ON tram.f_R_In_people = tu.id
            LEFT  JOIN tbl_user tu3 ON tram.f_update_user = tu3.id 
            LEFT JOIN tbl_user tu5 ON tram.f_nextaudit_user = tu5.id 
            LEFT JOIN (SELECT id,f_name FROM tbl_basic tb WHERE tb.f_customid =c_customid AND  tb.f_type = 3 ) P ON tram.f_R_PID = p.id  -- 供应商
            LEFT JOIN (SELECT id,f_name FROM tbl_basic tb WHERE tb.f_customid =c_customid AND  tb.f_type = 5 ) tu4 ON tram.f_R_Out_people = tu4.id  -- 外部联系人
            LEFT JOIN (SELECT id,f_name FROM tbl_basic tb WHERE tb.f_customid = c_customid AND tb.f_type = 4) wz ON tram.f_postion = wz.id
            ORDER BY b.id;  
        ELSEIF c_type = 5 THEN -- 资产变更
            SELECT id,A.f_serno,A.f_status,A.f_customid,A.f_deptid,A.f_To_name,A.f_To_lbid,A.f_To_Deptid,A.f_To_UseDeptid,A.f_To_UserID,A.f_To_UseUserID,
                   A.f_To_Postion,A.f_audit,A.f_audit_date,A.f_audit_userid,A.f_note,A.f_create_user,A.f_create_time,A.f_update_user,A.f_update_time,A.f_flag,
                   A.f_delete_user,A.f_delete_time, f_deptname, f_create_username, 
                   f_statusname,f_update_username,A.F_To_LbName,A.f_To_DeptName, f_To_UseDeptName,f_To_UserName,
                   f_To_UseUserName, f_To_PostionName,     
                   CONCAT(A.F_To_name2,IFNULL(CONCAT(';',f_To_DeptName2),''),IFNULL(CONCAT(';',f_To_UseDeptName2),''),IFNULL(CONCAT(';',f_To_UserName2),''),
                              IFNULL(CONCAT(';',f_To_useUserName2),''),IFNULL(CONCAT(';',f_To_PostionName2),'')) AS ChangeMemo,
                   A.f_nextaudit_username,a.f_nextaudit_user
            FROM (
              SELECT tram.*,td2.f_name AS f_deptname,tu2.f_name AS f_create_username,tu3.f_name AS f_update_username, 
                     (CASE WHEN bm.f_name <> '' THEN CONCAT('[资产名称]变更为:',tram.f_To_name) ELSE '' END) AS F_To_name2,
                     (CASE WHEN f_To_lbid <> -1 THEN CONCAT('[资产类别]变更为: ',lb.f_name) ELSE NULL END) AS f_To_lbName2,
                     (CASE WHEN f_To_Deptid <> -1 THEN CONCAT('[所属部门]变更为: ',bm.f_name) ELSE NULL END) AS f_To_DeptName2,
                     (CASE WHEN f_To_UseDeptid <> -1 THEN CONCAT('[使用部门]变更为: ',bm1.f_name) ELSE NULL END) AS f_To_UseDeptName2,
                     (CASE WHEN f_To_UserID <> -1 THEN CONCAT('[管理人]变更为: ',ur.f_name) ELSE NULL END) AS f_To_UserName2,
                     (CASE WHEN f_To_useUserID <> -1 THEN CONCAT('[使用人]变更为: ',ur1.f_name) ELSE NULL END) AS f_To_useUserName2,
                     (CASE WHEN f_To_Postion <> -1 THEN CONCAT('[存放位置]变更为: ',wz.f_name) ELSE NULL END) AS f_To_PostionName2,
                     LB.F_NAME AS F_To_LbName,bm.f_name AS f_To_DeptName,bm1.f_name AS f_To_UseDeptName,ur.f_name AS f_To_UserName,
                     ur1.f_name AS f_To_UseUserName,wz.f_name AS f_To_PostionName ,
                    (CASE  WHEN tram.f_audit = 1 THEN '完成' else (CASE WHEN tram.f_status <> 0 THEN  (CASE WHEN tram.f_rejected = 0 THEN  td1.f_name ELSE '已驳回' END ) ELSE td1.f_name END ) END) AS f_statusname,
                     tu4.f_name AS f_nextaudit_username                                              
              FROM tbl_change_main tram   
              INNER JOIN (SELECT * FROM temporary_temp_main LIMIT C_BID,C_ENID) b ON tram.id = b.mid
              INNER JOIN tbl_dept td2 ON TRAM.f_deptid = TD2.ID      
              INNER JOIN tbl_user tu2 ON tram.f_create_user = tu2.id
              INNER JOIN tbl_sys_dictionary td1 ON tram.f_status = td1.f_id AND td1.f_type = 7          
              LEFT  JOIN tbl_user tu3 ON tram.f_update_user = tu3.id 
              LEFT JOIN (SELECT id,tb.f_name FROM tbl_basic tb WHERE tb.f_customid = c_customid AND tb.f_type = 1) lb ON tram.f_To_lbid = lb.id
              LEFT JOIN (SELECT id,f_name FROM tbl_dept td WHERE td.f_customid = c_customid) bm ON tram.f_To_Deptid = bm.id
              LEFT JOIN (SELECT id,f_name FROM tbl_dept td WHERE td.f_customid = c_customid) bm1 ON tram.f_To_UseDeptid = bm1.id
              LEFT JOIN (SELECT ID,f_name FROM tbl_user tu WHERE tu.f_customid =c_customid) ur ON tram.f_To_UserID =ur.id
              LEFT JOIN (SELECT ID,f_name FROM tbl_user tu WHERE tu.f_customid =c_customid) ur1 ON tram.f_To_useUserID =ur1.id
              LEFT JOIN tbl_user tu4 ON tram.f_nextaudit_user = tu4.id
              LEFT JOIN (SELECT id,tb.f_name FROM tbl_basic tb WHERE tb.f_customid = c_customid AND tb.f_type = 4) wz ON tram.f_To_Postion = wz.id 
              ORDER BY b.id 
            )A
            ;
        ELSEIF c_type = 6 THEN  -- 调拨
            SELECT tram.*,tu2.f_name AS f_create_username,tu3.f_name AS f_update_username,td2.F_NAME AS f_deptname,
                  --  (CASE tram.f_audit  WHEN 1 THEN '已调出' WHEN 2 then '已调入' ELSE td1.f_name END) AS f_statusname,
                   (SELECT COUNT(*) FROM tbl_lend_in_detail trad WHERE f_mid = tram.id) AS i_dcount,
                   (SELECT SUM(trad.f_qty) FROM tbl_lend_in_detail trad WHERE f_mid = tram.id) AS qty,
                   (SELECT SUM(trad.f_total) FROM tbl_lend_in_detail trad WHERE f_mid = tram.id) AS total,          
                   td3.f_name AS f_out_deptname,td.f_name AS f_in_deptname,wz.f_name AS f_In_postionname,
                   (CASE tram.f_audit  WHEN   1 THEN '已调出' WHEN 2 then '已调入' else (CASE WHEN tram.f_status = 1 THEN  (CASE WHEN tram.f_audit_Sys_level = 0 THEN  '待调出' ELSE '待审批' END ) ELSE td1.f_name END ) END) AS f_statusname,
                    tu4.f_name AS f_nextaudit_username
            FROM tbl_DB_Main   tram   
            INNER JOIN (SELECT * FROM temporary_temp_main LIMIT C_BID,C_ENID) b ON tram.id = b.mid
            INNER JOIN tbl_dept td2 ON TRAM.f_deptid = TD2.ID      
            INNER JOIN tbl_user tu2 ON tram.f_create_user = tu2.id
            INNER JOIN tbl_sys_dictionary td1 ON tram.f_status = td1.f_id AND td1.f_type = 6            
            LEFT  JOIN tbl_user tu3 ON tram.f_update_user = tu3.id 
            LEFT JOIN  tbl_dept td3 ON TRAM.f_Out_Deptid = td3.ID  
            LEFT JOIN tbl_dept td ON tram.f_IN_Deptid = td.id
            LEFT JOIN tbl_user tu4 ON tram.f_nextaudit_user = tu4.id
            LEFT JOIN (SELECT id,tb.f_name FROM tbl_basic tb WHERE tb.f_customid = c_customid AND tb.f_type = 4) wz ON tram.f_In_postion = wz.id 
            ORDER BY b.id;  
        ELSEIF c_type = 7 THEN -- 资产处置
            SELECT tram.*,tu2.f_name AS f_create_username,tu3.f_name AS f_update_username,td2.F_NAME AS f_deptname,
                   st.f_name  AS f_statusname,tu.f_name AS f_jsrname,
                   (SELECT COUNT(*) FROM tbl_Handle_Detail  trad WHERE f_mid = tram.id) AS i_dcount,
                   (CASE  WHEN tram.f_audit = 1 THEN '单据' else (CASE WHEN tram.f_status <> 0 THEN  (CASE WHEN tram.f_rejected = 0 THEN  st.f_name ELSE '已驳回' END ) ELSE st.f_name END ) END) AS f_statusname,
                    tu4.f_name AS f_nextaudit_username
            FROM tbl_Handle_Main   tram   
            INNER JOIN (SELECT * FROM temporary_temp_main LIMIT C_BID,C_ENID) b ON tram.id = b.mid
            LEFT JOIN (SELECT f_id,tsd.f_name FROM tbl_sys_dictionary tsd where tsd.f_type = 9) st ON tram.f_status = st.f_id
            inner JOIN tbl_dept td2 ON TRAM.f_deptid = TD2.ID      
            INNER JOIN tbl_user tu2 ON tram.f_create_user = tu2.id
            LEFT  JOIN tbl_user tu3 ON tram.f_update_user = tu3.id  
            LEFT JOIN tbl_user tu4 ON tram.f_nextaudit_user = tu4.id                   
            LEFT  JOIN tbl_user tu ON tram.f_jsr = tu.id 
            ORDER BY b.id;  
        ELSEIF c_type = 8 THEN -- 资产报废
            SELECT tram.*,tu2.f_name AS f_create_username,tu3.f_name AS f_update_username,td2.F_NAME AS f_deptname,
                   st.f_name  AS f_statusname,tu.f_name AS f_jsrname,
                   (SELECT COUNT(*) FROM tbl_Handle_Detail  trad WHERE f_mid = tram.id) AS i_dcount,
                   wz.f_name AS f_sp_postionname,td2.f_name AS f_sp_deptname,tu1.f_name AS f_sp_username,
                   (CASE  WHEN tram.f_audit = 1 THEN '单据' else (CASE WHEN tram.f_status <> 0 THEN  (CASE WHEN tram.f_rejected = 0 THEN  st.f_name ELSE '已驳回' END ) ELSE st.f_name END ) END) AS f_statusname,
                    tu4.f_name AS f_nextaudit_username
            FROM tbl_Scrapped_Main   tram   
            INNER JOIN (SELECT * FROM temporary_temp_main LIMIT C_BID,C_ENID) b ON tram.id = b.mid
            LEFT JOIN (SELECT f_id,tsd.f_name FROM tbl_sys_dictionary tsd where tsd.f_type = 10) st ON tram.f_status = st.f_id
            inner JOIN tbl_dept td2 ON TRAM.f_deptid = TD2.ID      
            INNER JOIN tbl_user tu2 ON tram.f_create_user = tu2.id
            LEFT  JOIN tbl_user tu3 ON tram.f_update_user = tu3.id 
            LEFT JOIN tbl_user tu4 ON tram.f_nextaudit_user = tu4.id                    
            LEFT  JOIN tbl_user tu ON tram.f_jsr = tu.id 
            LEFT JOIN (select id,f_name from tbl_basic tb WHERE tb.f_type = 4 AND tb.f_customid = c_customid ) wz ON tram.f_sp_postion = wz.id
            LEFT JOIN tbl_dept td3 ON tram.f_sp_deptid = td3.id
            LEFT JOIN tbl_user tu1 ON tram.f_sp_userid = tu1.id
            ORDER BY b.id;  
        ELSEIF c_type = 9 THEN -- 资产维修
            SELECT tram.*,tu2.f_name AS f_create_username,tu3.f_name AS f_update_username,td2.F_NAME AS f_deptname,
                   --  st.f_name  AS f_statusname,
                   (SELECT COUNT(*) FROM tbl_Repair_Detail  trad WHERE f_mid = tram.id) AS i_dcount,
                   (CASE  WHEN tram.f_audit = 1 THEN '已完成' ELSE (CASE WHEN tram.f_rejected = 1 THEN '已驳回' 
                                                                         ELSE  (CASE f_wxstate WHEN 0 THEN (CASE WHEN tram.f_status = 1 THEN  (CASE WHEN tram.f_audit_Sys_level = 0 THEN  '待送修' ELSE '待审批' END ) ELSE st.f_name END )
                                                                                               WHEN 1 THEN '已送修'  WHEN 2 THEN '维修中' WHEN 3 then '维修完成' WHEN -1 THEN '已拒绝' else '' END)    
                                                                   END )               
                   END) AS f_statusname,
                    tu4.f_name AS f_nextaudit_username                    
            FROM tbl_Repair_main   tram   
            INNER JOIN (SELECT * FROM temporary_temp_main LIMIT C_BID,C_ENID) b ON tram.id = b.mid
            LEFT JOIN (SELECT f_id,tsd.f_name FROM tbl_sys_dictionary tsd where tsd.f_type = 11) st ON tram.f_status = st.f_id
            inner JOIN tbl_dept td2 ON TRAM.f_deptid = TD2.ID      
            INNER JOIN tbl_user tu2 ON tram.f_create_user = tu2.id
            LEFT  JOIN tbl_user tu3 ON tram.f_update_user = tu3.id  
            LEFT JOIN tbl_user tu4 ON tram.f_nextaudit_user = tu4.id                    
            ORDER BY b.id;  
        END IF;
    end IF;
     
    drop temporary table temporary_temp_dept;
    DROP TEMPORARY TABLE temporary_temp_main;
END $$
DELIMITER ;




DROP PROCEDURE IF EXISTS msp_SPState_Check;
DELIMITER $$  
CREATE PROCEDURE msp_SPState_Check (IN c_model int, -- 401资产领用 402资产借，借出 40201资产借出归还 403资产变更 404资产调拨 405资产退库 501资产维修 502资产报废 503资产续用 504资产处置
IN c_mid int -- 单据ID 
)
label:
  BEGIN
    DECLARE c_spstate int;

    DROP TEMPORARY TABLE IF EXISTS Temp_msp_spstate_check_spinfo;
    CREATE TEMPORARY TABLE Temp_msp_spstate_check_spinfo (
      spid int
    );

    IF c_model = 401 THEN
      SET c_spstate = 0;
      INSERT INTO Temp_msp_spstate_check_spinfo (spid)
        SELECT
          trad.f_spid
        FROM tbl_receive_detail trad
        WHERE f_mid = c_mid;
    END IF;

    IF c_model = 402 THEN
      SET c_spstate = 0;
      INSERT INTO Temp_msp_spstate_check_spinfo (spid)
        SELECT
          trad.f_spid
        FROM tbl_lend_out_detail trad
        WHERE f_mid = c_mid;
    END IF;

    IF c_model = 40201 THEN
      SET c_spstate = 2;
      INSERT INTO Temp_msp_spstate_check_spinfo (spid)
        SELECT
          trad.f_spid
        FROM tbl_lend_in_detail trad
        WHERE f_mid = c_mid;
    END IF;

    IF c_model = 404 THEN
      SET c_spstate = 0;
      INSERT INTO Temp_msp_spstate_check_spinfo (spid)
        SELECT
          trad.f_spid
        FROM tbl_db_detail trad
        WHERE f_mid = c_mid;
    END IF;

    IF c_model = 405 THEN
      SET c_spstate = 1;
      INSERT INTO Temp_msp_spstate_check_spinfo (spid)
        SELECT
          trad.f_spid
        FROM tbl_return_detail trad
        WHERE f_mid = c_mid;
    END IF;
    IF c_model = 501 THEN -- 401资产领用 402资产借，借出 40201资产借出归还 403资产变更 404资产调拨 405资产退库 501资产维修 502资产报废 503资产续用 504资产处置
      SET c_spstate = 0;
      INSERT INTO Temp_msp_spstate_check_spinfo (spid)
        SELECT
          trad.f_spid
        FROM tbl_repair_detail trad
        WHERE f_mid = c_mid;
    END IF;
    IF c_model = 502 THEN -- 401资产领用 402资产借，借出 40201资产借出归还 403资产变更 404资产调拨 405资产退库 501资产维修 502资产报废 503资产续用 504资产处置
      SET c_spstate = 0;
      INSERT INTO Temp_msp_spstate_check_spinfo (spid)
        SELECT
          trad.f_spid
        FROM tbl_scrapped_detail trad
        WHERE f_mid = c_mid;
    END IF;
    --     IF c_model = 503 then -- 401资产领用 402资产借，借出 40201资产借出归还 403资产变更 404资产调拨 405资产退库 501资产维修 502资产报废 503资产续用 504资产处置
    --         set c_spstate = 0;
    --         INSERT INTO Temp_msp_spstate_check_spinfo(spid) SELECT trad.f_spid from tbl_handle_detail  trd   WHERE f_mid = c_mid;
    --     END IF;
    IF c_model = 504 THEN -- 401资产领用 402资产借，借出 40201资产借出归还 403资产变更 404资产调拨 405资产退库 501资产维修 502资产报废 503资产续用 504资产处置
      SET c_spstate = 0;
      INSERT INTO Temp_msp_spstate_check_spinfo (spid)
        SELECT
          trad.f_spid
        FROM tbl_handle_detail trad
        WHERE f_mid = c_mid;
    END IF;
    
 

    SELECT
      vs.f_spid,
      vs.f_Code,
      vs.f_Name,
      vs.f_StatusNAME
    FROM Temp_msp_spstate_check_spinfo tmscs
      INNER JOIN view_spinfo vs
        ON tmscs.spid = vs.f_spid
    WHERE vs.f_Status <> c_spstate;

    DROP TEMPORARY TABLE Temp_msp_spstate_check_spinfo;
 
  END
  $$

DELIMITER ;

DROP PROCEDURE IF EXISTS Msp_GetAudit_BillList;
-- 查询已审批单据列表
DELIMITER $$
CREATE PROCEDURE Msp_GetAudit_BillList(
    c_userid       int,  -- 602领用申请 
    c_curPage      int,
    c_pageSize     int,
    c_value        varchar(500)
 )
label:BEGIN
    DECLARE c_customid   int;
    DECLARE c_bid        int;
    DECLARE c_enid       int;
    DECLARE c_where      varchar(1000);
    
    DROP TEMPORARY TABLE IF EXISTS temp_msp_getaudit_bill_list;
    CREATE TEMPORARY TABLE  temp_msp_getaudit_bill_list(f_userid int,f_busid int,f_busname varchar(100),f_mid int,f_serno varchar(100),f_createuserid int,f_createdate varchar(100),f_auditdate varchar(100),
                                                        f_qty int,f_memo varchar(200),f_auditmemo varchar(100),f_audittype varchar(100),f_level int);
    
    SET  C_BID = (c_curPage-1)*c_pageSize;
    SET  C_ENID = c_pageSize;    
    IF c_value <> '' THEN
        SET c_where = CONCAT(' where 1=1 ',c_value);
    ELSE
        SET c_where = '';
    END IF;
    
    SELECT tu.f_customid INTO c_customid from tbl_user tu WHERE id =c_userid;
    
    INSERT INTO temp_msp_getaudit_bill_list(f_userid,f_busid,f_busname,f_mid,f_serno,f_createuserid,f_createdate,f_auditdate,f_qty,f_memo,f_auditmemo,f_audittype,f_level )
    SELECT a.f_userid,a.f_busid,a.f_busname,a.f_mid,a.f_serno,a.f_createuserid,a.f_createdate,a.f_auditdate,a.f_qty,a.f_memo,a.f_auditmemo,a.f_audittype,a.f_level
    FROM tbl_user_audit_stream a 
    WHERE a.f_customid = c_customid and a.f_userid = c_userid and a.f_flag = 0; 
 
--     INNER JOIN (
--         SELECT tuas.f_mid,MAX(tuas.f_createdate) AS f_createdate  from tbl_user_audit_stream tuas 
--         WHERE tuas.f_customid = c_customid AND tuas.f_userid = c_userid and tuas.f_flag = 0
--         GROUP BY tuas.f_mid) b ON a.f_mid = b.f_mid AND a.f_createdate = b.f_createdate;
    
  
    
    SET @sql = 
    CONCAT('
    SELECT * FROM (
        SELECT a.f_userid,a.f_busname,a.f_busid,a.f_mid,a.f_createuserid,tu.f_name AS f_createusername,a.f_auditdate,a.f_qty,a.f_memo,a.f_auditmemo,a.f_audittype,
               tu2.f_name AS f_username ,(CASE f_level WHEN 1 then ''一审'' WHEN  2 THEN ''二审''  WHEN 3 then ''三审'' ELSE '''' END ) AS f_levelname,a.f_level,a.f_serno 
        FROM temp_msp_getaudit_bill_list a
        left join tbl_user tu ON a.f_createuserid = tu.id
        LEFT JOIN tbl_user tu2 ON a.f_userid = tu2.id 
    )A',C_WHERE,'
    
    limit ',c_bid,',',c_enid
    
    );

 

    PREPARE smt FROM @sql;
    EXECUTE smt;
    DEALLOCATE PREPARE smt;
        
    DROP TEMPORARY TABLE IF EXISTS temp_msp_getaudit_bill_list;
END $$
DELIMITER;



-- 主界面首页数据查询
DROP PROCEDURE IF EXISTS Msp_Main_CountQuery;
DELIMITER $$
CREATE PROCEDURE Msp_Main_CountQuery(
    c_userid       int  -- 602领用申请 
 )
BEGIN
    DECLARE c_customid   int;
    DECLARE c_sp_count   int; -- 待审批任务
    DECLARE c_db_count   int; -- 待确认调拨单
    DECLARE c_pd_count   int; -- 待盘点
    DECLARE c_zc_count   int; -- 总资产
    DECLARE c_xz_count   int; -- 闲置资产
    DECLARE c_dq_count   int; -- 当月到期资产
    DECLARE c_bx_count   int; -- 报修资产
    DECLARE c_qc_kc      int; -- 全部库存预警

    SELECT tu.f_customid into c_customid from tbl_user tu where id = c_userid;
    -- 待审批任务
    SELECT count(*) INTO c_sp_count FROM tbl_receive_apply_main tram WHERE tram.f_customid = c_customid AND   tram.f_status = 1 and tram.f_nextaudit_user = c_userid;

    -- 待确认调拨单
    SELECT COUNT(*) INTO c_db_count  FROM tbl_db_main tdm WHERE tdm.f_customid = c_customid AND  tdm.f_create_user = c_userid and tdm.f_audit < 2;

    SET  c_pd_count = 0;
    SELECT COUNT(*) INTO c_zc_count FROM tbl_spinfo ts WHERE ts.f_customid = c_customid and ts.f_flag = 0;
    
    SELECT COUNT(*) INTO c_xz_count FROM tbl_spinfo ts WHERE ts.f_customid = c_customid and ts.f_flag = 0 and ts.f_Status = 0;
    
    SELECT COUNT(*) INTO c_dq_count FROM tbl_spinfo ts WHERE ts.f_customid = c_customid and ts.f_flag = 0 and ts.f_MaintenanceDate <   date_add(curdate()-day(curdate())+1,interval 1 month);  -- 当月到期

    -- 报修资产
    SELECT COUNT(*) INTO c_dq_count FROM tbl_spinfo ts WHERE ts.f_customid = c_customid and ts.f_flag = 0 and ts.f_Status = 4;
 
    SET  c_qc_kc = 0;

    SELECT IFNULL(c_sp_count,0) AS f_audit_count,IFNULL(c_db_count,0) AS f_db_count,IFNULL(c_pd_count,0) AS f_pd_count,IFNULL(c_zc_count,0) AS f_spcount,IFNULL(c_xz_count,0) AS f_xz_count,
           IFNULL(c_dq_count,0) AS f_dq_count,IFNULL(c_bx_count,0) AS f_repair_count,IFNULL(c_qc_kc,0) AS f_warnkcqty;

 
END $$
DELIMITER;

DROP PROCEDURE IF EXISTS Msp_Get_NextAudit_User;  
DELIMITER $$
-- 下一审批人选择 ，下一审批人接口调用
CREATE PROCEDURE Msp_Get_NextAudit_User(
    c_busid       int,  --   602领用申请  401领用 402 资产借用 403资产变更 404资产调拨 405资产退库 406借用归还  501资产维修  502资产报废  504资产处置
    c_mid         int,  -- 单据ID  
    c_type        int,  -- 0直接返回,1插入提定临时表   
    c_userid      int,  -- 用户ID 
    c_tablename   varchar(100) -- 指定临时表名

)
label:BEGIN
    DECLARE c_auditstate       int; 
    DECLARE c_customid         int;
    DECLARE c_audit_sys_state  int;
    DECLARE c_Next_Deptid      varchar(300);  -- 下一审批部门 -1 表示建单所属部门
    DECLARE c_Next_PostionID   varchar(300);  -- 下一审批职位
    DECLARE c_billdeptid       varchar(3000); -- 单据所属部门
    DECLARE c_postionid        varchar(30);   -- 审批职位
    DECLARE c_deptid           int;           -- 用户关联部门
    DECLARE C_DEPT             varchar(500);  -- 部门关联下级部门

    DROP TEMPORARY TABLE IF EXISTS temp_NextAudit_User_Table; 
    DROP TEMPORARY TABLE IF EXISTS temp_NextAudit_DEPT_Table; 
    DROP TEMPORARY TABLE IF EXISTS temp_NextAudit_POSTION_Table; 
    CREATE TEMPORARY TABLE if NOT EXISTS temp_NextAudit_User_Table(ID int,f_no varchar(100),f_name varchar(100));
    CREATE TEMPORARY TABLE if NOT EXISTS temp_NextAudit_DEPT_Table(ID int);
    CREATE TEMPORARY TABLE if NOT EXISTS temp_NextAudit_POSTION_Table(ID int);
    
    IF c_mid <> -1 THEN    
        if c_busid = 602 THEN       --   602领用申请  401领用 402 资产借用 403资产变更 404资产调拨 405资产退库 406借用归还  501资产维修  502资产报废  504资产处置  
            SELECT tram.f_audit_level,tram.f_customid INTO c_auditstate,c_customid  FROM tbl_receive_apply_main tram where id = c_mid;    
        END IF;
        if c_busid = 401 THEN        
            SELECT tram.f_audit_level,tram.f_customid INTO c_auditstate,c_customid  FROM tbl_receive_main  tram where id = c_mid;    
        END IF;
        if c_busid = 402 THEN        
            SELECT tram.f_audit_level,tram.f_customid INTO c_auditstate,c_customid  FROM tbl_lend_out_main tram where id = c_mid;    
        END IF;
        if c_busid = 403 THEN        
            SELECT tram.f_audit_level,tram.f_customid INTO c_auditstate,c_customid  FROM tbl_change_main tram where id = c_mid;    
        END IF;
        if c_busid = 404 THEN        
            SELECT tram.f_audit_level,tram.f_customid INTO c_auditstate,c_customid  FROM tbl_db_main tram where id = c_mid;    
        END IF;
        if c_busid = 405 THEN        
            SELECT tram.f_audit_level,tram.f_customid INTO c_auditstate,c_customid  FROM tbl_return_main tram where id = c_mid;    
        END IF;
        if c_busid = 406 THEN        
            SELECT tram.f_audit_level,tram.f_customid INTO c_auditstate,c_customid  FROM tbl_lend_in_main tram where id = c_mid;    
        END IF;
        if c_busid = 501 THEN        
            SELECT tram.f_audit_level,tram.f_customid INTO c_auditstate,c_customid  FROM tbl_repair_main tram where id = c_mid;    
        END IF;
        if c_busid = 502 THEN        
            SELECT tram.f_audit_level,tram.f_customid INTO c_auditstate,c_customid  FROM tbl_scrapped_main tram where id = c_mid;    
        END IF;
        if c_busid = 504 THEN        
            SELECT tram.f_audit_level,tram.f_customid INTO c_auditstate,c_customid  FROM tbl_handle_main tram where id = c_mid;    
        END IF;

        SET c_auditstate = c_auditstate+1;
        
        INSERT INTO temp_NextAudit_DEPT_Table(id) 
        SELECT tbap.f_valid from tbl_bus_audit_plant tbap where tbap.f_customid = c_customid and tbap.f_busid = c_busid and tbap.f_mid = c_mid and tbap.f_AuditLevel =c_auditstate AND tbap.f_valtype = 1; 
        
        INSERT INTO temp_NextAudit_POSTION_Table(id) 
        SELECT tbap.f_valid from tbl_bus_audit_plant tbap where tbap.f_customid = c_customid and tbap.f_busid = c_busid and tbap.f_mid = c_mid and tbap.f_AuditLevel =c_auditstate AND tbap.f_valtype = 2; 
    
        INSERT INTO temp_NextAudit_User_Table(id,f_no,f_name)
        SELECT tu.id,f_no,f_name from tbl_user tu 
        INNER JOIN temp_NextAudit_DEPT_Table tnadt ON tu.f_deptno = tnadt.ID
        inner join temp_NextAudit_POSTION_Table tnapt ON tu.f_postionid = tnapt.ID;
        
        IF c_type = 0 THEN
            select * FROM temp_NextAudit_User_Table;
        ELSE 
            SET @sql = CONCAT('insert into ',c_tablename,'(id ,f_no,f_name) select id,f_no,f_name from temp_NextAudit_User_Table ');
            PREPARE smt FROM @sql;
            EXECUTE smt;
            DEALLOCATE PREPARE smt;
        END IF;
    ELSE   -- 单据ID是 -1就按部门查询人员
        SELECT tu.f_customid,tu.f_deptno INTO c_customid,c_deptid FROM tbl_user tu WHERE ID =c_userid;
        SELECT taps.f_first_deptid, taps.f_first_PostionID INTO c_billdeptid,c_postionid from tbl_audit_process_set taps WHERE taps.f_busid = c_busid AND taps.f_customid = c_customid;
        
        IF (c_billdeptid <> '')   THEN
            IF c_billdeptid = '-1' THEN  -- 1表示所属部门
                -- 查询可操作部门，传空就反这个人可以操作的所有部门
                CALL Msp_Data_Parent_Child(6,c_deptid,c_userid,C_DEPT);              
                SET @sql = CONCAT('insert into ',c_tablename,'(id ,f_no,f_name) SELECT id,f_no,tu.f_name  FROM tbl_user tu WHERE tu.f_customid =',c_customid,' and tu.f_deptno in (',C_DEPT,') ');
            ELSE
                SET @sql = CONCAT('insert into ',c_tablename,'(id ,f_no,f_name) SELECT id,f_no,tu.f_name  FROM tbl_user tu WHERE tu.f_customid =',c_customid,' and tu.f_deptno in (',c_billdeptid,') ');
            END IF;
        ELSE
            SET @sql = CONCAT('insert into ',c_tablename,'(id ,f_no,f_name) SELECT id,f_no,tu.f_name  FROM tbl_user tu WHERE tu.f_customid = ',c_customid);
        END IF;

        IF (c_postionid <> '') AND (CAST(c_postionid AS SIGNED)> 0) THEN
            SET @sql = CONCAT(@sql,' and f_postionid in (',c_postionid,')');
        END IF;
   
        PREPARE smt FROM @sql;
        EXECUTE smt;
        DEALLOCATE PREPARE smt;
        
    END IF;


    DROP TEMPORARY TABLE IF EXISTS temp_NextAudit_User_Table;
    DROP TEMPORARY TABLE IF EXISTS temp_NextAudit_DEPT_Table;
    DROP TEMPORARY TABLE IF EXISTS temp_NextAudit_POSTION_Table;

END $$
DELIMITER; 


DROP PROCEDURE IF EXISTS Msp_Bill_Get_NextAudit_User;   
DELIMITER $$ 
-- 下一审批人选择 ，跟据单号选择下一审批人，如果是新增单据c_mid就传-1
CREATE PROCEDURE Msp_Bill_Get_NextAudit_User(
    c_busid       int,  -- 审批业务ID，关联权限表业务ID 602领用申请  401领用 402 资产借用 403资产变更 404资产调拨 405资产退库 406借用归还  501资产维修  502资产报废  504资产处置
    c_mid         int,  -- 单据ID 
    c_userid      int
)
label:BEGIN
    DECLARE  isnext      int;  
    DECLARE  c_level     int;
    DECLARE  c_syslevel  int;
    DECLARE  c_customid  int;

    DROP TEMPORARY TABLE IF EXISTS temp_msp_get_nextaudit_user_return;
                        
    CREATE TEMPORARY TABLE temp_msp_get_nextaudit_user_return(id int,f_no varchar(100),f_name varchar(100));

    SELECT tu.f_customid INTO c_customid FROM tbl_user tu where id = c_userid;
    IF c_busid = 602 THEN
        SELECT tram.f_audit_level,tram.f_audit_Sys_level INTO c_level,c_syslevel FROM tbl_receive_apply_main tram WHERE id = c_mid;    
    END IF;
    IF c_busid = 401 THEN
        SELECT tram.f_audit_level,tram.f_audit_Sys_level INTO c_level,c_syslevel FROM tbl_receive_main tram  WHERE id = c_mid;    
    END IF;
    IF c_busid = 402 THEN
        SELECT tram.f_audit_level,tram.f_audit_Sys_level INTO c_level,c_syslevel FROM tbl_lend_out_main tram WHERE id = c_mid;    
    END IF;
    IF c_busid = 403 THEN
        SELECT tram.f_audit_level,tram.f_audit_Sys_level INTO c_level,c_syslevel FROM tbl_change_main tram WHERE id = c_mid;    
    END IF;
    IF c_busid = 404 THEN
        SELECT tram.f_audit_level,tram.f_audit_Sys_level INTO c_level,c_syslevel FROM tbl_db_main tram WHERE id = c_mid;    
    END IF;
    IF c_busid = 405 THEN
        SELECT tram.f_audit_level,tram.f_audit_Sys_level INTO c_level,c_syslevel FROM tbl_return_main tram WHERE id = c_mid;    
    END IF;
    IF c_busid = 406 THEN
        SELECT tram.f_audit_level,tram.f_audit_Sys_level INTO c_level,c_syslevel FROM tbl_lend_in_main tram WHERE id = c_mid;    
    END IF;
    IF c_busid = 501 THEN
        SELECT tram.f_audit_level,tram.f_audit_Sys_level INTO c_level,c_syslevel FROM tbl_repair_main tram WHERE id = c_mid;    
    END IF;
    IF c_busid = 502 THEN
        SELECT tram.f_audit_level,tram.f_audit_Sys_level INTO c_level,c_syslevel FROM tbl_scrapped_main tram WHERE id = c_mid;    
    END IF;
    IF c_busid = 504 THEN
        SELECT tram.f_audit_level,tram.f_audit_Sys_level INTO c_level,c_syslevel FROM tbl_handle_main tram WHERE id = c_mid;    
    END IF;


    SET isnext = 0;
    IF c_mid <> -1 THEN   
        SET c_level = IFNULL(c_level,0) +1;
        IF c_level <= c_syslevel THEN
            SET isnext = 1;
        END IF; 
    ELSE  -- 提交
        SELECT taps.f_isaudit INTO isnext from tbl_audit_process_set taps where taps.f_busid = c_busid and taps.f_customid =c_customid;
    END IF;

    IF isnext = 1 THEN
        CALL Msp_Get_NextAudit_User(c_busid,c_mid,1,c_userid,'temp_msp_get_nextaudit_user_return');   
        SELECT * FROM temp_msp_get_nextaudit_user_return;
--     ELSE
--         SELECT NULL AS id ,NULL AS f_no,null AS f_name;
--     END IF;
    END IF;
    DROP TEMPORARY TABLE IF EXISTS temp_msp_get_nextaudit_user_return;
END $$
DELIMITER;


DROP PROCEDURE IF EXISTS Msp_Get_Audit_Process_DeptOrPostion;  
-- 通过业务ID获取可操作部门或是职位，返回表,用于 Msp_Get_User_Notice 存储过程调用
DELIMITER $$
-- 业务通知查询接口,这里可以按用户ID查询各种待处理的单据
CREATE PROCEDURE Msp_Get_Audit_Process_DeptOrPostion( 
    c_customid       int,   -- 客户ID
    c_busid          int,   -- 查询业务
    c_type           int,   -- 0查部门  1查职位
    c_userid         int,   -- 当前用户
    c_out_table      varchar(100)

)
label:BEGIN 
    DECLARE c_first_deptid       varchar(5000);
    DECLARE c_first_postionid    varchar(5000);
    DECLARE c_two_deptid         varchar(5000);
    DECLARE c_two_postionid      varchar(5000);
    DECLARE c_three_deptid       varchar(5000);
    DECLARE c_three_postionid    varchar(5000);
    DECLARE c_deptid             int;



    SELECT tu.f_deptno INTO c_deptid from tbl_user tu WHERE ID  = c_userid;
    SELECT taps.f_first_deptid,taps.f_first_PostionID,taps.f_two_deptid,taps.f_two_PostionID,taps.f_three_deptid,taps.f_three_PostionID  INTO
           c_first_deptid,c_first_postionid,c_two_deptid,c_two_postionid,c_three_deptid,c_three_postionid
    from tbl_audit_process_set taps where taps.f_customid = c_customid and taps.f_busid = c_busid;

 
    IF c_first_deptid = '-1' THEN
        SET c_first_deptid = c_deptid;
    END IF;
    IF c_two_deptid = '-1' THEN
        SET c_two_deptid = c_deptid;
    END IF;
    IF c_three_deptid = '-1' THEN
        SET c_three_deptid = c_deptid;
    END IF;

    IF c_type = 0 then
        SET @sql = CONCAT(' insert into ', c_out_table,'(billtypeid ,level ,deptid ) select ',c_busid,' ,1,id from tbl_dept where id in (',IFNULL(c_first_deptid,c_deptid),')');
 
--  SELECT @sql;
-- LEAVE label;
        PREPARE smt FROM @sql;
        EXECUTE smt;
        DEALLOCATE PREPARE smt;

        SET @sql = CONCAT(' insert into ', c_out_table,'(billtypeid ,level ,deptid ) select ',c_busid,', 2,id from tbl_dept where id in (',IFNULL(c_two_deptid,c_deptid),')');
        PREPARE smt FROM @sql;
        EXECUTE smt;
        DEALLOCATE PREPARE smt;

        SET @sql = CONCAT(' insert into ', c_out_table,'(billtypeid ,level ,deptid ) select ',c_busid,', 3,id from tbl_dept where id in (',IFNULL(c_three_deptid,c_deptid),')');
        PREPARE smt FROM @sql;
        EXECUTE smt;
        DEALLOCATE PREPARE smt;
    END IF;
    IF c_type = 1 THEN
        SET @sql = CONCAT(' insert into ', c_out_table,'(billtypeid ,level ,PSTIONID ) select ',c_busid,', 1,id from tbl_position where id in (',IFNULL(c_first_postionid,'-1'),')');
        PREPARE smt FROM @sql;
        EXECUTE smt;
        DEALLOCATE PREPARE smt;

        SET @sql = CONCAT(' insert into ', c_out_table,'(billtypeid ,level ,PSTIONID ) select ',c_busid,' ,2,id from tbl_position where id in (',IFNULL(c_two_postionid,'-1'),')');
        PREPARE smt FROM @sql;
        EXECUTE smt;
        DEALLOCATE PREPARE smt;

        SET @sql = CONCAT(' insert into ', c_out_table,'(billtypeid ,level ,PSTIONID ) select ',c_busid,' ,3,id from tbl_position where id in (',IFNULL(c_three_postionid,'-1'),')');
        PREPARE smt FROM @sql;
        EXECUTE smt;
        DEALLOCATE PREPARE smt;
    END IF;
END $$
DELIMITER;



DROP PROCEDURE IF EXISTS Msp_Get_User_Notice;   
DELIMITER $$ 
-- 业务通知查询接口,这里可以按用户ID查询各种待处理的单据
CREATE PROCEDURE Msp_Get_User_Notice( 
    c_userid         int,  -- 查询人
    c_value          varchar(500),  -- 查询条件
    c_type           int,   -- 0查询待办事项分页汇总  1查询待办事项分页明细
    c_curPage        int,
    c_pageSize       int
)

label:BEGIN 
    -- 优先按单据的下一审批人查找，如果没有指定下一审批人那么按照审批级别对应的部门职位查找

    DECLARE c_postion   int;  -- 当前用户职位
    DECLARE c_deptid    int;  -- 当前用户所属部门
    DECLARE c_customid  int;  -- 客户ID
    DECLARE c_where     varchar(1000);
    DECLARE c_bid       int;
    DROP TEMPORARY TABLE  IF EXISTS TEMP_GET_USER_NOTICE;
    DROP TEMPORARY TABLE IF EXISTS TEMP_GET_USER_MID;
    DROP TEMPORARY TABLE IF EXISTS TEMP_GET_USER_PROCESS_DEPT;
    DROP TEMPORARY TABLE IF EXISTS TEMP_GET_USER_PROCESS_POSTION;
    DROP TEMPORARY TABLE IF EXISTS TEMP_GET_USER_MID2;
    
    CREATE TEMPORARY TABLE TEMP_GET_USER_PROCESS_DEPT(billtypeid int,level int,deptid int);  -- 审批配置部门表
    CREATE TEMPORARY TABLE TEMP_GET_USER_PROCESS_POSTION(billtypeid int,level int,PSTIONID int) ; -- 审批配置职位表
    create TEMPORARY TABLE TEMP_GET_USER_MID(id int,billtypeid int );  -- 各业务的主单ID表
    CREATE TEMPORARY TABLE TEMP_GET_USER_MID2(ID INT,billtypeid int);  -- 各业务主单ID表副本
    CREATE TEMPORARY TABLE   TEMP_GET_USER_NOTICE(ID int,billtypeid int,billtypeName varchar(100),f_statusname varchar(100),f_serno varchar(100),createusername varchar(100),createdate varchar(100),
                                                  deptname varchar(100),memo varchar(500),qty decimal(18,2),stateid int,isaudit int,wxstate int);  -- 最终返回表,wxstate：维修状态

    SET c_bid = (c_curpage -1)  *c_pagesize;
    
    select tu.f_postionid,tu.f_customid,tu.f_deptno INTO c_postion,c_customid,c_deptid from tbl_user tu where id = c_userid;


    IF c_value <> '' THEN
        set c_where =CONCAT(' where f_serno like ''%',c_value,'%''');
    ELSE
        set c_where = '';
    END IF;
    CALL Msp_Get_Audit_Process_DeptOrPostion(c_customid,602,0,c_userid,'TEMP_GET_USER_PROCESS_DEPT') ; -- 查询审批配置部门信息到 TEMP_GET_USER_PROCESS_DEPT 表
    CALL Msp_Get_Audit_Process_DeptOrPostion(c_customid,602,1,c_userid,'TEMP_GET_USER_PROCESS_POSTION') ; -- 查询审批配置职位信息到 TEMP_GET_USER_PROCESS_POSTION 表

 

    -- 领用申请查询  --查询有指定下一审批人的单据  -- 602领用申请  401领用 402 资产借用 403资产变更 404资产调拨 405资产退库 406借用归还  501资产维修  502资产报废  504资产处置
    INSERT INTO TEMP_GET_USER_MID(id,billtypeid)
    SELECT id,602 from tbl_receive_apply_main tram where tram.f_isaudit = 0 AND tram.f_nextaudit_user = c_userid AND tram.f_status > 0 and tram.f_audit_Sys_level > 0
    UNION ALL
    SELECT id,403 from tbl_change_main  tram WHERE  tram.f_audit = 0 AND  f_status > 0 
          AND ( (tram.f_is_approval = 0 AND tram.f_nextaudit_user = c_userid  and tram.f_audit_Sys_level > 0)  OR ((tram.f_is_approval = 1) AND (tram.f_create_user = c_userid) )) -- 资产变更  ,没审批或是已审批完成还没出库都可查出来
    UNION ALL
    SELECT id,404 FROM tbl_db_main  tram WHERE  tram.f_audit = 0 AND  f_status > 0 
          AND ( (tram.f_is_approval = 0 AND tram.f_nextaudit_user = c_userid  and tram.f_audit_Sys_level > 0)  OR ((tram.f_is_approval = 1) AND (tram.f_create_user = c_userid) ))   -- 资产调拨
    UNION ALL
    SELECT id,504 from tbl_handle_main tram WHERE  tram.f_audit = 0 AND  f_status > 0 
          AND ( (tram.f_is_approval = 0 AND tram.f_nextaudit_user = c_userid  and tram.f_audit_Sys_level > 0)  OR ((tram.f_is_approval = 1) AND (tram.f_create_user = c_userid) ))   -- 资产处置
    UNION ALL
    SELECT id,402 from tbl_lend_out_main tram WHERE  tram.f_audit = 0 AND  f_status > 0 
          AND ( (tram.f_is_approval = 0 AND tram.f_nextaudit_user = c_userid  and tram.f_audit_Sys_level > 0)  OR ((tram.f_is_approval = 1) AND (tram.f_create_user = c_userid) ))   -- 资产借出
    UNION ALL
    SELECT id,406 from tbl_lend_in_main tram WHERE  tram.f_audit = 0 AND  f_status > 0 
          AND ( (tram.f_is_approval = 0 AND tram.f_nextaudit_user = c_userid  and tram.f_audit_Sys_level > 0)  OR ((tram.f_is_approval = 1) AND (tram.f_create_user = c_userid) ))  -- 资产借出归还
    UNION ALL
    SELECT id,401 from tbl_receive_main tram WHERE  tram.f_audit = 0 AND  f_status > 0 
          AND ( (tram.f_is_approval = 0 AND tram.f_nextaudit_user = c_userid  and tram.f_audit_Sys_level > 0)  OR ((tram.f_is_approval = 1) AND (tram.f_create_user = c_userid) ))   -- 资产领用
    UNION ALL
    SELECT id,405 from tbl_return_main tram WHERE  tram.f_audit = 0 AND  f_status > 0 
          AND ( (tram.f_is_approval = 0 AND tram.f_nextaudit_user = c_userid  and tram.f_audit_Sys_level > 0)  OR ((tram.f_is_approval = 1) AND (tram.f_create_user = c_userid) ))   -- 资产退库
    UNION ALL
    SELECT id,502 from tbl_scrapped_main tram WHERE  tram.f_audit = 0 AND  f_status > 0 
          AND ( (tram.f_is_approval = 0 AND tram.f_nextaudit_user = c_userid  and tram.f_audit_Sys_level > 0)  OR ((tram.f_is_approval = 1) AND (tram.f_create_user = c_userid) ))   -- 资产报废
    UNION ALL
    SELECT id,501 from tbl_repair_main tram WHERE  tram.f_audit = 0 AND  f_status > 0 
          AND ( (tram.f_is_approval = 0 AND tram.f_nextaudit_user = c_userid  and tram.f_audit_Sys_level > 0)  OR ((tram.f_is_approval = 1) AND (tram.f_create_user = c_userid) )) ;  -- 资产维修 


    INSERT INTO TEMP_GET_USER_MID2(ID,billtypeid) SELECT ID,billtypeid FROM TEMP_GET_USER_MID tgum;

    -- 领用申请查询  --查询没有指定一下审批人的单据
    INSERT INTO TEMP_GET_USER_MID(id,billtypeid)
    SELECT tram.id,602 AS billtypeid from tbl_receive_apply_main tram 
    INNER JOIN TEMP_GET_USER_PROCESS_DEPT tgumd ON tram.f_audit_level = tgumd.level
    INNER JOIN TEMP_GET_USER_PROCESS_POSTION tgump ON tram.f_audit_level = tgump.level
    where tram.f_isaudit = 0 AND (tram.f_nextaudit_user IS NULL OR tram.f_nextaudit_user = -1) and tram.f_audit_Sys_level > 0
          AND tgumd.deptid IN (c_deptid) AND tgump.PSTIONID IN (c_postion) AND tram.id not IN (select id FROM TEMP_GET_USER_MID2 WHERE billtypeid = 602)
    GROUP BY tram.id; -- 一级审批 602领用申请
    INSERT INTO TEMP_GET_USER_MID(id,billtypeid)
    SELECT tram.id,401 AS billtypeid from tbl_receive_main  tram 
    INNER JOIN TEMP_GET_USER_PROCESS_DEPT tgumd ON tram.f_audit_level = tgumd.level
    INNER JOIN TEMP_GET_USER_PROCESS_POSTION tgump ON tram.f_audit_level = tgump.level
    where tram.f_audit = 0 AND ( (tram.f_is_approval =0 AND  (tram.f_nextaudit_user IS NULL OR tram.f_nextaudit_user = -1) and tram.f_audit_Sys_level > 0
                                                         AND tgumd.deptid IN (c_deptid) AND tgump.PSTIONID IN (c_postion) )
                                OR (tram.f_is_approval = 1 AND tram.f_create_user = c_userid) )  AND tram.id not IN (select id FROM TEMP_GET_USER_MID2 WHERE billtypeid = 401) -- 未审批完或是审批完没出库的都出来
    GROUP BY tram.id;  -- 一级审批 401领用
    INSERT INTO TEMP_GET_USER_MID(id,billtypeid)
    SELECT tram.id,403 AS billtypeid from tbl_change_main  tram 
    INNER JOIN TEMP_GET_USER_PROCESS_DEPT tgumd ON tram.f_audit_level = tgumd.level
    INNER JOIN TEMP_GET_USER_PROCESS_POSTION tgump ON tram.f_audit_level = tgump.level
    where tram.f_audit = 0 AND ( (tram.f_is_approval =0 AND  (tram.f_nextaudit_user IS NULL OR tram.f_nextaudit_user = -1) and tram.f_audit_Sys_level > 0
                                                         AND tgumd.deptid IN (c_deptid) AND tgump.PSTIONID IN (c_postion) )  -- 开启审批但是没提定下一审批人那么所属部门和所属职位也能审批
                                OR (tram.f_is_approval = 1 AND tram.f_create_user = c_userid) ) AND tram.id not IN (select id FROM TEMP_GET_USER_MID2 WHERE billtypeid = 403)-- 未审批完或是审批完没出库的都出来
    GROUP BY tram.id;  -- 一级审批 403资产变更  
    INSERT INTO TEMP_GET_USER_MID(id,billtypeid)
    SELECT tram.id,404 AS billtypeid from tbl_db_main tram 
    INNER JOIN TEMP_GET_USER_PROCESS_DEPT tgumd ON tram.f_audit_level = tgumd.level
    INNER JOIN TEMP_GET_USER_PROCESS_POSTION tgump ON tram.f_audit_level = tgump.level
    where tram.f_audit = 0 AND ( (tram.f_is_approval =0 AND  (tram.f_nextaudit_user IS NULL OR tram.f_nextaudit_user = -1) and tram.f_audit_Sys_level > 0
                                                         AND tgumd.deptid IN (c_deptid) AND tgump.PSTIONID IN (c_postion) )
                                OR (tram.f_is_approval = 1 AND tram.f_create_user = c_userid) ) AND tram.id not IN (select id FROM TEMP_GET_USER_MID2 WHERE billtypeid = 404)-- 未审批完或是审批完没出库的都出来
    GROUP BY tram.id;  -- 一级审批 404资产调拨
    INSERT INTO TEMP_GET_USER_MID(id,billtypeid)
    SELECT tram.id,405 AS billtypeid from tbl_return_main tram 
    INNER JOIN TEMP_GET_USER_PROCESS_DEPT tgumd ON tram.f_audit_level = tgumd.level
    INNER JOIN TEMP_GET_USER_PROCESS_POSTION tgump ON tram.f_audit_level = tgump.level
    where tram.f_audit = 0 AND ( (tram.f_is_approval =0 AND  (tram.f_nextaudit_user IS NULL OR tram.f_nextaudit_user = -1) and tram.f_audit_Sys_level > 0
                                                         AND tgumd.deptid IN (c_deptid) AND tgump.PSTIONID IN (c_postion) )
                                OR (tram.f_is_approval = 1 AND tram.f_create_user = c_userid) ) AND tram.id not IN (select id FROM TEMP_GET_USER_MID2 WHERE billtypeid = 405)-- 未审批完或是审批完没出库的都出来
    GROUP BY tram.id;  -- 一级审批 405资产退库
    INSERT INTO TEMP_GET_USER_MID(id,billtypeid)
    SELECT tram.id,501 AS billtypeid from tbl_repair_main tram 
    INNER JOIN TEMP_GET_USER_PROCESS_DEPT tgumd ON tram.f_audit_level = tgumd.level
    INNER JOIN TEMP_GET_USER_PROCESS_POSTION tgump ON tram.f_audit_level = tgump.level
    where tram.f_audit = 0 AND ( (tram.f_is_approval =0 AND  (tram.f_nextaudit_user IS NULL OR tram.f_nextaudit_user = -1) and tram.f_audit_Sys_level > 0
                                                         AND tgumd.deptid IN (c_deptid) AND tgump.PSTIONID IN (c_postion) )
                                OR (tram.f_is_approval = 1 AND tram.f_create_user = c_userid) ) AND tram.id not IN (select id FROM TEMP_GET_USER_MID2 WHERE billtypeid = 501)-- 未审批完或是审批完没出库的都出来
    GROUP BY tram.id; -- 一级审批 501资产维修
    INSERT INTO TEMP_GET_USER_MID(id,billtypeid)
    SELECT tram.id,502 AS billtypeid from tbl_scrapped_main tram 
    INNER JOIN TEMP_GET_USER_PROCESS_DEPT tgumd ON tram.f_audit_level = tgumd.level
    INNER JOIN TEMP_GET_USER_PROCESS_POSTION tgump ON tram.f_audit_level = tgump.level
    where tram.f_audit = 0 AND ( (tram.f_is_approval =0 AND  (tram.f_nextaudit_user IS NULL OR tram.f_nextaudit_user = -1) and tram.f_audit_Sys_level > 0
                                                         AND tgumd.deptid IN (c_deptid) AND tgump.PSTIONID IN (c_postion) )
                                OR (tram.f_is_approval = 1 AND tram.f_create_user = c_userid) ) AND tram.id not IN (select id FROM TEMP_GET_USER_MID2 WHERE billtypeid = 502)-- 未审批完或是审批完没出库的都出来
    GROUP BY tram.id;  -- 一级审批 502资产报废
    INSERT INTO TEMP_GET_USER_MID(id,billtypeid)
    SELECT tram.id,504 AS billtypeid from tbl_handle_main tram 
    INNER JOIN TEMP_GET_USER_PROCESS_DEPT tgumd ON tram.f_audit_level = tgumd.level
    INNER JOIN TEMP_GET_USER_PROCESS_POSTION tgump ON tram.f_audit_level = tgump.level
    where tram.f_audit = 0 AND ( (tram.f_is_approval =0 AND  (tram.f_nextaudit_user IS NULL OR tram.f_nextaudit_user = -1) and tram.f_audit_Sys_level > 0
                                                         AND tgumd.deptid IN (c_deptid) AND tgump.PSTIONID IN (c_postion) )
                                OR (tram.f_is_approval = 1 AND tram.f_create_user = c_userid) ) AND tram.id not IN (select id FROM TEMP_GET_USER_MID2 WHERE billtypeid = 504)-- 未审批完或是审批完没出库的都出来
    GROUP BY tram.id;  -- 一级审批 504 资产处理
    INSERT INTO TEMP_GET_USER_MID(id,billtypeid)
    SELECT tram.id,402 AS billtypeid from tbl_lend_out_main tram 
    INNER JOIN TEMP_GET_USER_PROCESS_DEPT tgumd ON tram.f_audit_level = tgumd.level
    INNER JOIN TEMP_GET_USER_PROCESS_POSTION tgump ON tram.f_audit_level = tgump.level
    where tram.f_audit = 0 AND ( (tram.f_is_approval =0 AND  (tram.f_nextaudit_user IS NULL OR tram.f_nextaudit_user = -1) and tram.f_audit_Sys_level > 0
                                                         AND tgumd.deptid IN (c_deptid) AND tgump.PSTIONID IN (c_postion) )
                                OR (tram.f_is_approval = 1 AND tram.f_create_user = c_userid) ) AND tram.id not IN (select id FROM TEMP_GET_USER_MID2 WHERE billtypeid = 402)-- 未审批完或是审批完没出库的都出来
    GROUP BY tram.id;  -- 一级审批  402资产借出
    INSERT INTO TEMP_GET_USER_MID(id,billtypeid)
    SELECT tram.id,406 AS billtypeid from tbl_lend_in_main tram 
    INNER JOIN TEMP_GET_USER_PROCESS_DEPT tgumd ON tram.f_audit_level = tgumd.level
    INNER JOIN TEMP_GET_USER_PROCESS_POSTION tgump ON tram.f_audit_level = tgump.level
    where tram.f_audit = 0 AND ( (tram.f_is_approval =0 AND  (tram.f_nextaudit_user IS NULL OR tram.f_nextaudit_user = -1) and tram.f_audit_Sys_level > 0
                                                         AND tgumd.deptid IN (c_deptid) AND tgump.PSTIONID IN (c_postion) )
                                OR (tram.f_is_approval = 1 AND tram.f_create_user = c_userid) ) AND tram.id not IN (select id FROM TEMP_GET_USER_MID2 WHERE billtypeid = 406)-- 未审批完或是审批完没出库的都出来
    GROUP BY tram.id ; -- 一级审批 402资产借出归还
    

 


    INSERT INTO TEMP_GET_USER_NOTICE(id,billtypeid,billtypeName)
    SELECT a.ID,A.billtypeid,tm.f_name FROM TEMP_GET_USER_MID A 
    INNER JOIN tbl_menu tm ON a.billtypeid = tm.f_qxid;



 
    
    UPDATE TEMP_GET_USER_NOTICE tn   -- 修改领用申请信息   -- 602领用申请  401领用 402 资产借用 403资产变更 404资产调拨 405资产退库 406借用归还  501资产维修  502资产报废  504资产处置
    INNER JOIN (SELECT a.id,tsd.f_name AS statusname,tu.f_name AS createusername,tram.f_create_time AS createdate,td.f_name AS deptname,tram.f_note AS memo ,
                         (SELECT SUM(trad.f_qty)  FROM tbl_receive_apply_detail trad WHERE trad.f_mid = tram.id)  AS qty,tram.f_serno,tram.f_status, 1 AS f_audit
                FROM TEMP_GET_USER_MID a
                INNER JOIN tbl_receive_apply_main tram ON a.id = tram.id
                INNER JOIN tbl_sys_dictionary tsd   ON tram.f_status = tsd.f_id AND  tsd.f_type = 1
                INNER JOIN tbl_user tu ON tram.f_create_user = tu.id
                LEFT  JOIN tbl_dept td ON tram.f_re_deptid = td.id
                WHERE a.billtypeid = 602) b ON tn.id = b.id AND tn.billtypeid = 602
    set tn.f_statusname = b.statusname,tn.createusername = b.createusername,tn.createdate = b.createdate,tn.deptname = b.deptname,tn.memo = b.memo,tn.qty = b.qty,tn.f_serno = b.f_serno,
        tn.stateid = b.f_status,tn.isaudit = b.f_audit   ;
 

    UPDATE TEMP_GET_USER_NOTICE tn   -- 修改领用信息
    INNER JOIN (SELECT a.id,tsd.f_name AS statusname,tu.f_name AS createusername,tram.f_create_time AS createdate,td.f_name AS deptname,tram.f_note AS memo ,
                         (SELECT SUM(trad.f_qty)  FROM tbl_receive_detail  trad WHERE trad.f_mid = tram.id)  AS qty,tram.f_serno,tram.f_status,tram.f_audit
                FROM TEMP_GET_USER_MID a
                INNER JOIN tbl_receive_main  tram ON a.id = tram.id
                INNER JOIN tbl_sys_dictionary tsd   ON tram.f_status = tsd.f_id AND  tsd.f_type = 2
                INNER JOIN tbl_user tu ON tram.f_create_user = tu.id
                LEFT  JOIN tbl_dept td ON tram.f_re_deptid = td.id
                WHERE a.billtypeid = 401) b ON tn.id = b.id  AND tn.billtypeid = 401 
    set tn.f_statusname = b.statusname,tn.createusername = b.createusername,tn.createdate = b.createdate,tn.deptname = b.deptname,tn.memo = b.memo,tn.qty = b.qty,tn.f_serno = b.f_serno,
        tn.stateid = b.f_status,tn.isaudit = b.f_audit   ;

    UPDATE TEMP_GET_USER_NOTICE tn   -- 修改借用信息  
    INNER JOIN (SELECT a.id,tsd.f_name AS statusname,tu.f_name AS createusername,tram.f_create_time AS createdate,td.f_name AS deptname,tram.f_note AS memo ,
                         (SELECT SUM(trad.f_qty)  FROM tbl_lend_out_detail  trad WHERE trad.f_mid = tram.id)  AS qty,tram.f_serno,tram.f_status,tram.f_audit
                FROM TEMP_GET_USER_MID a
                INNER JOIN tbl_lend_out_main  tram ON a.id = tram.id
                INNER JOIN tbl_sys_dictionary tsd   ON tram.f_status = tsd.f_id AND  tsd.f_type = 4  -- 借用归还是 5
                INNER JOIN tbl_user tu ON tram.f_create_user = tu.id
                LEFT  JOIN tbl_dept td ON tram.f_deptid = td.id
                WHERE a.billtypeid = 402) b ON tn.id = b.id   AND tn.billtypeid = 402
    set tn.f_statusname = b.statusname,tn.createusername = b.createusername,tn.createdate = b.createdate,tn.deptname = b.deptname,tn.memo = b.memo,tn.qty = b.qty,tn.f_serno = b.f_serno,
        tn.stateid = b.f_status,tn.isaudit = b.f_audit   ;
 

    UPDATE TEMP_GET_USER_NOTICE tn   -- 修改借用归还信息  
    INNER JOIN (SELECT a.id,tsd.f_name AS statusname,tu.f_name AS createusername,tram.f_create_time AS createdate,td.f_name AS deptname,tram.f_note AS memo ,
                         (SELECT SUM(trad.f_qty)  FROM tbl_lend_in_detail  trad WHERE trad.f_mid = tram.id)  AS qty,tram.f_serno,tram.f_status,tram.f_audit
                FROM TEMP_GET_USER_MID a
                INNER JOIN tbl_lend_in_main  tram ON a.id = tram.id
                INNER JOIN tbl_sys_dictionary tsd   ON tram.f_status = tsd.f_id AND  tsd.f_type = 5  -- 借用归还是 5
                INNER JOIN tbl_user tu ON tram.f_create_user = tu.id
                LEFT  JOIN tbl_dept td ON tram.f_deptid = td.id
                WHERE a.billtypeid = 406) b ON tn.id = b.id   AND tn.billtypeid = 406
    set tn.f_statusname = b.statusname,tn.createusername = b.createusername,tn.createdate = b.createdate,tn.deptname = b.deptname,tn.memo = b.memo,tn.qty = b.qty,tn.f_serno = b.f_serno,
        tn.stateid = b.f_status,tn.isaudit = b.f_audit   ;

    UPDATE TEMP_GET_USER_NOTICE tn   -- 修改资产变更
    INNER JOIN (SELECT a.id,tsd.f_name AS statusname,tu.f_name AS createusername,tram.f_create_time AS createdate,td.f_name AS deptname,tram.f_note AS memo ,
                        1  AS qty,tram.f_serno,tram.f_status,tram.f_audit
                FROM TEMP_GET_USER_MID a
                INNER JOIN tbl_change_main tram ON a.id = tram.id
                INNER JOIN tbl_sys_dictionary tsd   ON tram.f_status = tsd.f_id AND  tsd.f_type = 7
                INNER JOIN tbl_user tu ON tram.f_create_user = tu.id
                LEFT  JOIN tbl_dept td ON tram.f_deptid = td.id
                WHERE a.billtypeid = 403) b ON tn.id = b.id  AND tn.billtypeid = 403 
    set tn.f_statusname = b.statusname,tn.createusername = b.createusername,tn.createdate = b.createdate,tn.deptname = b.deptname,tn.memo = b.memo,tn.qty = b.qty,tn.f_serno = b.f_serno,
        tn.stateid = b.f_status,tn.isaudit = b.f_audit   ;

 

    UPDATE TEMP_GET_USER_NOTICE tn   -- 修改资产调拨
    INNER JOIN (SELECT a.id,tsd.f_name AS statusname,tu.f_name AS createusername,tram.f_create_time AS createdate,td.f_name AS deptname,tram.f_note AS memo ,
                         (SELECT SUM(trad.f_qty)  FROM tbl_db_detail trad WHERE trad.f_mid = tram.id)  AS qty,tram.f_serno,tram.f_status,tram.f_audit
                FROM TEMP_GET_USER_MID a
                INNER JOIN tbl_db_main tram ON a.id = tram.id
                INNER JOIN tbl_sys_dictionary tsd   ON tram.f_status = tsd.f_id AND  tsd.f_type = 6
                INNER JOIN tbl_user tu ON tram.f_create_user = tu.id
                LEFT  JOIN tbl_dept td ON tram.f_deptid = td.id
                WHERE a.billtypeid = 404) b ON tn.id = b.id   AND tn.billtypeid = 404
    set tn.f_statusname = b.statusname,tn.createusername = b.createusername,tn.createdate = b.createdate,tn.deptname = b.deptname,tn.memo = b.memo,tn.qty = b.qty,tn.f_serno = b.f_serno,
        tn.stateid = b.f_status,tn.isaudit = b.f_audit   ;

    UPDATE TEMP_GET_USER_NOTICE tn   -- 修改资产退库
    INNER JOIN (SELECT a.id,tsd.f_name AS statusname,tu.f_name AS createusername,tram.f_create_time AS createdate,td.f_name AS deptname,tram.f_note AS memo ,
                         (SELECT SUM(trad.f_qty)  FROM tbl_return_detail trad WHERE trad.f_mid = tram.id)  AS qty,tram.f_serno,tram.f_status,tram.f_audit
                FROM TEMP_GET_USER_MID a
                INNER JOIN tbl_return_main  tram ON a.id = tram.id
                INNER JOIN tbl_sys_dictionary tsd   ON tram.f_status = tsd.f_id AND  tsd.f_type = 3
                INNER JOIN tbl_user tu ON tram.f_create_user = tu.id
                LEFT  JOIN tbl_dept td ON tram.f_deptid = td.id
                WHERE a.billtypeid = 405) b ON tn.id = b.id  AND tn.billtypeid = 405
    set tn.f_statusname = b.statusname,tn.createusername = b.createusername,tn.createdate = b.createdate,tn.deptname = b.deptname,tn.memo = b.memo,tn.qty = b.qty,tn.f_serno = b.f_serno,
        tn.stateid = b.f_status,tn.isaudit = b.f_audit   ;


    UPDATE TEMP_GET_USER_NOTICE tn   -- 修改资产维修
    INNER JOIN (SELECT a.id ,tu.f_name AS createusername,tram.f_create_time AS createdate,td.f_name AS deptname,tram.f_fx_memo AS memo ,
                        1  AS qty,tram.f_serno,
                   (CASE  WHEN tram.f_audit = 1 THEN '已完成' ELSE (CASE f_wxstate WHEN 0 THEN (CASE WHEN tram.f_status = 1 THEN  (CASE WHEN tram.f_audit_Sys_level = 0 THEN  '待送修' ELSE '待审批' END ) ELSE tsd.f_name END )
                                                                                                                                        WHEN 1 THEN '已送修'  WHEN 2 THEN '维修中' WHEN 3 then '维修完成' WHEN -1 then '已驳回' else '' END)                   
                   END) AS statusname,tram.f_status,tram.f_audit,tram.f_wxstate
                FROM TEMP_GET_USER_MID a
                INNER JOIN tbl_repair_main  tram ON a.id = tram.id
                INNER JOIN tbl_sys_dictionary tsd   ON tram.f_status = tsd.f_id AND  tsd.f_type = 11
                INNER JOIN tbl_user tu ON tram.f_create_user = tu.id
                LEFT  JOIN tbl_dept td ON tram.f_deptid = td.id
                WHERE a.billtypeid = 501) b ON tn.id = b.id   AND tn.billtypeid = 501
    set tn.f_statusname = b.statusname,tn.createusername = b.createusername,tn.createdate = b.createdate,tn.deptname = b.deptname,tn.memo = b.memo,tn.qty = b.qty,tn.f_serno = b.f_serno,
        tn.stateid = b.f_status,tn.isaudit = b.f_audit,tn.wxstate=b.f_wxstate   ;

    UPDATE TEMP_GET_USER_NOTICE tn   -- 修改资产报废
    INNER JOIN (SELECT a.id,tsd.f_name AS statusname,tu.f_name AS createusername,tram.f_create_time AS createdate,td.f_name AS deptname,'' AS memo ,
                        1  AS qty,tram.f_serno,tram.f_status,tram.f_audit
                FROM TEMP_GET_USER_MID a
                INNER JOIN tbl_scrapped_main tram ON a.id = tram.id
                INNER JOIN tbl_sys_dictionary tsd   ON tram.f_status = tsd.f_id AND  tsd.f_type = 10
                INNER JOIN tbl_user tu ON tram.f_create_user = tu.id
                LEFT  JOIN tbl_dept td ON tram.f_deptid = td.id
                WHERE a.billtypeid = 502) b ON tn.id = b.id  AND tn.billtypeid = 502
    set tn.f_statusname = b.statusname,tn.createusername = b.createusername,tn.createdate = b.createdate,tn.deptname = b.deptname,tn.memo = b.memo,tn.qty = b.qty,tn.f_serno = b.f_serno,
        tn.stateid = b.f_status,tn.isaudit = b.f_audit   ;

    UPDATE TEMP_GET_USER_NOTICE tn   -- 修改资产处置
    INNER JOIN (SELECT a.id,tsd.f_name AS statusname,tu.f_name AS createusername,tram.f_create_time AS createdate,td.f_name AS deptname,tram.f_note AS memo ,
                         1  AS qty,tram.f_serno,tram.f_status,tram.f_audit
                FROM TEMP_GET_USER_MID a
                INNER JOIN tbl_handle_main  tram ON a.id = tram.id
                INNER JOIN tbl_sys_dictionary tsd   ON tram.f_status = tsd.f_id AND  tsd.f_type = 9
                INNER JOIN tbl_user tu ON tram.f_create_user = tu.id
                LEFT  JOIN tbl_dept td ON tram.f_deptid = td.id
                WHERE a.billtypeid = 504) b ON tn.id = b.id  AND tn.billtypeid = 504
    set tn.f_statusname = b.statusname,tn.createusername = b.createusername,tn.createdate = b.createdate,tn.deptname = b.deptname,tn.memo = b.memo,tn.qty = b.qty,tn.f_serno = b.f_serno,
        tn.stateid = b.f_status,tn.isaudit = b.f_audit   ;

 
    IF c_type = 0 THEN
        set @sql = ' SELECT COUNT(*) FROM TEMP_GET_USER_NOTICE '; 
    ELSE
        SET @sql = CONCAT(' SELECT *FROM TEMP_GET_USER_NOTICE ',c_where,'order by createdate desc LIMIT ',c_bid,',',c_pageSize);
    END IF;
    
 
    PREPARE smt FROM @sql;
    EXECUTE smt;
    DEALLOCATE PREPARE smt;


    DROP TEMPORARY TABLE  IF EXISTS TEMP_GET_USER_NOTICE;
    drop TEMPORARY TABLE IF EXISTS TEMP_GET_USER_MID;
    DROP TEMPORARY TABLE IF EXISTS TEMP_GET_USER_PROCESS_DEPT;
    DROP TEMPORARY TABLE IF EXISTS TEMP_GET_USER_PROCESS_POSTION;
    DROP TEMPORARY TABLE IF EXISTS TEMP_GET_USER_MID2;
   
     
END $$
DELIMITER;



DROP PROCEDURE IF EXISTS Msp_Get_SystemOptiono;   
DELIMITER $$ 
--  获取系统配置信息
CREATE PROCEDURE Msp_Get_SystemOptiono(
    c_modal       int,  -- 0获取审批配置
    c_userid      int 
)
label:BEGIN
    DECLARE c_customid  int;
    SELECT tu.f_customid INTO c_customid  from tbl_user tu where id  =c_userid;
    IF c_modal = 0 THEN
        SELECT TAPS.id,taps.f_busid,taps.f_busname,taps.f_isaudit,taps.f_first_bool,taps.f_first_deptid,taps.f_first_PostionID,taps.f_two_bool,taps.f_two_deptid,taps.f_two_PostionID,taps.f_three_bool,taps.f_three_deptid,taps.f_three_PostionID,
               (CASE WHEN taps.f_first_deptid = -1 THEN '所属部门' ELSE td.f_name END) AS f_first_deptname,(CASE WHEN taps.f_two_deptid = -1 then '所属部门' else td1.f_name END) AS f_two_deptname,
               (CASE WHEN taps.f_three_deptid = -1 THEN '所属部门' else td2.f_name END) AS f_three_deptname,
               tp.f_name AS f_first_Postionname,tp1.f_name AS f_two_Postionname,tp2.f_name AS f_three_Postionname
        FROM tbl_Audit_Process_Set taps
        LEFT JOIN tbl_dept td ON taps.f_first_deptid = td.id
        LEFT JOIN tbl_dept td1 ON taps.f_two_deptid = td1.id
        LEFT JOIN tbl_dept td2 ON taps.f_three_deptid = td2.id 
        LEFT JOIN tbl_position tp  ON taps.f_first_PostionID = tp.id 
        LEFT JOIN tbl_position tp1 ON taps.f_two_PostionID = tp1.id 
        LEFT JOIN tbl_position tp2  ON taps.f_three_PostionID = tp2.id 
        WHERE taps.f_customid = c_customid ; 
    END IF;
END $$
DELIMITER;


DROP PROCEDURE IF EXISTS Msp_SetBillAudit_Stream;   
DELIMITER $$ 
--  跟据业务设置审批流程,新增修改单据后调用
CREATE PROCEDURE Msp_SetBillAudit_Stream(
    c_busid       int,  -- 审批业务ID，关联权限表业务ID 602领用申请  401领用 402 资产借用 403资产变更 404资产调拨 405资产退库 406借用归还  501资产维修  502资产报废  504资产处置
    c_mid         int,  -- 业务ID -1表示查询是否有一级审批，并返回下一审批人
    c_userid      int 
)
label:BEGIN
    DECLARE C_CUSTOMID          int;
    DECLARE c_firstbool         int;
    DECLARE c_firstoptionid     varchar(300);
    DECLARE c_firstpostionid    varchar(300);
    DECLARE c_twobool           int;
    DECLARE c_twooptionid       varchar(300);
    DECLARE c_twopostionid      varchar(300);
    DECLARE c_threebool         int;
    DECLARE c_threeptionid      varchar(300);
    DECLARE c_threepostionid    varchar(300);
    DECLARE c_curdetptid        int;
    DECLARE c_busname           varchar(100);
    DECLARE c_sql               varchar(5000);
    DECLARE c_syslevel          int;
    DECLARE c_isaudit           int;
    
    
 
    select tu.f_customid INTO C_CUSTOMID FROM tbl_user tu where id = c_userid;        
    SELECT f_name INTO c_busname from tbl_menu tm WHERE tm.f_qxid = c_busid;

    SELECT IFNULL(f_isaudit,0), IFNULL(f_first_bool,0),IFNULL(f_first_deptid,-1),IFNULL(f_first_PostionID,''),IFNULL(f_two_bool,0),IFNULL(f_two_deptid,-1),IFNULL(f_two_PostionID,''),IFNULL(f_three_bool,0),IFNULL(f_three_deptid,-1),IFNULL(f_three_PostionID,'')
           INTO c_isaudit,c_firstbool,c_firstoptionid,c_firstpostionid,c_twobool,c_twooptionid,c_twopostionid,c_threebool,c_threeptionid,c_threepostionid
    FROM tbl_Audit_Process_Set WHERE f_customid = C_CUSTOMID AND f_busid = c_busid;
    
 
    IF c_busid IN (401,402,403,404,405,406,501,502,504,602) THEN  -- 602领用申请  401领用 402 资产借用 403资产变更 404资产调拨 405资产退库 406借用归还 501资产维修  502资产报废  504资产处置
        SELECT tu.f_deptno INTO c_curdetptid from tbl_user tu WHERE id = c_userid;
    END IF;
    

    --  先删除审批计划表中 计划数据
    DELETE from tbl_bus_audit_plant WHERE f_customid =C_CUSTOMID and f_busid = c_busid AND f_mid = c_mid;
    -- 审批流水表的数据全部删除，重新生成审批计划后也要重新审批
    UPDATE tbl_user_audit_stream tuas SET tuas.f_flag = 1 WHERE tuas.f_busid = c_busid AND f_mid = c_mid;
    set c_sql ='';
    IF c_firstbool = 1 THEN  -- 一审
        IF (c_firstoptionid = '-1') OR (c_firstoptionid='') THEN  -- 允许一审的部门，-1 表示所属部门
            insert into tbl_bus_audit_plant(f_mid,f_customid,f_busid,f_busname,f_auditlevel,f_valtype,f_valid)
            VALUE(c_mid,C_CUSTOMID,c_busid,c_busname,1,1,c_curdetptid);
        ELSE  -- 插入审批部门
            SET @sql = CONCAT(' insert into tbl_bus_audit_plant(f_mid,f_customid,f_busid,f_busname,f_auditlevel,f_valtype,f_valid)
                                select ' ,c_mid,',',C_CUSTOMID,',',c_busid,',''',c_busname,''' as busname,1,1,id from tbl_dept where id in (',c_firstoptionid,');') ;    
            PREPARE smt FROM @sql;
            EXECUTE smt;
            DEALLOCATE PREPARE smt;     
                                     
        END IF;   
        IF IFNULL(c_firstpostionid ,'') <> '' THEN -- 允许一审的职位，如果职位为空表示指定部门下的所有人都可以审
            SET @sql = CONCAT(c_sql,' insert into tbl_bus_audit_plant(f_mid,f_customid,f_busid,f_busname,f_auditlevel,f_valtype,f_valid)
                               select ',c_mid,',',C_CUSTOMID,',',c_busid,',''',c_busname,''' as busname ,1,2,id from tbl_position where id in (',c_firstpostionid,');')  ;      
            PREPARE smt FROM @sql;
            EXECUTE smt;
            DEALLOCATE PREPARE smt;                       
        END IF;
   
    END IF;

    IF c_twobool = 1 THEN  -- 二审
        IF (c_twooptionid = '-1') OR (c_twooptionid='') THEN
            insert into tbl_bus_audit_plant(f_mid,f_customid,f_busid,f_busname,f_auditlevel,f_valtype,f_valid)
            VALUE(c_mid,C_CUSTOMID,c_busid,c_busname,2,1,c_curdetptid);
        else
            SET @sql = CONCAT(c_sql,' insert into tbl_bus_audit_plant(f_mid,f_customid,f_busid,f_busname,f_auditlevel,f_valtype,f_valid)
                                select ',c_mid,',',C_CUSTOMID,',',c_busid,',''',c_busname,'''  as busname,2,1,id from tbl_dept where id in (',c_twooptionid,');');

 
            PREPARE smt FROM @sql;
            EXECUTE smt;
            DEALLOCATE PREPARE smt;
                       
        END IF;

        IF IFNULL(c_twopostionid ,'') <> '' THEN
            SET  @sql = CONCAT(c_sql,' insert into tbl_bus_audit_plant(f_mid,f_customid,f_busid,f_busname,f_auditlevel,f_valtype,f_valid)
                               select ',c_mid,',',C_CUSTOMID,',',c_busid,',''',c_busname,'''  as busname,2,2,id from tbl_position where id in (',c_twopostionid,');')  ;  
         
            PREPARE smt FROM @sql;
            EXECUTE smt;
            DEALLOCATE PREPARE smt;                        
        END IF;
    END IF;

    IF c_threebool = 1 THEN  -- 三审
        IF (c_threeptionid = '-1') OR (c_threeptionid = '') THEN
            insert into tbl_bus_audit_plant(f_mid,f_customid,f_busid,f_busname,f_auditlevel,f_valtype,f_valid)
            VALUE(c_mid,C_CUSTOMID,c_busid,c_busname,3,1,c_curdetptid);
        else
            SET @sql = CONCAT(c_sql,' insert into tbl_bus_audit_plant(f_mid,f_customid,f_busid,f_busname,f_auditlevel,f_valtype,f_valid)
                                select ',c_mid,',',C_CUSTOMID,',',c_busid,',''',c_busname,'''  as busname,3,1,id from tbl_dept where id in (',c_threeptionid,');');
            PREPARE smt FROM @sql;
            EXECUTE smt;
            DEALLOCATE PREPARE smt;  
                       
        END IF;

        IF IFNULL(c_threepostionid ,'') <> '' THEN
            SET @sql = CONCAT(c_sql,' insert into tbl_bus_audit_plant(f_mid,f_customid,f_busid,f_busname,f_auditlevel,f_valtype,f_valid)
                                select ',c_mid,',',C_CUSTOMID,',',c_busid,',''',c_busname,'''  as busname ,3,3,id from tbl_position where id in (',c_threepostionid,');') ;    
            PREPARE smt FROM @sql;
            EXECUTE smt;
            DEALLOCATE PREPARE smt;                         
        END IF;
    END IF;

 
--     SET @sql = c_sql;
--     PREPARE smt FROM @sql;
--     EXECUTE smt;
--     DEALLOCATE PREPARE smt;

    IF c_isaudit = 0 THEN  -- 是否开启审批流程
        SET c_syslevel = 0;
    ELSE
        SET c_syslevel = IFNULL(c_firstbool,0)+IFNULL(c_twobool,0)+IFNULL(c_threebool,0);
    END IF;

    -- 602领用申请  401领用 402 资产借用 403资产变更 404资产调拨 405资产退库  501资产维修  502资产报废  504资产处置
    IF c_busid = 401 THEN  -- 领用
       UPDATE tbl_receive_main tram SET tram.f_audit_Sys_level = c_syslevel,tram.f_audit_level = 0,tram.f_is_approval = (CASE WHEN tram.f_status <> 0 THEN (CASE WHEN c_syslevel = 0 then 1 ELSE 0 END) ELSE -1 END) WHERE id = c_mid;        
       IF c_syslevel > 0 THEN -- 如果要审批提交时单据不能为出库状态
           UPDATE tbl_receive_main trm SET trm.f_audit = 0,trm.f_audit_date=NULL WHERE id = c_mid;
       ELSE   -- 不需要审批，前端提交就出库
           UPDATE tbl_receive_main trm SET trm.f_audit = 0,trm.f_audit_date=NULL WHERE id = c_mid AND trm.f_status < 1; 
           UPDATE tbl_receive_main trm SET trm.f_audit = 1,trm.f_audit_date=NOW() WHERE id = c_mid AND trm.f_status > 0;            
       END IF ;
    END IF;
    IF c_busid = 402 THEN  -- 借用
       UPDATE tbl_lend_out_main tram SET tram.f_audit_Sys_level = c_syslevel,tram.f_audit_level = 0,tram.f_is_approval = (CASE WHEN tram.f_status <> 0 THEN (CASE WHEN c_syslevel = 0 then 1 ELSE 0 END) ELSE -1 END)  WHERE id = c_mid;        
       IF c_syslevel > 0 THEN -- 如果要审批提交时单据不能为出库状态
           UPDATE tbl_lend_out_main trm SET trm.f_audit = 0,trm.f_audit_date=NULL WHERE id = c_mid;
       ELSE   -- 不需要审批，前端提交就出库
           UPDATE tbl_lend_out_main trm SET trm.f_audit = 0,trm.f_audit_date=NULL WHERE id = c_mid AND trm.f_status < 1; 
           UPDATE tbl_lend_out_main trm SET trm.f_audit = 1,trm.f_audit_date=NOW() WHERE id = c_mid AND trm.f_status > 0;            
       END IF ;
    END IF;
    IF c_busid = 403 THEN  -- 资产变更
       UPDATE tbl_change_main tram SET tram.f_audit_Sys_level = c_syslevel,tram.f_audit_level = 0,tram.f_is_approval = (CASE WHEN tram.f_status <> 0 THEN (CASE WHEN c_syslevel = 0 then 1 ELSE 0 END) ELSE -1 END)  WHERE id = c_mid;        
       IF c_syslevel > 0 THEN -- 如果要审批提交时单据不能为出库状态
           UPDATE tbl_change_main trm SET trm.f_audit = 0,trm.f_audit_date=NULL WHERE id = c_mid;
       ELSE   -- 不需要审批，前端提交就出库
           UPDATE tbl_change_main trm SET trm.f_audit = 0,trm.f_audit_date=NULL WHERE id = c_mid AND trm.f_status < 1; 
           UPDATE tbl_change_main trm SET trm.f_audit = 1,trm.f_audit_date=NOW() WHERE id = c_mid AND trm.f_status > 0;            
       END IF ;
    END IF;
    IF c_busid = 404 THEN  -- 资产调拨
       UPDATE tbl_db_main tram SET tram.f_audit_Sys_level = c_syslevel,tram.f_audit_level = 0,tram.f_is_approval = (CASE WHEN tram.f_status <> 0 THEN (CASE WHEN c_syslevel = 0 then 1 ELSE 0 END) ELSE -1 END)  WHERE id = c_mid;        
--        IF c_syslevel > 0 THEN -- 如果要审批提交时单据不能为出库状态
--            UPDATE  tbl_db_main  trm SET trm.f_audit = 0,trm.f_audit_date=NULL WHERE id = c_mid;
--        ELSE   -- 不需要审批，前端提交就出库
--            UPDATE  tbl_db_main trm SET trm.f_audit = 0,trm.f_audit_date=NULL WHERE id = c_mid AND trm.f_status < 1; 
--            UPDATE  tbl_db_main trm SET trm.f_audit = 1,trm.f_audit_date=NOW() WHERE id = c_mid AND trm.f_status > 0;            
--        END;  调拨有专门的出入库接口，这里不需要设置
    END IF;
    IF c_busid = 405 THEN  -- 资产退库
       UPDATE tbl_return_main tram SET tram.f_audit_Sys_level = c_syslevel,tram.f_audit_level = 0,tram.f_is_approval = (CASE WHEN tram.f_status <> 0 THEN (CASE WHEN c_syslevel = 0 then 1 ELSE 0 END) ELSE -1 END)  WHERE id = c_mid;        
       IF c_syslevel > 0 THEN -- 如果要审批提交时单据不能为出库状态
           UPDATE  tbl_return_main  trm SET trm.f_audit = 0,trm.f_audit_date=NULL WHERE id = c_mid;
       ELSE   -- 不需要审批，前端提交就出库
           UPDATE  tbl_return_main trm SET trm.f_audit = 0,trm.f_audit_date=NULL WHERE id = c_mid AND trm.f_status < 1; 
           UPDATE  tbl_return_main trm SET trm.f_audit = 1,trm.f_audit_date=NOW() WHERE id = c_mid AND trm.f_status > 0;            
       END IF ;
    END IF;
    IF c_busid = 406 THEN  -- 借用归还
       UPDATE tbl_lend_in_main tram SET tram.f_audit_Sys_level = c_syslevel,tram.f_audit_level = 0,tram.f_is_approval = (CASE WHEN tram.f_status <> 0 THEN (CASE WHEN c_syslevel = 0 then 1 ELSE 0 END) ELSE -1 END)  WHERE id = c_mid;        
       IF c_syslevel > 0 THEN -- 如果要审批提交时单据不能为出库状态
           UPDATE  tbl_lend_in_main  trm SET trm.f_audit = 0,trm.f_audit_date=NULL WHERE id = c_mid;
       ELSE   -- 不需要审批，前端提交就出库
           UPDATE  tbl_lend_in_main trm SET trm.f_audit = 0,trm.f_audit_date=NULL WHERE id = c_mid AND trm.f_status < 1; 
           UPDATE  tbl_lend_in_main trm SET trm.f_audit = 1,trm.f_audit_date=NOW() WHERE id = c_mid AND trm.f_status > 0;            
       END IF ;
    END IF;
    IF c_busid = 501 THEN  -- 资产维修
       UPDATE tbl_repair_main tram SET tram.f_audit_Sys_level = c_syslevel,tram.f_audit_level = 0,tram.f_is_approval = (CASE WHEN tram.f_status <> 0 THEN (CASE WHEN c_syslevel = 0 then 1 ELSE 0 END) ELSE -1 END)  WHERE id = c_mid;        
       IF c_syslevel > 0 THEN -- 如果要审批提交时单据不能为出库状态
           UPDATE  tbl_repair_main  trm SET trm.f_audit = 0,trm.f_audit_date=NULL WHERE id = c_mid;
--        ELSE   -- 不需要审批，前端提交就出库
--            UPDATE  tbl_repair_main trm SET trm.f_audit = 0,trm.f_audit_date=NULL WHERE id = c_mid AND trm.f_status < 1; 
--            UPDATE  tbl_repair_main trm SET trm.f_audit = 1,trm.f_audit_date=NOW() WHERE id = c_mid AND trm.f_status > 0;            
       END IF;
    END IF;
    IF c_busid = 502 THEN  -- 资产报废
       UPDATE tbl_scrapped_main tram SET tram.f_audit_Sys_level = c_syslevel,tram.f_audit_level = 0,tram.f_is_approval = (CASE WHEN tram.f_status <> 0 THEN (CASE WHEN c_syslevel = 0 then 1 ELSE 0 END) ELSE -1 END)  WHERE id = c_mid;        
       IF c_syslevel > 0 THEN -- 如果要审批提交时单据不能为出库状态
           UPDATE  tbl_scrapped_main  trm SET trm.f_audit = 0,trm.f_audit_date=NULL WHERE id = c_mid;
       ELSE   -- 不需要审批，前端提交就出库
           UPDATE  tbl_scrapped_main trm SET trm.f_audit = 0,trm.f_audit_date=NULL WHERE id = c_mid AND trm.f_status < 1; 
           UPDATE  tbl_scrapped_main trm SET trm.f_audit = 1,trm.f_audit_date=NOW() WHERE id = c_mid AND trm.f_status > 0;            
       END IF ;
    END IF;
    IF c_busid = 504 THEN  -- 资产处置
       UPDATE tbl_handle_main tram SET tram.f_audit_Sys_level = c_syslevel,tram.f_audit_level = 0,tram.f_is_approval = (CASE WHEN tram.f_status <> 0 THEN (CASE WHEN c_syslevel = 0 then 1 ELSE 0 END) ELSE -1 END)  WHERE id = c_mid;        
       IF c_syslevel > 0 THEN -- 如果要审批提交时单据不能为出库状态
           UPDATE  tbl_handle_main  trm SET trm.f_audit = 0,trm.f_audit_date=NULL WHERE id = c_mid;
       ELSE   -- 不需要审批，前端提交就出库
           UPDATE  tbl_handle_main trm SET trm.f_audit = 0,trm.f_audit_date=NULL WHERE id = c_mid AND trm.f_status < 1; 
           UPDATE  tbl_handle_main trm SET trm.f_audit = 1,trm.f_audit_date=NOW() WHERE id = c_mid AND trm.f_status > 0;            
       END IF ;
    END IF;
    IF c_busid = 602 THEN  -- 领用申请
        UPDATE tbl_receive_apply_main tram SET tram.f_audit_Sys_level = c_syslevel,tram.f_audit_level = 0,tram.f_isaudit = (CASE WHEN tram.f_status <> 0 THEN (CASE WHEN c_syslevel = 0 then 1 ELSE 0 END) ELSE -1 END)  WHERE id = c_mid;        
    END IF;
     
    SELECT 1 AS f_state;
  
         
END $$
DELIMITER;
 
    
DROP PROCEDURE IF EXISTS Msp_receive_apply_Audit ;   
DELIMITER $$ 
-- 领用申请审批
CREATE PROCEDURE Msp_receive_apply_Audit(
  c_busid        int,   -- 602领用申请  401领用 402 资产借用 403资产变更 404资产调拨 405资产退库  501资产维修  502资产报废  504资产处置
  c_mid          int,   -- 单据ID
  c_modal        int,   -- 操作类型 1提交(一般都在修改中一起提交，这里一般是辙消提交） 2审批 3确认 
  c_back         int,   -- 0正向提交 1逆向提交（相当于辙消）
  c_userid       int,   -- 操作人
  c_memo         varchar(300),  -- 操作备注
  c_nextuserid   varchar(30),   -- 下一审批人
  c_rejected     int)   -- 1审批通过 0 驳回  
label:BEGIN
    DECLARE c_state    int;
    DECLARE c_result   int;
    DECLARE c_error    varchar(100);
    DECLARE c_newstate int;
    DECLARE c_f_audit_Sys_level int;
    DECLARE c_f_auditlevel int;
    DECLARE c_log      varchar(100);
    DECLARE c_customid int;
    DECLARE c_nextuserid_2  int;
    DECLARE c_modletype varchar(100);
    DECLARE c_audit_level int; -- 当前审批级别
    DECLARE c_isaudit  int; -- 是否审批完成
    DECLARE c_lastaudituserid int; -- 最后一次审批人
    DECLARE c_nextbackaudituser int; -- 返加审批时上一审批人
    DECLARE C_TABLEMAIN varchar(100); -- 关联业务主数据表
    DECLARE C_TABLE_DETAIL varchar(100); -- 关联业务从表
    DECLARE c_billstreamtype  int; -- 流水类型
    DECLARE c_busname   varchar(100); -- 业务类型名称

    DROP TEMPORARY TABLE  IF EXISTS TEMP_Receive_Apply_Audit;    
    CREATE TEMPORARY TABLE TEMP_Receive_Apply_Audit(f_status int,f_audit_level int,f_audit_Sys_level int,f_customid int,f_nextaudit_user int);   
    SET c_result = 1;
--     DROP TEMPORARY TABLE IF EXISTS temp_receive_apply_audit_return(f_state int,f_errors varchar(200)); 
--     CREATE TEMPORARY TABLE IF NOT EXISTS temp_receive_apply_audit_return(f_state int,f_errors varchar(200));

    IF c_busid = 602 THEN -- 602领用申请  401领用 402 资产借用 403资产变更 404资产调拨 405资产退库  501资产维修  502资产报废  504资产处置
        SET C_TABLEMAIN = 'tbl_receive_apply_main';
        set C_TABLE_DETAIL = 'tbl_receive_apply_detail';
        SET c_billstreamtype = 1;
        SET c_busname = '领用申请';
    ELSEIF c_busid = 401 THEN
        SET C_TABLEMAIN = 'tbl_receive_main';
        set C_TABLE_DETAIL = 'tbl_receive_detail';
        SET c_billstreamtype = 1;
        SET c_busname = '资产领用';
    ELSEIF c_busid = 402 THEN
        SET C_TABLEMAIN = 'tbl_lend_out_main';
        set C_TABLE_DETAIL = 'tbl_lend_out_detail';
        SET c_billstreamtype = 1;
        SET c_busname = '资产借用';
    ELSEIF c_busid = 403 THEN
        SET C_TABLEMAIN = 'tbl_change_main';
        set C_TABLE_DETAIL = 'tbl_change_detail';
        SET c_billstreamtype = 1;
        SET c_busname = '资产变更';
    ELSEIF c_busid = 404 THEN
        SET C_TABLEMAIN = 'tbl_db_main';
        set C_TABLE_DETAIL = 'tbl_db_detail';
        SET c_billstreamtype = 1;
        SET c_busname = '资产调拨';
    ELSEIF c_busid = 405 THEN
        SET C_TABLEMAIN = 'tbl_return_main';
        set C_TABLE_DETAIL = 'tbl_return_detail';
        SET c_billstreamtype = 1;
        SET c_busname = '资产退库';
    ELSEIF c_busid = 406 THEN
        SET C_TABLEMAIN = 'tbl_lend_in_main';
        set C_TABLE_DETAIL = 'tbl_lend_in_detail';
        SET c_billstreamtype = 1;
        SET c_busname = '借用归还';
    ELSEIF c_busid = 501 THEN
        SET C_TABLEMAIN = 'tbl_repair_main';
        set C_TABLE_DETAIL = 'tbl_repair_detail';
        SET c_billstreamtype = 1;
        SET c_busname = '资产维修';
    ELSEIF c_busid = 502 THEN
        SET C_TABLEMAIN = 'tbl_scrapped_main';
        set C_TABLE_DETAIL = 'tbl_scrapped_detail';
        SET c_billstreamtype = 1;
        SET c_busname = '资产报废';
    ELSEIF c_busid = 504 THEN
        SET C_TABLEMAIN = 'tbl_handle_main';
        set C_TABLE_DETAIL = 'tbl_handle_detail';
        SET c_billstreamtype = 1;
        SET c_busname = '资产处置';
    END IF;              

 --   IF c_busid = 602 THEN
 --       SELECT tram.f_status,tram.f_audit_level,tram.f_audit_Sys_level,tram.f_customid,tram.f_nextaudit_user INTO c_state,c_f_auditlevel,c_f_audit_Sys_level,c_customid,c_nextuserid_2
 --       FROM tbl_receive_apply_main tram WHERE id = c_mid;
 --       SELECT tram.f_nextaudit_user INTO c_lastaudituserid FROM tbl_receive_apply_main tram WHERE ID = c_mid;
 --       SET C_TABLEMAIN = 'tbl_receive_apply_main';
 --       set C_TABLE_DETAIL = 'tbl_receive_apply_detail';
 --       SET c_billstreamtype = 1;
 --       SET c_busname = '领用申请';
 --   END IF;

 
    SET @sql = CONCAT( 'INSERT INTO TEMP_Receive_Apply_Audit(f_status,f_audit_level,f_audit_Sys_level,f_customid,f_nextaudit_user) SELECT  f_status,f_audit_level,f_audit_Sys_level,f_customid,f_nextaudit_user FROM ',C_TABLEMAIN,' WHERE ID = ',C_MID);
 
    PREPARE stmt FROM  @sql;  
    ## 执行SQL语句
    EXECUTE stmt;  
    ## 释放掉预处理段
    DEALLOCATE PREPARE stmt;
    
    SELECT f_status,f_audit_level,f_audit_Sys_level,f_customid,f_nextaudit_user FROM TEMP_Receive_Apply_Audit INTO c_state,c_f_auditlevel,c_f_audit_Sys_level,c_customid,c_nextuserid_2;
	  SET c_lastaudituserid = c_nextuserid_2;

    IF (c_rejected = 0) AND (c_modal = 2) THEN
        SET c_rejected = 1;  -- 驳回
    ELSE
        SET c_rejected = 0;  -- 通过
    END IF;
    
    SET  c_audit_level = c_f_auditlevel;
    SET  c_isaudit = 0;

 

    IF  c_back = 0 THEN  -- 正向提交
        IF (c_modal = 1) AND (c_state <> 0) THEN
            set c_result = -1;
            set c_error ='单据不在草稿状态不能提交！';
          
        END IF;
        IF (c_modal = 2) AND (c_state <> 1) THEN
            set c_result = -1;
            set c_error ='单据不在提交状态不能审批！'; 
        END IF;
        IF c_modal = 1 THEN
            SET c_newstate = 1;
            set c_log ='提交申请';   
        end IF;
        IF (c_modal = 2) THEN  -- 审批
            --  SELECT tuas.f_userid INTO c_lastaudituserid FROM tbl_user_audit_stream tuas WHERE tuas.f_customid = c_customid and tuas.f_busid = 602 AND  tuas.f_mid = c_mid AND tuas.f_flag = 0 ORDER BY tuas.f_auditdate DESC LIMIT 0,1;

            IF (c_lastaudituserid <> -1) AND (c_lastaudituserid <> c_userid) THEN
                set c_result = -1;           
                SELECT CONCAT('当前审批人与单据指定审批人【',tu.f_name,'】不符,不能审批！') INTO c_error FROM tbl_user tu WHERE id = c_lastaudituserid;                
            end IF;
            IF  c_rejected = 0 THEN -- 不驳回
                IF c_audit_level < c_f_audit_Sys_level THEN
                   set c_audit_level = c_audit_level + 1;
                ELSE
                   set c_audit_level = c_f_audit_Sys_level;
                END IF;
                IF c_audit_level = c_f_audit_Sys_level THEN
                    SET c_isaudit = 1;  --  是否完成所有审批
                END IF;  
                set c_log ='提交审批';
                set c_modletype = '审批完成';
            ELSE
                set c_log ='审批驳回';
                set c_modletype = '审批驳回';
            END IF;

            IF c_rejected = 0 THEN
                IF (c_f_auditlevel+1) >= c_f_audit_Sys_level THEN
                    SET c_newstate = 2;  -- 已审批
                    SET c_nextuserid_2 = -1;
                ELSE            
                    SET c_newstate = 1;  -- 待审批
                    SET c_nextuserid_2 = c_nextuserid;
                END IF ;
            ELSE
                SET c_newstate = -1;  -- 已审批
                SET c_nextuserid_2 = -1;
            END IF;

     


        END IF;
--         IF (c_modal = 3) AND (c_state <> 2) THEN  --有了多级审批后不需要确认了
--             set c_result = -1;
--             set c_error ='单据不在审批状态不能确认！'; 
--             set c_log ='单据确认';
--         END IF;
    else
        IF (c_modal = 1) AND (c_state <> 1) THEN
            set c_result = -1;
            set c_error ='单据不在提交状态不能辙消！';
        END IF;
        IF (c_modal = 2) AND ( (c_state <> 2) AND (c_state <> 1) ) THEN
            set c_result = -1;
            set c_error ='单据不在审批状态不能辙消！';  
        END IF;
        -- 如果开启了审批必须由提定审批人辙消
        IF EXISTS(SELECT id FROM tbl_audit_process_set taps where taps.f_busid = c_busid and taps.f_isaudit = 1) THEN
            SELECT tuas.f_userid INTO c_lastaudituserid FROM tbl_user_audit_stream tuas WHERE tuas.f_customid = c_customid AND tuas.f_busid = c_busid AND tuas.f_mid = c_mid AND tuas.f_flag = 0 ORDER BY id DESC LIMIT 0,1;
            IF (c_lastaudituserid <> c_userid)  THEN
                set c_result = -1;
                     
                SELECT CONCAT('单据必须由最后审批人【',tu.f_name,'】辙消！') INTO c_error FROM tbl_user tu WHERE id = c_lastaudituserid;
            END IF;
        END IF;
        IF c_modal = 1 THEN
            SET c_newstate = 0;
            set c_log ='辙消申请' ;
        END IF;
        IF (c_modal = 2) THEN
            set c_log ='辙消审批' ;
            set c_modletype = '辙消审批';

            IF c_audit_level > 1 THEN
               set c_audit_level = c_audit_level - 1;
            ELSE
               set c_audit_level = 0;
            END IF;


            IF c_audit_level > 1 THEN
                SET c_newstate = 2;
            ELSE 
                SET c_newstate = 1;
            END IF;
   
            -- 找出上一级审批的下一审批人   
            IF c_audit_level = 0 THEN
                SELECT tuas.f_userid into c_nextbackaudituser  FROM tbl_user_audit_stream tuas 
                WHERE  tuas.f_customid =c_customid and f_busid = c_busid  AND tuas.f_mid = c_mid AND tuas.f_level =  1 AND tuas.f_flag = 0;
            else       
                SELECT tuas.f_nextaudit_user into c_nextbackaudituser  FROM tbl_user_audit_stream tuas 
                WHERE  tuas.f_customid =c_customid and f_busid = c_busid  AND tuas.f_mid = c_mid AND tuas.f_level =  c_audit_level AND tuas.f_flag = 0;
            end IF;
        END IF;
--         IF (c_modal = 3) AND (c_state <> 3) THEN
--             set c_result = -1;
--             set c_error ='单据不在确认状态不能确认！'; 
--             SET c_newstate = 2;
--             set c_log ='辙消确认' ;
--         END IF;
    END IF;
    
 
--                   SELECT c_nextbackaudituser, c_audit_level ;
--   LEAVE label;
    IF c_result = 1 THEN  -- 更改单据状态和插入单据流水
        IF c_busid = 602 THEN  -- 领用申请表字段不一样，这里单独写出来
            UPDATE tbl_receive_apply_main set f_status = c_newstate,f_rejected = c_rejected,f_nextaudit_user =c_nextuserid_2,f_audit_level =c_audit_level,f_isaudit =c_isaudit where id = c_mid;
        ELSE
            set @SQL = CONCAT(' UPDATE ',C_TABLEMAIN,' set f_status =', c_newstate,',f_rejected =', c_rejected,',f_nextaudit_user =',c_nextuserid_2,',f_audit_level =',c_audit_level,',f_is_approval =',c_isaudit,' where id =',c_mid);
            PREPARE stmt FROM  @sql;  
        
            ## 执行SQL语句
            EXECUTE stmt;  
            ## 释放掉预处理段
            DEALLOCATE PREPARE stmt;
        END IF;
        
                
        INSERT INTO tbl_billstream(f_customid,f_type,f_opruserid,f_oprtime,f_opr,f_memo,f_busid)
        VALUES(c_customid,c_billstreamtype,c_userid,NOW(),c_log,c_memo,c_mid);
        -- SELECT tram.f_customid,1,c_userid,NOW(),c_log,c_memo,tram.id from tbl_receive_apply_main tram WHERE id = c_mid;
    
        INSERT INTO sys_log(f_customid,f_typelevel,f_modal,f_keywords,f_oprtime,f_userid,f_note,f_oprtype)
        VALUES(c_customid,0,c_busname,c_mid,NOW(),c_userid,c_log,c_log);
    END IF;
    
 
    IF (c_modal = 2) AND (c_result =1) THEN  -- 审批
        -- 先删除再插入
        UPDATE tbl_User_audit_stream SET f_flag = 1,f_delete_time=NOW() WHERE f_customid = c_customid AND f_busid = c_busid AND f_mid =c_mid AND f_userid = c_userid AND f_level = c_audit_level;
        -- C_TABLE_DETAIL
        IF c_busid IN  (403,501,502,504) THEN  -- 403资产变更没有数量 501资产维修也没数量 502资产报废也没有数量 504资产处置也没有数量
            SET @sql = CONCAT('INSERT INTO tbl_User_audit_stream(f_customid,f_userid,f_busid,f_busname,f_mid,f_serno,f_createdate,f_auditdate,
                                                                 f_qty,f_memo,f_auditmemo,f_audittype,f_level,f_createuserid,f_nextaudit_user)
                               SELECT tram.f_customid,',c_userid,',',c_busid,',(SELECT f_name from tbl_menu tm where f_qxid = ',c_busid,'),id,tram.f_serno,tram.f_create_time,NOW(),
                                     (SELECT count(*) FROM ',C_TABLE_DETAIL,' trad WHERE f_mid = tram.id),tram.f_note,','''',c_memo,'''',',','''',c_modletype,'''',',tram.f_audit_level,',c_userid,',',c_nextuserid,'
                               from ',C_TABLEMAIN,' tram WHERE id = ',c_mid);
        else
            SET @sql = CONCAT('INSERT INTO tbl_User_audit_stream(f_customid,f_userid,f_busid,f_busname,f_mid,f_serno,f_createdate,f_auditdate,
                                                                 f_qty,f_memo,f_auditmemo,f_audittype,f_level,f_createuserid,f_nextaudit_user)
                               SELECT tram.f_customid,',c_userid,',',c_busid,',(SELECT f_name from tbl_menu tm where f_qxid = ',c_busid,'),id,tram.f_serno,tram.f_create_time,NOW(),
                                     (SELECT sum(trad.f_qty) FROM ',C_TABLE_DETAIL,' trad WHERE f_mid = tram.id),tram.f_note,','''',c_memo,'''',',','''',c_modletype,'''',',tram.f_audit_level,',c_userid,',',c_nextuserid,'
                               from ',C_TABLEMAIN,' tram WHERE id = ',c_mid);
        END IF;
 

 
        PREPARE stmt FROM @SQL;
        EXECUTE stmt;
        DEALLOCATE PREPARE stmt;
    END IF;
    
    -- 辙消审批
    IF (c_modal = 2) AND (c_back = 1) AND (c_result = 1) THEN
        -- 修改审批流水为已删除
        UPDATE tbl_User_audit_stream SET f_flag = 1,f_delete_time=NOW() ,f_memo ='辙消审批'        
        WHERE f_customid = c_customid AND f_busid = c_busid AND f_mid =c_mid AND f_userid = c_userid;
        
        IF c_busid = 602 THEN
            UPDATE tbl_receive_apply_main tram set tram.f_nextaudit_user = IFNULL(c_nextbackaudituser,-1),tram.f_isaudit=0,tram.f_status=1 ,tram.f_audit_level =c_audit_level,tram.f_rejected=0 -- 辙消后已驳回改成0
            WHERE  f_customid = c_customid AND id = c_mid;
        ELSE
            SET @sql = CONCAT(' UPDATE ',C_TABLEMAIN,' tram set tram.f_nextaudit_user = IFNULL(',c_nextbackaudituser,',-1),tram.f_is_approval=0,tram.f_status=1 ,tram.f_audit_level =',c_audit_level,',tram.f_rejected=0 -- 辙消后已驳回改成0
                         WHERE  f_customid = ',c_customid,' AND id =', c_mid);
            PREPARE stmt FROM @sql;
            EXECUTE stmt;
            DEALLOCATE PREPARE stmt;
        END IF;
    END IF;

    SELECT c_result AS f_state,IFNULL(c_error,'') AS f_error ;  
    DROP TEMPORARY TABLE  IF EXISTS TEMP_Receive_Apply_Audit;  
    
END $$
DELIMITER;




DROP PROCEDURE IF EXISTS Msp_SQBILL_UPSTATE;   
DELIMITER $$ 
-- 各种申请单发货或使用后关联原单状态修改 
CREATE PROCEDURE Msp_SQBILL_UPSTATE(
    c_busid       int,  -- 602领用申请
    c_mid         int   -- 要改的申请业务ID
)
label:BEGIN
     DECLARE  c_syid   int;

     IF c_busid = 602 THEN
        SELECT id INTO c_syid FROM tbl_receive_main trm WHERE f_apply_billid = c_mid LIMIT 0,1;

        IF IFNULL(c_syid,-1) = -1 THEN
            UPDATE tbl_receive_apply_main tram SET tram.f_lystate = 0 WHERE id = c_mid;
        ELSE
            UPDATE tbl_receive_apply_main tram SET tram.f_lystate = 1 WHERE id = c_mid;            
        END IF;
      
     END IF;
    
     select 1 AS f_state;
END $$
DELIMITER; 


DROP PROCEDURE IF EXISTS Msp_receive_apply_Audit ;   
DELIMITER $$ 
-- 领用申请审批
CREATE PROCEDURE Msp_receive_apply_Audit(
  c_mid          int,   -- 单据ID
  c_modal        int,   -- 操作类型 1提交 2审批 3确认 
  c_back         int,   -- 0正向提交 1逆向提交（相当于辙消）
  c_userid       int,   -- 操作人
  c_memo         varchar(300),  -- 操作备注
  c_nextuserid   varchar(30),   -- 下一审批人
  c_rejected     int)   -- 1审批通过 0 驳回  
label:BEGIN
    DECLARE c_state    int;
    DECLARE c_result   int;
    DECLARE c_error    varchar(100);
    DECLARE c_newstate int;
    DECLARE c_f_audit_Sys_level int;
    DECLARE c_f_auditlevel int;
    DECLARE c_log      varchar(100);
    DECLARE c_customid int;
    DECLARE c_nextuserid_2  int;
    DECLARE c_modletype varchar(100);
    DECLARE c_audit_level int; -- 当前审批级别
    DECLARE c_isaudit  int; -- 是否审批完成
    DECLARE c_lastaudituserid int; -- 最后一次审批人
    DECLARE c_nextbackaudituser int; -- 返加审批时上一审批人

    SET c_result = 1;
--     DROP TEMPORARY TABLE IF EXISTS temp_receive_apply_audit_return(f_state int,f_errors varchar(200));
--     CREATE TEMPORARY TABLE IF NOT EXISTS temp_receive_apply_audit_return(f_state int,f_errors varchar(200));

    SELECT tram.f_status,tram.f_audit_level,tram.f_audit_Sys_level,tram.f_customid,tram.f_nextaudit_user INTO c_state,c_f_auditlevel,c_f_audit_Sys_level,c_customid,c_nextuserid_2
    FROM tbl_receive_apply_main tram WHERE id = c_mid;
    
    IF c_rejected = 0 THEN
        SET c_rejected = 1;  -- 驳回
    ELSE
        SET c_rejected = 0;  -- 通过
    END IF;
    
    SET  c_audit_level = c_f_auditlevel;
    SET  c_isaudit = 0;

 

    IF  c_back = 0 THEN
        IF (c_modal = 1) AND (c_state <> 0) THEN
            set c_result = -1;
            set c_error ='单据不在草稿状态不能提交！';
          
        END IF;
        IF (c_modal = 2) AND (c_state <> 1) THEN
            set c_result = -1;
            set c_error ='单据不在提交状态不能审批！'; 
        END IF;
        IF c_modal = 1 THEN
            SET c_newstate = 1;
            set c_log ='提交申请';   
        end IF;
        IF (c_modal = 2) THEN
            --  SELECT tuas.f_userid INTO c_lastaudituserid FROM tbl_user_audit_stream tuas WHERE tuas.f_customid = c_customid and tuas.f_busid = 602 AND  tuas.f_mid = c_mid AND tuas.f_flag = 0 ORDER BY tuas.f_auditdate DESC LIMIT 0,1;
            SELECT tram.f_nextaudit_user INTO c_lastaudituserid FROM tbl_receive_apply_main tram WHERE ID = c_mid;
            IF (c_lastaudituserid <> -1) AND (c_lastaudituserid <> c_userid) THEN
                set c_result = -1;           
                SELECT CONCAT('当前审批人与单据指定审批人【',tu.f_name,'】不符,不能审批！') INTO c_error FROM tbl_user tu WHERE id = c_lastaudituserid;                
            end IF;
            IF  c_rejected = 0 THEN -- 不驳回
                IF c_audit_level < c_f_audit_Sys_level THEN
                   set c_audit_level = c_audit_level + 1;
                ELSE
                   set c_audit_level = c_f_audit_Sys_level;
                END IF;
                IF c_audit_level = c_f_audit_Sys_level THEN
                    SET c_isaudit = 1;
                END IF;  
                set c_log ='提交审批';
                set c_modletype = '审批完成';
            ELSE
                set c_log ='审批驳回';
                set c_modletype = '审批驳回';
            END IF;
            IF (c_f_auditlevel+1) >= c_f_audit_Sys_level THEN
                SET c_newstate = 2;  -- 已审批
                SET c_nextuserid_2 = -1;
            ELSE            
                SET c_newstate = 1;  -- 待审批
                SET c_nextuserid_2 = c_nextuserid;
            END IF ;

     


        END IF;
--         IF (c_modal = 3) AND (c_state <> 2) THEN  --有了多级审批后不需要确认了
--             set c_result = -1;
--             set c_error ='单据不在审批状态不能确认！'; 
--             set c_log ='单据确认';
--         END IF;
    else
        IF (c_modal = 1) AND (c_state <> 1) THEN
            set c_result = -1;
            set c_error ='单据不在提交状态不能辙消！';
        END IF;
        IF (c_modal = 2) AND ( (c_state <> 2) AND (c_state <> 1) ) THEN
            set c_result = -1;
            set c_error ='单据不在审批状态不能辙消！';  
        END IF;
        SELECT tuas.f_userid INTO c_lastaudituserid FROM tbl_user_audit_stream tuas WHERE tuas.f_customid = c_customid AND tuas.f_busid = 602 AND tuas.f_mid = c_mid AND tuas.f_flag = 0 ORDER BY id DESC LIMIT 0,1;
        IF (c_lastaudituserid <> c_userid)  THEN
            set c_result = -1;
                 
            SELECT CONCAT('单据必须由最后审批人【',tu.f_name,'】辙消！') INTO c_error FROM tbl_user tu WHERE id = c_lastaudituserid;
        end IF;
        IF c_modal = 1 THEN
            SET c_newstate = 0;
            set c_log ='辙消申请' ;
        END IF;
        IF (c_modal = 2) THEN
            set c_log ='辙消审批' ;
            set c_modletype = '辙消审批';
            IF c_audit_level > 1 THEN
               set c_audit_level = c_audit_level - 1;
            ELSE
               set c_audit_level = 1;
            END IF;

            IF c_audit_level > 1 THEN
                SET c_newstate = 2;
            ELSE 
                SET c_newstate = 1;
            END IF;
   
            -- 找出上一级审批的下一审批人          
            SELECT tuas.f_nextaudit_user into c_nextbackaudituser  FROM tbl_user_audit_stream tuas 
            WHERE  tuas.f_customid =c_customid and f_busid = 602  AND tuas.f_mid = c_mid AND tuas.f_level =  c_audit_level AND tuas.f_flag = 0;
        END IF;
--         IF (c_modal = 3) AND (c_state <> 3) THEN
--             set c_result = -1;
--             set c_error ='单据不在确认状态不能确认！'; 
--             SET c_newstate = 2;
--             set c_log ='辙消确认' ;
--         END IF;
    END IF;
    
    IF c_result = 1 THEN
        UPDATE tbl_receive_apply_main set f_status = c_newstate,f_rejected = c_rejected,f_nextaudit_user =c_nextuserid_2,f_audit_level =c_audit_level,f_isaudit =c_isaudit where id = c_mid;
        
        INSERT INTO tbl_billstream(f_customid,f_type,f_opruserid,f_oprtime,f_opr,f_memo,f_busid)
        SELECT tram.f_customid,1,c_userid,NOW(),c_log,c_memo,tram.id from tbl_receive_apply_main tram WHERE id = c_mid;
    
        INSERT INTO sys_log(f_customid,f_typelevel,f_modal,f_keywords,f_oprtime,f_userid,f_note,f_oprtype)
        VALUES(c_customid,0,'领用申请',c_mid,NOW(),c_userid,c_log,c_log);
    END IF;
    
 
    IF (c_modal = 2) AND (c_result =1) THEN  -- 审批
        -- 先删除再插入
        UPDATE tbl_User_audit_stream SET f_flag = 1,f_delete_time=NOW() WHERE f_customid = c_customid AND f_busid = 602 AND f_mid =c_mid AND f_userid = c_userid AND f_level = c_audit_level;

        INSERT INTO tbl_User_audit_stream(f_customid,f_userid,f_busid,f_busname,f_mid,f_serno,f_createdate,f_auditdate,
                    f_qty,f_memo,f_auditmemo,f_audittype,f_level,f_createuserid,f_nextaudit_user)
        SELECT tram.f_customid,c_userid,602,(SELECT f_name from tbl_menu tm where f_qxid = 602),id,tram.f_serno,tram.f_create_time,NOW(),
               (SELECT sum(trad.f_qty) FROM tbl_receive_apply_detail trad WHERE f_mid = tram.id),tram.f_note,c_memo,c_modletype,tram.f_audit_level,c_userid,c_nextuserid
        from tbl_receive_apply_main tram WHERE id = c_mid;
    END IF;

    IF (c_modal = 2) AND (c_back = 1) AND (c_result = 1) THEN
        UPDATE tbl_User_audit_stream SET f_flag = 1,f_delete_time=NOW() 
        WHERE f_customid = c_customid AND f_busid = 602 AND f_mid =c_mid AND f_userid = c_userid;
        UPDATE tbl_receive_apply_main tram set tram.f_nextaudit_user = IFNULL(c_nextbackaudituser,-1),tram.f_isaudit=0,tram.f_status=1 
        WHERE  f_customid = c_customid AND id = c_mid;
    END IF;

    SELECT c_result AS f_state,IFNULL(c_error,'') AS f_error ;  
    
    
END $$
DELIMITER;





DROP PROCEDURE IF EXISTS Msp_Role_SPLB_Qx ;
-- 角色新增修改时查询可操作部门
DELIMITER $$
CREATE PROCEDURE Msp_Role_SPLB_Qx(
  IN c_rolid       int, -- 查询的角色ID，新增角色就传-1，新增时选中状态全是未选，修改时按权限返回是否选中
  IN c_parentid    int, -- 父ID
  IN c_userid      int  -- 查询人，通过人员判断 customid
  )
label: BEGIN
    DECLARE C_cusromid  int;
    DECLARE c_all       int;

    DROP TEMPORARY TABLE IF EXISTS temporary_temp_类别表; 

    CREATE TEMPORARY TABLE IF NOT EXISTS temporary_temp_类别表(id int,f_name nvarchar(100),f_pid int,chk int);  -- chk 0不选  1选中
  
    SELECT tu.f_customid INTO C_cusromid FROM tbl_user tu WHERE id = c_userid;  
    SELECT tr.f_DeptType INTO c_all FROM tbl_role tr WHERE ID = c_rolid;
    
    INSERT temporary_temp_类别表 (id,f_name,f_pid)
    SELECT id,f_name,td.f_parentid FROM tbl_basic  td WHERE td.f_customid = C_cusromid AND td.f_type = 1 AND td.f_parentid = c_parentid AND td.f_flag = 0 ORDER BY td.f_order;

    -- 检查有没有权限
    UPDATE temporary_temp_类别表 tt部  SET tt部.chk = 0;

    IF c_rolid <> -1 THEN
      UPDATE temporary_temp_类别表 tt部 SET tt部.chk = 1 WHERE id IN(SELECT trd.f_lbid FROM tbl_role_type  trd WHERE trd.f_customid = C_cusromid AND trd.f_roleid = c_rolid);
    END IF;

    IF c_all = 1 THEN
      UPDATE temporary_temp_类别表 tt部 SET tt部.chk = 1;
    END IF;
    
    SELECT * FROM temporary_temp_类别表 tt部;
    DROP TEMPORARY TABLE temporary_temp_类别表;
END $$
DELIMITER;

DROP PROCEDURE IF EXISTS Msp_Base_Get_Code;
-- 获取基础数据自动编码
DELIMITER $$
CREATE PROCEDURE Msp_Base_Get_Code(
    c_type          int, -- 0部门 1分类 2存放位置  3供应商
    c_customid      int  -- 客户ID
)
label:BEGIN
    DECLARE C_QZ        varchar(100);
    DECLARE C_SVRDATE   varchar(100);
    DECLARE c_oldcode   varchar(100);
    DECLARE c_code      varchar(100);
    DECLARE c_newcode   varchar(100);
    DECLARE c_count     int;
    DECLARE c_maxcount varchar(100);
    SELECT   DATE_FORMAT(NOW(),'%Y%m%d')  INTO c_svrdate;

    IF c_type = 0 THEN
        SET C_QZ = CONCAT('BM',C_SVRDATE);        
    END IF;
    IF c_type = 1 THEN
        SET C_QZ = CONCAT('FL',C_SVRDATE);        
    END IF;
    IF c_type = 2 THEN
        SET C_QZ = CONCAT('WZ',C_SVRDATE);        
    END IF;
    IF c_type = 3 THEN
        SET C_QZ = CONCAT('GY',C_SVRDATE);        
    END IF;


    IF NOT EXISTS(SELECT id FROM sys_Get_bill  WHERE f_customid= c_customid AND f_type = c_type LIMIT 0,1) THEN        
          insert INTO sys_get_bill(f_customid,f_type,f_svrdate,f_count,f_code,f_update_time)
          VALUES(c_customid,c_type,C_SVRDATE,0,'',NOW());

--           SELECT *FROM sys_get_bill sgb; 
--           LEAVE label;
--           

    ELSE
          IF EXISTS(SELECT *FROM sys_get_bill sgb WHERE sgb.f_customid = c_customid and sgb.f_type = c_type AND sgb.f_svrdate <> C_SVRDATE) THEN  -- 如果存在记录但不是今天表示隔表了要置编号为空
    				  UPDATE SYS_GET_BILL SET f_code = '',f_svrdate = c_svrdate 
    				  WHERE f_customid = c_customid AND F_TYPE = c_type  AND f_svrdate <> c_svrdate;
              END IF;
    END IF;

    SELECT f_code INTO c_oldcode FROM sys_Get_bill WHERE  f_customid = c_customid and f_type = c_type  AND f_svrdate = C_SVRDATE AND f_Code <> '';

    IF c_oldcode <> '' THEN
        SET c_newcode =CONCAT(C_QZ,  RIGHT(CAST((CAST(RIGHT(c_oldcode,4) AS SIGNED) + 10000001) AS CHAR), 4))   ; 
    END IF;


    IF IFNULL(c_newcode,'') <> '' then
        IF c_type = 0 THEN  -- 部门
            if NOT EXISTS(SELECT id FROM tbl_dept td WHERE td.f_no = c_newcode) THEN
                UPDATE sys_get_bill sgb SET sgb.f_Code = c_newcode WHERE sgb.f_customid = c_customid and sgb.f_type = c_type AND sgb.f_svrdate = C_SVRDATE;
                select c_newcode AS f_serno;
                
                LEAVE label;
            END IF;
        END IF;
        IF c_type = 1 THEN  -- 类别
            if NOT EXISTS(SELECT id FROM tbl_basic  td WHERE td.f_customid =c_customid AND td.f_type = 1 and td.f_no = c_newcode) THEN
                UPDATE sys_get_bill sgb SET sgb.f_Code = c_newcode WHERE sgb.f_customid = c_customid and sgb.f_type = c_type AND sgb.f_svrdate = C_SVRDATE;
                select c_newcode AS f_serno;
                
                LEAVE label;
            END IF;
        END IF;
        IF c_type = 2 THEN  -- 存放位置
            if NOT EXISTS(SELECT id FROM tbl_basic  td WHERE td.f_customid =c_customid AND td.f_type = 4 and td.f_no = c_newcode) THEN
                UPDATE sys_get_bill sgb SET sgb.f_Code = c_newcode WHERE sgb.f_customid = c_customid and sgb.f_type = c_type AND sgb.f_svrdate = C_SVRDATE;
                select c_newcode AS f_serno;
                
                LEAVE label;
            END IF;
        END IF;
        IF c_type = 3 THEN  -- 供应商
            if NOT EXISTS(SELECT id FROM tbl_basic  td WHERE td.f_customid =c_customid AND td.f_type = 3 and td.f_no = c_newcode) THEN
                UPDATE sys_get_bill sgb SET sgb.f_Code = c_newcode WHERE sgb.f_customid = c_customid and sgb.f_type = c_type AND sgb.f_svrdate = C_SVRDATE;
                SELECT  c_newcode AS f_serno;
                
                LEAVE label;  -- 流水表中的编号不存在表中直接返回使用
            END IF;
        END IF;   
    END IF;      


    --  如果流水表中的单号不可用再找表中的最大值获取编号
        
    IF c_type = 0 THEN
        SELECT COUNT(*),MAX(a.f_no) INTO c_count, c_code
        FROM (
          SELECT MAX(LEFT(REPLACE(a.f_no,C_QZ,''),4)) AS f_no FROM ( SELECT td.f_no FROM tbl_dept td WHERE td.f_customid = c_customid and f_no LIKE (CONCAT(C_QZ,'%')) )a 
          UNION ALL
          SELECT MAX(LEFT(REPLACE(sgb.f_Code,C_QZ,''),4)) as f_no FROM sys_get_bill sgb WHERE sgb.f_customid = c_customid and sgb.f_type = c_type AND sgb.f_svrdate = C_SVRDATE AND IFNULL(sgb.f_Code,'') <> ''
        )a WHERE F_NO IS NOT NULL;
    END IF;
    IF c_type = 1 THEN
        SELECT COUNT(*),MAX(a.f_no) INTO c_count, c_code
        FROM (
          SELECT MAX(LEFT(REPLACE(a.f_no,C_QZ,''),4)) AS f_no FROM ( SELECT td.f_no FROM tbl_basic  td WHERE td.f_customid = c_customid and td.f_type =1 and f_no LIKE (CONCAT(C_QZ,'%')) )a 
          UNION ALL
          SELECT MAX(LEFT(REPLACE(sgb.f_Code,C_QZ,''),4)) as f_no FROM sys_get_bill sgb WHERE sgb.f_customid = c_customid and sgb.f_type = c_type AND sgb.f_svrdate = C_SVRDATE AND IFNULL(sgb.f_Code,'') <> ''
        )a WHERE F_NO IS NOT NULL;
    END IF;
    IF c_type = 2 THEN
        SELECT COUNT(*),MAX(a.f_no) INTO c_count, c_code
        FROM (
          SELECT MAX(LEFT(REPLACE(a.f_no,C_QZ,''),4)) AS f_no FROM (  SELECT td.f_no FROM tbl_basic  td WHERE td.f_customid = c_customid and td.f_type =4   and f_no LIKE (CONCAT(C_QZ,'%')) )a 
          UNION ALL
          SELECT MAX(LEFT(REPLACE(sgb.f_Code,C_QZ,''),4)) as f_no FROM sys_get_bill sgb WHERE sgb.f_customid = c_customid and sgb.f_type = c_type AND sgb.f_svrdate = C_SVRDATE AND IFNULL(sgb.f_Code,'') <> ''
        )a WHERE F_NO IS NOT NULL;
    END IF;
    IF c_type = 3 THEN
        SELECT COUNT(*),MAX(a.f_no) INTO c_count, c_code
        FROM (
          SELECT MAX(LEFT(REPLACE(a.f_no,C_QZ,''),4)) AS f_no FROM ( SELECT td.f_no FROM tbl_basic  td WHERE td.f_customid = c_customid and td.f_type =3 and f_no LIKE (CONCAT(C_QZ,'%')) )a 
          UNION ALL
          SELECT MAX(LEFT(REPLACE(sgb.f_Code,C_QZ,''),4)) as f_no FROM sys_get_bill sgb WHERE sgb.f_customid = c_customid and sgb.f_type = c_type AND sgb.f_svrdate = C_SVRDATE AND IFNULL(sgb.f_Code,'') <> ''
        )a WHERE F_NO IS NOT NULL;
    END IF;
    
 
  	IF c_count > 0 THEN  	 
  	    SET c_maxcount = c_code;
  	    IF c_maxcount = '' THEN
  	        SET c_maxcount = '0';
        END IF;
   
  	ELSE
  	  SET c_maxcount = '0';
    END IF;
 
 
		SET c_newcode = CONCAT(C_QZ, Right(CAST((CAST(c_maxcount AS SIGNED) + 10000001) AS CHAR), 4));
    
  
	
    IF IFNULL(c_newcode,'') <> '' THEN
        UPDATE sys_get_bill sgb SET sgb.f_Code = c_newcode WHERE sgb.f_customid = c_customid and sgb.f_type = c_type AND sgb.f_svrdate = C_SVRDATE;
    END IF;
    
    SELECT c_newcode AS f_serno;
 
END
$$
DELIMITER;

DROP PROCEDURE IF EXISTS Msp_SPCode_SetRFID_Code;
-- 生成RFID编码
DELIMITER $$
CREATE PROCEDURE Msp_SPCode_SetRFID_Code(
    c_spxxid    int,
    c_type      int -- 0资产 1耗材
)
BEGIN
    -- 生成规则  1-12位（日期时间） 13-16(序号位) 17-24位（SPXXID转16进制ID)  
    DECLARE c_svrdate  varchar(100);
    DECLARE c_spid_hex varchar(100);
    DECLARE c_hex_l    int;
    DECLARE c_ordno    varchar(30);
    DECLARE c_oldcode  varchar(100);

    SELECT ts.f_rfidcode INTO c_oldcode from tbl_spinfo ts where id = c_spxxid;
    
    IF IFNULL(c_oldcode,'') = '' THEN  -- 已存在RFID码不再重新生成
        SELECT RIGHT( DATE_FORMAT(NOW(),'%Y%m%d%H%i%s'),12) INTO c_svrdate;
        
        SELECT conv(c_spxxid, 10, 16) INTO c_spid_hex;
        
        SELECT LENGTH(c_spid_hex) INTO c_hex_l;
        IF c_hex_l < 8 THEN
            IF (8-c_hex_l) = 1 THEN
                SET c_spid_hex = CONCAT('0',c_spid_hex);
            ELSEIF (8-c_hex_l) = 2 THEN
                SET c_spid_hex = CONCAT('00',c_spid_hex);
            ELSEIF (8-c_hex_l) = 3 THEN
                        SET c_spid_hex = CONCAT('000',c_spid_hex);
            ELSEIF (8-c_hex_l) = 4 THEN
                        SET c_spid_hex = CONCAT('0000',c_spid_hex);
            ELSEIF (8-c_hex_l) = 5 THEN
                        SET c_spid_hex = CONCAT('00000',c_spid_hex);
            ELSEIF (8-c_hex_l) = 6 THEN
                        SET c_spid_hex = CONCAT('000000',c_spid_hex);
            ELSEIF (8-c_hex_l) = 7 THEN
                        SET c_spid_hex = CONCAT('0000000',c_spid_hex);
            END IF;
        END IF;
    
        IF c_type = 0 THEN
            SET c_ordno = '0001';  -- 资产都是一个码对应一个货，所以序号永远是1
        END IF;
        
        SET @t_afterupdat_On_tbl_spinfo = 1; -- 关闭修改触发器

        UPDATE tbl_spinfo ts SET ts.f_rfidcode = CONCAT(c_svrdate,c_ordno,c_spid_hex) WHERE ts.id = c_spxxid   ;
        IF EXISTS(SELECT id FROM tbl_spinfo ts WHERE id = c_spxxid AND IFNULL(ts.f_Code,'') ='') THEN
            UPDATE tbl_spinfo ts set ts.f_Code = ts.f_rfidcode WHERE id = c_spxxid;
        END IF;
    END IF;

    SELECT 1 AS f_state;

END
$$
DELIMITER;


DROP PROCEDURE IF EXISTS msp_Spinfo_Water;
-- 资产位置变更存储过程----查询所有单据以最后一次位置写入资产信息表
DELIMITER $$
CREATE PROCEDURE msp_Spinfo_Water(
  IN c_model       int, -- 1资产领用 2资产退库 3资产借用 4借用归还 5资产变更 6资产调拨 7资产报废 8资产处置  9资产维修
  IN c_mid         int, -- 单据ID
  IN c_userid      int,
  IN c_customerid  int,
  OUT  c_state     int 
  )
label: BEGIN
    DECLARE c_i int  ;
    DECLARE c_note  varchar(100);
  set c_i = 1;
    IF c_model = 1 THEN  -- 领用
        INSERT INTO tbl_SPinfo_Water(f_customid,f_type,f_spid,f_billid,f_billno,f_opruserid,f_memo,f_create_time)
        SELECT c_customerid,2,trd.f_spid,trm.id,trm.f_serno,c_userid,CONCAT('于 ',NOW(),' 被 [',IFNULL(td.f_name,''),'-',IFNULL(tu.f_name,''),']领用,存放于[',IFNULL(tb.f_name,''),']'),NOW()
        FROM tbl_receive_detail trd 
        INNER JOIN tbl_spinfo ts ON trd.f_spid = ts.id
        INNER JOIN tbl_receive_main trm ON trd.f_mid = trm.id
        LEFT  JOIN tbl_user tu ON trm.f_re_userid = tu.id
        LEFT  JOIN tbl_dept td ON tu.f_deptno = td.id
        LEFT  JOIN (SELECT id,f_name FROM  tbl_basic WHERE f_type = 4) tb ON trd.f_postion = tb.id
        WHERE trm.id = c_mid ;
    end IF;

    IF c_model = 2 THEN  -- 资产退库
        INSERT INTO tbl_SPinfo_Water(f_customid,f_type,f_spid,f_billid,f_billno,f_opruserid,f_memo,f_create_time)
        SELECT c_customerid,5,trd.f_spid,trm.id,trm.f_serno,c_userid,CONCAT('于 ',now(),' 被 [',IFNULL(td.f_name,''),'-',IFNULL(tu.f_name,''),']退库,存放于[',IFNULL(tb.f_name,''),']'),NOW()
        FROM tbl_return_detail trd 
        INNER JOIN tbl_spinfo ts ON trd.f_spid = ts.id
        INNER JOIN tbl_return_main trm ON trd.f_mid = trm.id
        LEFT  JOIN tbl_user tu ON trm.f_return_userid = tu.id
        LEFT  JOIN tbl_dept td ON tu.f_deptno = td.id
        LEFT  JOIN (SELECT id,f_name FROM  tbl_basic WHERE f_type = 4) tb ON trd.f_postion = tb.id
        WHERE trm.id = c_mid;        
    END IF;

    IF c_model = 3 THEN  -- 资产借用
        INSERT INTO tbl_SPinfo_Water(f_customid,f_type,f_spid,f_billid,f_billno,f_opruserid,f_memo,f_create_time)
        SELECT c_customerid,3,trd.f_spid,trm.id,trm.f_serno,c_userid,
               (CASE trm.f_Type WHEN 0 THEN CONCAT('于 ',now(),' 被 [',IFNULL(td.f_name,''),'-',IFNULL(tu.f_name,''),']借用,存放于[',IFNULL(tb.f_name,''),']')
                            WHEN 1 THEN CONCAT('于 ',now(),' 被 [外部联系人','-',IFNULL(tb1.f_name,''),']借用,存放于[',IFNULL(tb.f_name,''),']')
                            WHEN 2 THEN CONCAT('于 ',now(),' 被 [供应商','-',IFNULL(tb2.f_name,''),']借用,存放于[',IFNULL(tb.f_name,''),']') ELSE '' END)
          ,NOW()
        FROM tbl_lend_out_detail trd 
        INNER JOIN tbl_spinfo ts ON trd.f_spid = ts.id
        INNER JOIN tbl_lend_out_main trm ON trd.f_mid = trm.id
        LEFT  JOIN tbl_user tu ON trm.f_Lend_In_people = tu.id
        LEFT  JOIN (SELECT ID ,f_name FROM tbl_basic tb WHERE tb.f_type = 5 AND tb.f_customid = c_customerid) tb1 ON trm.f_Lend_Out_people = tb1.id
        LEFT  JOIN (SELECT ID ,f_name FROM tbl_basic tb WHERE tb.f_type = 3 AND tb.f_customid = c_customerid) tb2 ON trm.f_Lend_PID = tb2.id 
        LEFT  JOIN tbl_dept td ON tu.f_deptno = td.id
        LEFT  JOIN (SELECT id,f_name FROM  tbl_basic WHERE f_type = 4) tb ON trd.f_postion = tb.id
        WHERE trm.id = c_mid;     
             
    END IF;
    IF c_model = 4 THEN  -- 资产归还
        INSERT INTO tbl_SPinfo_Water(f_customid,f_type,f_spid,f_billid,f_billno,f_opruserid,f_memo,f_create_time)
        SELECT c_customerid,4,trd.f_spid,trm.id,trm.f_serno,c_userid,
               (CASE trm.f_Type WHEN 0 THEN CONCAT('于 ',now(),' 被 [',IFNULL(td.f_name,''),'-',IFNULL(tu.f_name,''),']归还,存放于[',IFNULL(tb.f_name,''),']')
                            WHEN 1 THEN CONCAT('于 ',now(),' 被 [外部联系人','-',IFNULL(tb1.f_name,''),']归还,存放于[',IFNULL(tb.f_name,''),']')
                            WHEN 2 THEN CONCAT('于 ',now(),' 被 [供应商','-',IFNULL(tb2.f_name,''),']归还,存放于[',IFNULL(tb.f_name,''),']') ELSE '' END)
          ,NOW()
        FROM  tbl_lend_in_detail trd 
        INNER JOIN tbl_spinfo ts ON trd.f_spid = ts.id
        INNER JOIN tbl_lend_in_main trm ON trd.f_mid = trm.id
        LEFT  JOIN tbl_user tu ON trm.f_R_In_people = tu.id
        LEFT  JOIN (SELECT ID ,f_name FROM tbl_basic tb WHERE tb.f_type = 5 AND tb.f_customid = c_customerid) tb1 ON trm.f_R_Out_people = tb1.id
        LEFT  JOIN (SELECT ID ,f_name FROM tbl_basic tb WHERE tb.f_type = 3 AND tb.f_customid = c_customerid) tb2 ON trm.f_R_PID = tb2.id 
        LEFT  JOIN tbl_dept td ON tu.f_deptno = td.id
        LEFT  JOIN (SELECT id,f_name FROM  tbl_basic WHERE f_type = 4) tb ON trd.f_postion = tb.id
        WHERE trm.id = c_mid;        
    END IF;

    IF c_model = 6 THEN  -- 资产调拨
        INSERT INTO tbl_SPinfo_Water(f_customid,f_type,f_spid,f_billid,f_billno,f_opruserid,f_memo,f_create_time)
        SELECT c_customerid,5,trd.f_spid,trm.id,trm.f_serno,c_userid,CONCAT('于 ',now(),' 被 [',IFNULL(td.f_name,''),'-',IFNULL(tu.f_name,''),'] 从 [',IFNULL(tb1.f_name,''),']调往[',IFNULL(tb.f_name,''),']'),NOW()
        FROM tbl_db_detail trd 
        INNER JOIN tbl_spinfo ts ON trd.f_spid = ts.id
        INNER JOIN tbl_db_main trm ON trd.f_mid = trm.id
        LEFT  JOIN tbl_user tu ON trm.f_create_user = tu.id
        LEFT  JOIN tbl_dept td ON tu.f_deptno = td.id
        LEFT  JOIN (SELECT id,f_name FROM  tbl_basic WHERE f_type = 4) tb ON trd.f_postion = tb.id
          LEFT  JOIN (SELECT id,f_name FROM  tbl_basic WHERE f_type = 4) tb1 ON ts.f_PositionDept = tb1.id
        WHERE trm.id = c_mid;        
    END IF;
    
    IF c_model = 8 THEN  -- 资产处置
        SELECT f_name INTO c_note FROM tbl_sys_dictionary tsd where tsd.f_type = 0 AND f_id = 3;
        INSERT INTO tbl_SPinfo_Water(f_customid,f_type,f_spid,f_billid,f_billno,f_opruserid,f_memo,f_create_time)
        SELECT c_customerid,8,trd.f_spid,trm.id,trm.f_serno,c_userid,CONCAT('于 ',now(),' 被 [',IFNULL(td.f_name,''),'-',IFNULL(tu.f_name,''),'] 从 [',IFNULL(st.f_name,''),']变更为[',IFNULL(c_note,''),'-',IFNULL(st2.f_name,''),']'),NOW()
        FROM tbl_handle_detail  trd 
        INNER JOIN tbl_Handle_Main trm ON trd.f_mid = trm.id 
        INNER JOIN tbl_spinfo ts ON trd.f_spid = ts.id
        LEFT  JOIN tbl_user tu ON trm.f_create_user = tu.id
        LEFT  JOIN tbl_dept td ON tu.f_deptno = td.id
        INNER JOIN (SELECT f_id,tsd.f_name FROM tbl_sys_dictionary tsd where tsd.f_type = 0) st ON ts.f_Status = st.f_id
        INNER JOIN (SELECT f_id,tsd.f_name FROM tbl_sys_dictionary tsd where tsd.f_type = 0) st2 ON trd.f_state = st2.f_id
        WHERE trd.f_mid = c_mid; 
    END IF;
    IF c_model = 7 THEN  -- 资产报废
        SELECT f_name INTO c_note FROM tbl_sys_dictionary tsd where tsd.f_type = 0 AND f_id = -1;
        INSERT INTO tbl_SPinfo_Water(f_customid,f_type,f_spid,f_billid,f_billno,f_opruserid,f_memo,f_create_time)
        SELECT c_customerid,7,trd.f_spid,trm.id,trm.f_serno,c_userid,CONCAT('于 ',now(),' 被 [',IFNULL(td.f_name,''),'-',IFNULL(tu.f_name,''),'] 从 [',IFNULL(st.f_name,''),']变更为[',IFNULL(c_note,''),'-',IFNULL(st2.f_name,''),']'),NOW()
        FROM tbl_Scrapped_Detail  trd 
        INNER JOIN tbl_Scrapped_main trm ON trd.f_mid = trm.id 
        INNER JOIN tbl_spinfo ts ON trd.f_spid = ts.id
        LEFT  JOIN tbl_user tu ON trm.f_create_user = tu.id
        LEFT  JOIN tbl_dept td ON tu.f_deptno = td.id
        INNER JOIN (SELECT f_id,tsd.f_name FROM tbl_sys_dictionary tsd where tsd.f_type = 0) st ON ts.f_Status = st.f_id
        INNER JOIN (SELECT f_id,tsd.f_name FROM tbl_sys_dictionary tsd where tsd.f_type = 0) st2 ON trd.f_reason = st2.f_id
        WHERE trd.f_mid = c_mid; 
    END IF;
    set c_state = 1;

END
$$
DELIMITER;



DROP PROCEDURE IF EXISTS MSP_Report_SPWater;
DELIMITER $$
CREATE PROCEDURE MSP_Report_SPWater(
    c_type          int,  -- 0查合计 1查明细
    c_userid        int,
    c_customeid     int,
    c_where         varchar(2000),
    c_curpage       int,
    c_pagesize      int,
    c_order         varchar(1000)
)
label:BEGIN
    DECLARE c_bid   int;

    DROP TEMPORARY TABLE IF EXISTS temp_warterid;
    CREATE TEMPORARY TABLE temp_warterid(ordid int,id int);
 
    SET c_bid = (c_curpage -1)  *c_pagesize;
 
    
    
    SET @sql = CONCAT(' insert into temp_warterid(ordid,id) select (@i:=@i+1)   as ordno ,id from tbl_SPinfo_Water ,(select   @i:=0)   as   it  where f_flag = 0 ',c_where,c_order,' limit  ',c_bid,',',c_pagesize);
    
 
    PREPARE smt FROM @sql;
    EXECUTE smt;
    DEALLOCATE PREPARE smt;

 

    IF c_type = 0 THEN
       SELECT COUNT(*) AS icount FROM  temp_warterid tw;
    else

      SELECT  tw.ordid   as ordno,td.f_name AS f_typename, ts.f_Name AS spname,tsw.f_billno,tu.f_name AS uername,tsw.f_memo,ts.f_Code,tsw.f_create_time
      FROM tbl_SPinfo_Water tsw
      INNER JOIN temp_warterid tw ON tsw.id = tw.id
      INNER JOIN tbl_spinfo ts ON tsw.f_spid = ts.id
      LEFT JOIN tbl_user tu ON tsw.f_opruserid = tu.id
      INNER JOIN (SELECT f_id,tsd.f_name FROM tbl_sys_dictionary tsd WHERE tsd.f_type = 8 AND tsd.f_status = 1) td ON tsw.f_type = td.f_id
   
      WHERE tsw.f_flag = 0;
    END IF;


    DROP TEMPORARY TABLE temp_warterid;
END
$$
DELIMITER;


DROP PROCEDURE IF EXISTS MSP_Report_Dept_Fx;
DELIMITER $$
-- 部门资产情况分析
CREATE PROCEDURE MSP_Report_Dept_Fx(
    c_type        int, -- 0 查询合计条数  1查明细
    c_customid    varchar(30),
    c_parentid    int,           -- 父级ID,如果 <=0 是查最上级
    c_userid      varchar(30),
    c_deptid      varchar(100),  -- 查询部门ID
    c_typeid      varchar(1000), -- 查询类别,查询多个类别用逗号分开
    c_where       varchar(2000),
    c_showtype    int,           -- 0显示所有类别 1只显示有商品的部门
    c_curpage     int,
    c_cursize     int )
label: BEGIN
    DECLARE c_pbid     int;
    DECLARE C_DEPT     varchar(8000);  -- 可操作部门
    DECLARE c_spwhere  varchar(8000);  -- 商品条件
    DECLARE c_count    int;
    DECLARE c_total    decimal;DECLARE c_usecount int;DECLARE c_IdleCount int; DECLARE c_scrappedcount int;DECLARE c_servicecount int;DECLARE c_dealcount int;
    DECLARE c_Acquirecount int;DECLARE c_borrowcount int;DECLARE c_spcount int;
    DECLARE c_level    int;
 
    SET c_pbid = (c_curpage-1) *c_cursize;
    
    DROP TEMPORARY TABLE IF EXISTS temp_dept;    
    DROP TEMPORARY TABLE IF EXISTS temp_spinfo;
    DROP TEMPORARY TABLE IF EXISTS temp_deptname;

    CREATE TEMPORARY TABLE temp_spinfo(id int,f_deptid int,f_Status int,f_price decimal(18,2),f_pdeptid varchar(100));  -- 存储符合条件的商品ID
    CREATE TEMPORARY TABLE temp_dept(id int,f_no varchar(100),name varchar(100),资产数量 int,资产金额 decimal(18,2),在用 int,闲置 int,报废 int,维修中 int,处置 int,领用 int,借用 INT);  -- 通过条件筛选获得最终商品ID
    CREATE TEMPORARY TABLE temp_deptname(id int,f_no varchar(100),f_parentid int,parent1_id varchar(30),parent2_id varchar(30),parent3_id varchar(30),f_name varchar(100),f_nameall varchar(100));  -- 获取类别上下级名称
 
    IF c_parentid < 0 THEN
       SET c_parentid = 0;
    END IF;
    
    -- 获取类别树信息存到临时表
    CALL Msp_Data_Treelist(0,c_customid,'','temp_deptname');

    SET c_level = -1;
    IF c_parentid <=0 THEN
        SET c_level = 0;  -- 查询最父级
    END IF;
    IF c_level = -1 THEN
        SELECT  IFNULL((SELECT 1 FROM temp_deptname ts WHERE id = c_parentid AND ts.parent2_id = '' AND ts.parent3_id = ''),-1) INTO c_level;  -- 查询第二级
    END IF;
    IF c_level = -1 THEN
        SELECT  IFNULL((SELECT 2 FROM temp_deptname ts WHERE id = c_parentid AND  ts.parent3_id = ''),-1) INTO c_level;  -- 查询第三级
    END IF;
    IF c_level = -1 then
       set c_level = 3;  -- 传入的ID就是第三级
    END IF;
    

    IF c_where <> '' THEN 
       SET c_where = CONCAT(' where ',c_where);
    END IF;
    
    -- 查询可操作部门，传空就反这个人可以操作的所有部门
    CALL Msp_Data_Parent_Child(6,c_deptid,c_userid,C_DEPT);
    IF IFNULL(C_DEPT,'') = '' THEN
        SET C_DEPT = '-10000';  -- 不存在部门
    END IF;
    SET c_spwhere = CONCAT(IFNULL(c_spwhere,''),' and (f_Dept in (',C_DEPT,') or f_UseDept in (',C_DEPT,')) ');

 

    IF c_typeid <> '' THEN
         set c_spwhere = CONCAT(c_spwhere,' and f_typeid  in (',c_typeid,') ');     
    END IF;


--     -- 设置商品类别条件
--     IF c_level = 0 THEN  -- 查最父级返回全部类别数据
--         set c_spwhere = CONCAT(c_spwhere,' and f_typeid  in (select id from temp_deptname) ');
--     ELSEIF c_level = 1 THEN -- 查二级和二级以下数据
--          set c_spwhere = CONCAT(c_spwhere,' and f_typeid  in (select id from temp_deptname where parent1_id = ',c_parentid,' and id <> ',c_parentid,') ');
--     ELSEIF c_level = 2 THEN  -- 查三级数据
--          set c_spwhere = CONCAT(c_spwhere,' and f_typeid  in (select id from temp_deptname where parent2_id = ',c_parentid,' and id <> ',c_parentid,') ');
--     END IF;
--    
    -- 部门条件
    IF c_parentid <=0 THEN
        SET c_where = CONCAT(' and f_parentid <=0 ',c_where);
    ELSE 
        SET c_where = CONCAT(c_where,' and f_parentid = ',c_parentid);
    end IF;


    IF c_showtype = 1 THEN -- 只显示有商品部门
        SET c_where = CONCAT(c_where ,' and a.id in (select f_pdeptid  from temp_spinfo group by f_pdeptid )');
    end IF;

    SET c_spwhere = IFNULL(c_spwhere,'');
    SET c_where = IFNULL(c_where,'');
    
    -- 插入符合条件商品
    SET @SQL = CONCAT('insert into temp_spinfo(id,f_Status,f_deptid,f_price) select id,f_Status,IFNULL(f_UseDept,f_dept),f_price from tbl_spinfo where f_customid = ',c_customid,' and f_flag =0 ',IFNULL(c_spwhere,''));

 
    PREPARE smt FROM @SQL;    
    EXECUTE smt;
    deallocate prepare smt;

 
--  CALL MSP_Report_Dept_Fx(1,0,0,1,'','','',1,1,10000)

    -- 按查询级别修改商品的父级类别ID
    IF c_level = 0 THEN
        UPDATE temp_spinfo a INNER JOIN temp_deptname b ON a.f_deptid = b.id SET a.f_pdeptid = b.parent1_id;
    ELSEIF c_level = 1 THEN
        UPDATE temp_spinfo a INNER JOIN temp_deptname b ON a.f_deptid = b.id SET a.f_pdeptid = b.parent2_id;
    ELSE 
        UPDATE temp_spinfo a INNER JOIN temp_deptname b ON a.f_deptid = b.id SET a.f_pdeptid = b.parent3_id;
    END IF;
    --   CALL MSP_Report_SPType (1,0,0,1,'5110','',1,1,20);
 
    -- 插入部门
    SET @SQL = CONCAT(' INSERT INTO temp_dept(id,f_no,name)  SELECT id,f_no,f_name FROM tbl_dept a WHERE a.f_customid = ',c_customid,'  and f_flag = 0 ',c_where,' order by a.id   limit ',c_pbid,',',c_cursize);     
    PREPARE smt FROM @SQL;
    EXECUTE smt;
    deallocate prepare smt;
 

 
    IF c_type = 0 THEN
  
        SELECT COUNT(*) INTO c_spcount FROM temp_spinfo ts INNER JOIN temp_dept ts1 ON ts.f_pdeptid = ts1.id;-- 商品总数
        SELECT sum(f_price) INTO c_total FROM temp_spinfo ts INNER JOIN temp_dept ts1 ON ts.f_pdeptid = ts1.id ;-- 商品总额
        SELECT COUNT(*) INTO c_usecount FROM temp_spinfo ts INNER JOIN temp_dept ts1 ON ts.f_pdeptid = ts1.id WHERE ts.f_Status IN (1,2);-- 使用数
        SELECT COUNT(*) INTO c_IdleCount FROM temp_spinfo ts INNER JOIN temp_dept ts1 ON ts.f_pdeptid = ts1.id WHERE ts.f_Status =0;-- 闲置
        SELECT COUNT(*) INTO c_scrappedcount FROM temp_spinfo ts INNER JOIN temp_dept ts1 ON ts.f_pdeptid = ts1.id WHERE ts.f_Status=-1;-- 报废
        SELECT COUNT(*) INTO c_servicecount  FROM temp_spinfo ts INNER JOIN temp_dept ts1 ON ts.f_pdeptid = ts1.id WHERE ts.f_Status=4;-- 维修
        SELECT COUNT(*) INTO c_dealcount FROM temp_spinfo ts INNER JOIN temp_dept ts1 ON ts.f_pdeptid = ts1.id WHERE ts.f_Status =3;-- 处置
        SELECT COUNT(*) INTO c_Acquirecount FROM temp_spinfo ts INNER JOIN temp_dept ts1 ON ts.f_pdeptid = ts1.id WHERE ts.f_Status =1;-- 领用
        SELECT COUNT(*) INTO c_borrowcount FROM temp_spinfo ts INNER JOIN temp_dept ts1 ON ts.f_pdeptid = ts1.id WHERE ts.f_Status =2;-- 借用
        
        SELECT c_count AS icount,c_spcount AS spcount,c_total AS total,c_usecount AS usecount,c_IdleCount AS IdleCount,c_scrappedcount AS scrappedcount,
               c_servicecount AS servicecount,c_dealcount AS dealcount,c_Acquirecount AS Acquirecount,c_borrowcount AS borrowcount;
         
    else       
        -- 查询资产总数
        UPDATE temp_dept a SET a.资产数量 = (SELECT COUNT(*) FROM temp_spinfo ts  WHERE ts.f_pdeptid = a.id);
        -- 查询资产总额
        UPDATE temp_dept a SET a.资产金额 = (SELECT SUM(f_Price) FROM temp_spinfo ts  WHERE ts.f_pdeptid = a.id);
        -- 查询在用资产
        UPDATE temp_dept a SET a.在用 = (SELECT COUNT(*) FROM temp_spinfo ts WHERE f_Status IN (1,2) AND ts.f_pdeptid = a.id );
        -- 查询闲置资产
        UPDATE temp_dept a SET a.闲置 = (SELECT COUNT(*) FROM temp_spinfo ts WHERE f_Status = 0 AND ts.f_pdeptid = a.id );
        -- 查询报废资产
        UPDATE temp_dept a SET a.报废 = (SELECT COUNT(*) FROM temp_spinfo ts WHERE f_Status = -1 AND ts.f_pdeptid = a.id );
        -- 查询维修中资产
        UPDATE temp_dept a SET a.维修中 = (SELECT COUNT(*) FROM temp_spinfo ts WHERE f_Status = 4 AND ts.f_pdeptid = a.id );
        -- 查询处置资产
        UPDATE temp_dept a SET a.处置 = (SELECT COUNT(*) FROM temp_spinfo ts WHERE f_Status = 3 AND ts.f_pdeptid = a.id );
        -- 查询维领用资产
        UPDATE temp_dept a SET a.领用 = (SELECT COUNT(*) FROM temp_spinfo ts WHERE f_Status = 1 AND ts.f_pdeptid = a.id );
        -- 查询维借用资产
        UPDATE temp_dept a SET a.借用 = (SELECT COUNT(*) FROM temp_spinfo ts WHERE f_Status = 2 AND ts.f_pdeptid = a.id );
    
--         UPDATE temp_dept ts INNER JOIN temp_deptname b ON ts.id = b.id
--         SET ts.name = b.f_nameall;
    
        SELECT id,f_no,c_parentid AS parentid,name,资产数量 AS spcount,ts.资产金额 AS sptotal,在用 AS useqty,闲置 AS Idleqty,ts.报废 AS scrappedqty,ts.维修中 AS serviceqty,ts.处置 AS dealqty,
               领用 AS Acquireqty,借用 AS borrowqty
        FROM temp_dept ts ;
    END IF;
    
    DROP TEMPORARY TABLE temp_dept;
    DROP TEMPORARY TABLE temp_spinfo;
    DROP TEMPORARY TABLE temp_deptname;
END
$$
DELIMITER;


DROP PROCEDURE IF EXISTS MSP_Report_SPType;
DELIMITER $$
CREATE PROCEDURE MSP_Report_SPType(
    c_type        int, -- 0 查询合计条数  1查明细
    c_customid    varchar(30),
    c_parentid    int,           -- 父级ID,如果 <=0 是查最上级
    c_userid      varchar(30),
    c_deptid      varchar(100),  -- 查询部门ID
    c_where       varchar(2000),
    c_showtype    int,           -- 0显示所有类别 1只显示有商类别
    c_curpage     int,
    c_cursize     int )
label: BEGIN
    DECLARE c_pbid     int;
    DECLARE C_DEPT     varchar(8000);  -- 可操作部门
    DECLARE c_spwhere  varchar(8000);  -- 商品条件
    DECLARE c_count    int;
    DECLARE c_total    decimal;DECLARE c_usecount int;DECLARE c_IdleCount int; DECLARE c_scrappedcount int;DECLARE c_servicecount int;DECLARE c_dealcount int;
    DECLARE c_Acquirecount int;DECLARE c_borrowcount int;DECLARE c_spcount int;
    DECLARE c_level    int;
 
    SET c_pbid = (c_curpage-1) *c_cursize;
    
    DROP TEMPORARY TABLE IF EXISTS temp_sptype;    
    DROP TEMPORARY TABLE IF EXISTS temp_spinfo;
    DROP TEMPORARY TABLE IF EXISTS temp_sptypename;

    CREATE TEMPORARY TABLE temp_spinfo(id int,f_typeid int,f_Status int,f_price decimal(18,2),f_ptypeid int);  -- 存储符合条件的商品ID
    CREATE TEMPORARY TABLE temp_sptype(id int,f_no varchar(100),name varchar(100),资产数量 int,资产金额 decimal(18,2),在用 int,闲置 int,报废 int,维修中 int,处置 int,领用 int,借用 INT);  -- 通过条件筛选获得最终商品ID
    CREATE TEMPORARY TABLE temp_sptypename(id int,f_no varchar(100),f_parentid int,parent1_id varchar(30),parent2_id varchar(30),parent3_id varchar(30),f_name varchar(100),f_nameall varchar(100),f_nametwo varchar(100));  -- 获取类别上下级名称
 
    IF c_parentid < 0 THEN
       SET c_parentid = 0;
    END IF;
    
    -- 获取类别树信息存到临时表
    CALL Msp_Data_Treelist(1,c_customid,'','temp_sptypename');

    SET c_level = -1;
    IF c_parentid <=0 THEN
        SET c_level = 0;  -- 查询最父级
    END IF;
    IF c_level = -1 THEN
        SELECT  IFNULL((SELECT 1 FROM temp_sptypename ts WHERE id = c_parentid AND ts.parent2_id = '' AND ts.parent3_id = ''),-1) INTO c_level;  -- 查询第二级
    END IF;
    IF c_level = -1 THEN
        SELECT  IFNULL((SELECT 2 FROM temp_sptypename ts WHERE id = c_parentid AND  ts.parent3_id = ''),-1) INTO c_level;  -- 查询第三级
    END IF;
    IF c_level = -1 then
       set c_level = 3;  -- 传入的ID就是第三级
    END IF;
    
       

    IF c_where <> '' THEN 
       SET c_where = CONCAT(' where ',c_where);
    END IF;
    
    IF c_deptid <> '' THEN  -- 有传部门是只想查这个部门下的人员，没传部门查所有人员
        CALL Msp_Data_Parent_Child(6,c_deptid,c_userid,C_DEPT);
        IF IFNULL(C_DEPT,'') = '' THEN
            SET C_DEPT = '-10000';  -- 不存在部门
        END IF;
        SET c_spwhere = CONCAT(' and f_Dept in (',C_DEPT,') ');
    ELSE 
        SET c_spwhere = '';
    end IF;

    -- 设置商品类别条件
    IF c_level = 0 THEN  -- 查最父级返回全部类别数据
        set c_spwhere = CONCAT(c_spwhere,' and f_typeid  in (select id from temp_sptypename) ');
    ELSEIF c_level = 1 THEN -- 查二级和二级以下数据
         set c_spwhere = CONCAT(c_spwhere,' and f_typeid  in (select id from temp_sptypename where parent1_id = ',c_parentid,' and id <> ',c_parentid,') ');
    ELSEIF c_level = 2 THEN  -- 查三级数据
         set c_spwhere = CONCAT(c_spwhere,' and f_typeid  in (select id from temp_sptypename where parent2_id = ',c_parentid,' and id <> ',c_parentid,') ');
    END IF;
   
    -- 类别条件
    IF c_parentid <=0 THEN
        SET c_where = CONCAT(' and f_parentid <=0 ',c_where);
    ELSE 
        SET c_where = CONCAT(c_where,' and f_parentid = ',c_parentid);
    end IF;


    IF c_showtype = 1 THEN -- 只显示有商品类别
        SET c_where = CONCAT(c_where ,' and a.id in (select f_ptypeid  from temp_spinfo group by f_typeid )');
    end IF;
    
    -- 插入符合条件商品
    SET @SQL = CONCAT('insert into temp_spinfo(id,f_Status,f_typeid,f_price) select id,f_Status,f_typeid,f_price from tbl_spinfo where f_customid = ',c_customid,' and f_flag =0 ',c_spwhere);
    PREPARE smt FROM @SQL;    
    EXECUTE smt;
    deallocate prepare smt;

    -- 按查询级别修改商品的父级类别ID
    IF c_level = 0 THEN
        UPDATE temp_spinfo a INNER JOIN temp_sptypename b ON a.f_typeid = b.id SET a.f_ptypeid = b.parent1_id;
    ELSEIF c_level = 1 THEN
        UPDATE temp_spinfo a INNER JOIN temp_sptypename b ON a.f_typeid = b.id SET a.f_ptypeid = b.parent2_id;
    ELSE 
        UPDATE temp_spinfo a INNER JOIN temp_sptypename b ON a.f_typeid = b.id SET a.f_ptypeid = b.parent3_id;
    END IF;
    --   CALL MSP_Report_SPType (1,0,0,1,'5110','',1,1,20);
 
    -- 插入类别
    SET @SQL = CONCAT(' INSERT INTO temp_sptype(id,f_no,name)  SELECT id,f_no,f_name FROM tbl_basic a WHERE a.f_customid = ',c_customid,' and a.f_type = 1 and f_flag = 0 ',c_where,' order by a.id   limit ',c_pbid,',',c_cursize);     
    PREPARE smt FROM @SQL;
    EXECUTE smt;
    deallocate prepare smt;


 
    IF c_type = 0 THEN
       -- SELECT COUNT(*) INTO c_count FROM temp_sptype ts;
        SELECT COUNT(*) INTO c_spcount FROM temp_spinfo ts INNER JOIN temp_sptype ts1 ON ts.f_ptypeid = ts1.id;-- 商品总数
        SELECT sum(f_price) INTO c_total FROM temp_spinfo ts INNER JOIN temp_sptype ts1 ON ts.f_ptypeid = ts1.id ;-- 商品总额
        SELECT COUNT(*) INTO c_usecount FROM temp_spinfo ts INNER JOIN temp_sptype ts1 ON ts.f_ptypeid = ts1.id WHERE ts.f_Status IN (1,2);-- 使用数
        SELECT COUNT(*) INTO c_IdleCount FROM temp_spinfo ts INNER JOIN temp_sptype ts1 ON ts.f_ptypeid = ts1.id WHERE ts.f_Status =0;-- 闲置
        SELECT COUNT(*) INTO c_scrappedcount FROM temp_spinfo ts INNER JOIN temp_sptype ts1 ON ts.f_ptypeid = ts1.id WHERE ts.f_Status=-1;-- 报废
        SELECT COUNT(*) INTO c_servicecount  FROM temp_spinfo ts INNER JOIN temp_sptype ts1 ON ts.f_ptypeid = ts1.id WHERE ts.f_Status=4;-- 维修
        SELECT COUNT(*) INTO c_dealcount FROM temp_spinfo ts INNER JOIN temp_sptype ts1 ON ts.f_ptypeid = ts1.id WHERE ts.f_Status =3;-- 处置
        SELECT COUNT(*) INTO c_Acquirecount FROM temp_spinfo ts INNER JOIN temp_sptype ts1 ON ts.f_ptypeid = ts1.id WHERE ts.f_Status =1;-- 领用
        SELECT COUNT(*) INTO c_borrowcount FROM temp_spinfo ts INNER JOIN temp_sptype ts1 ON ts.f_ptypeid = ts1.id WHERE ts.f_Status =2;-- 借用
        
        SELECT c_count AS icount,c_spcount AS spcount,c_total AS total,c_usecount AS usecount,c_IdleCount AS IdleCount,c_scrappedcount AS scrappedcount,
               c_servicecount AS servicecount,c_dealcount AS dealcount,c_Acquirecount AS Acquirecount,c_borrowcount AS borrowcount;
         
    else       
        -- 查询资产总数
        UPDATE temp_sptype a SET a.资产数量 = (SELECT COUNT(*) FROM temp_spinfo ts  WHERE ts.f_ptypeid = a.id);
        -- 查询资产总额
        UPDATE temp_sptype a SET a.资产金额 = (SELECT SUM(f_Price) FROM temp_spinfo ts  WHERE ts.f_ptypeid = a.id);
        -- 查询在用资产
        UPDATE temp_sptype a SET a.在用 = (SELECT COUNT(*) FROM temp_spinfo ts WHERE f_Status IN (1,2) AND ts.f_ptypeid = a.id );
        -- 查询闲置资产
        UPDATE temp_sptype a SET a.闲置 = (SELECT COUNT(*) FROM temp_spinfo ts WHERE f_Status = 0 AND ts.f_ptypeid = a.id );
        -- 查询报废资产
        UPDATE temp_sptype a SET a.报废 = (SELECT COUNT(*) FROM temp_spinfo ts WHERE f_Status = -1 AND ts.f_ptypeid = a.id );
        -- 查询维修中资产
        UPDATE temp_sptype a SET a.维修中 = (SELECT COUNT(*) FROM temp_spinfo ts WHERE f_Status = 4 AND ts.f_ptypeid = a.id );
        -- 查询处置资产
        UPDATE temp_sptype a SET a.处置 = (SELECT COUNT(*) FROM temp_spinfo ts WHERE f_Status = 3 AND ts.f_ptypeid = a.id );
        -- 查询维领用资产
        UPDATE temp_sptype a SET a.领用 = (SELECT COUNT(*) FROM temp_spinfo ts WHERE f_Status = 1 AND ts.f_ptypeid = a.id );
        -- 查询维借用资产
        UPDATE temp_sptype a SET a.借用 = (SELECT COUNT(*) FROM temp_spinfo ts WHERE f_Status = 2 AND ts.f_ptypeid = a.id );
    
--         UPDATE temp_sptype ts INNER JOIN temp_sptypename b ON ts.id = b.id
--         SET ts.name = b.f_nameall;
    
        SELECT id,f_no,c_parentid AS parentid,name,资产数量 AS spcount,ts.资产金额 AS sptotal,在用 AS useqty,闲置 AS Idleqty,ts.报废 AS scrappedqty,ts.维修中 AS serviceqty,ts.处置 AS dealqty,
               领用 AS Acquireqty,借用 AS borrowqty
        FROM temp_sptype ts ;
    END IF;
    
    DROP TEMPORARY TABLE temp_sptype;
    DROP TEMPORARY TABLE temp_spinfo;
    DROP TEMPORARY TABLE temp_sptypename;
END
$$
DELIMITER;

DROP PROCEDURE IF EXISTS msp_spinfo_import;
DELIMITER $$
CREATE PROCEDURE msp_spinfo_import
( c_customid int,
  c_userid   int)
label:BEGIN
    DECLARE c_count  int;
    DECLARE c_maxid  int;
    DROP TEMPORARY TABLE IF EXISTS temp_spinfo_import_two;
    DROP TEMPORARY TABLE IF EXISTS temp_spinfo_import_return;

    CREATE TEMPORARY TABLE temp_spinfo_import_two(
          id int   NOT NULL  ,
          f_customid int NOT NULL DEFAULT 0,
          f_accountid int NOT NULL DEFAULT 0,
          f_Code varchar(60) NOT NULL COMMENT '条码 ',
          f_Name varchar(100) DEFAULT NULL COMMENT '名称',
          f_Status int NOT NULL COMMENT '状态 0闲置、1领用、 2借用  3处置   -1报废',
          f_Typeid int DEFAULT NULL COMMENT '类别ID',
          f_PPID int DEFAULT NULL COMMENT '品牌ID',
          f_Providerid int DEFAULT NULL COMMENT '供应商ID',
          f_Specification varchar(50) DEFAULT NULL COMMENT '规格',
          f_Model varchar(50) DEFAULT NULL COMMENT '型号',
          f_Unit varchar(50) DEFAULT NULL COMMENT '单位',
          f_Price varchar(100) DEFAULT NULL COMMENT '价格',
          f_Source varchar(100) DEFAULT NULL COMMENT '来源',
          f_Company int DEFAULT NULL COMMENT '所属公司',
          f_Dept int DEFAULT NULL COMMENT '管理部门',
          f_CustodyPeople int DEFAULT NULL COMMENT '管理人员',
          f_UseCompany int DEFAULT NULL COMMENT '使用公司',
          f_UseDept int DEFAULT NULL COMMENT '使用部门',
          f_UsePeople int DEFAULT NULL COMMENT '在用人员',
          f_PositionDept int DEFAULT NULL COMMENT '存放部门',
          f_Invoice varchar(100) DEFAULT NULL COMMENT '发票号',
          f_InvoiceDate varchar(100) DEFAULT NULL COMMENT '开票日期',
          f_BuyDate varchar(100) DEFAULT NULL COMMENT '购买日期',
          f_ScrappedDate varchar(100) DEFAULT NULL COMMENT '报废日期',
          f_MaintenanceDate varchar(100) DEFAULT NULL COMMENT '过保日期',
          f_UseDate varchar(100) DEFAULT NULL COMMENT '领用时间',
          f_IsPD int NOT NULL COMMENT '是否盘点',
          f_UseWay varchar(50) DEFAULT NULL COMMENT '资产用途',
          f_note varchar(300) DEFAULT NULL COMMENT '备注',
          f_Qty int DEFAULT NULL COMMENT '数量',
          f_create_user int NOT NULL COMMENT '创建人',
          f_create_time datetime NOT NULL COMMENT '创建时间',
          f_update_user int DEFAULT NULL COMMENT '最后修改 人',
          f_update_time datetime DEFAULT NULL COMMENT '最后修改时间',
          f_flag int NOT NULL COMMENT '删除状态 0正常 1已删除',
          f_delete_user int DEFAULT NULL COMMENT '删除人',
          f_delete_time datetime DEFAULT NULL COMMENT '删除时间',
          f_printcount int NOT NULL DEFAULT 0,
          f_Default_CustodyPeople int DEFAULT NULL COMMENT '默认保管人（新增时设置，用于没单据时显示的保管人）',
          f_Default_PositionDept int DEFAULT NULL COMMENT '默认存放位置（新增时设置，用于没单据时显示的存放位置）',
          f_lend_type int DEFAULT NULL COMMENT '借用类型 0内部借用 1外部联系人借用 2供应商借用',
          f_lend_PID int DEFAULT NULL COMMENT '借用供应商ID',
          f_len_outID int DEFAULT NULL,
          f_len_ReturnDate varchar(100) DEFAULT NULL
      );

    CREATE TEMPORARY TABLE temp_spinfo_import_return(f_state int,f_errors varchar(1000));

    SET @row_number = 0;

 
 

    SELECT max(id) INTO c_maxid FROM tbl_spinfo ts where ts.f_customid = c_customid;
              
 

    INSERT INTO temp_spinfo_import_two(id,f_customid,f_accountid,f_Code,f_Name,f_Status,f_Typeid,f_PPID,
                                       f_Providerid,f_Specification,f_Model,f_Unit,f_Price,f_Source,f_Company,f_Dept,f_CustodyPeople,
                                       f_UseCompany,f_UseDept,f_UsePeople,f_PositionDept,f_Invoice,f_InvoiceDate,f_BuyDate,f_ScrappedDate,f_MaintenanceDate,f_UseDate,f_IsPD,f_UseWay,f_note,f_Qty,f_create_user,f_create_time,
                                       f_update_user,f_update_time,f_flag,f_printcount,f_Default_CustodyPeople,f_Default_PositionDept)
    SELECT ts.oderid+1 ,c_customid,1,ts.f_Code,ts.f_Name,0,IFNULL(lb.id,-1),-1,
           IFNULL(pd.id,-1) AS f_Providerid,f_Specification,f_model,f_unit,f_Price,f_Source,-1,IFNULL(td.id,-100),IFNULL(tu.id,-1),
           -1,-1 AS f_UseDept,-1 AS f_UsePeople,IFNULL(wz.id,-1),f_Invoice,f_InvoiceDate,f_BuyDate,f_scrappeddate,f_maintenancedate,NOW(),1,'','',1,c_userid,NOW(),
           -1,NULL,0,0,IFNULL(tu.id,-1),IFNULL(wz.id,-1)
    FROM temp_spinfo_import ts
    LEFT JOIN (SELECT  MAX(id) AS id,f_name FROM tbl_basic tb WHERE tb.f_customid = c_customid AND tb.f_type = 1 GROUP BY f_name) lb ON ts.f_typename = lb.f_name  -- 类型    1 资产类型  2供应商类型 3供应商 4存放位置  5外部联系人 
    LEFT JOIN (SELECT  MAX(id) AS id,f_name FROM tbl_basic tb WHERE tb.f_customid = c_customid AND tb.f_type = 3 GROUP BY f_name) pd ON ts.f_prodname = pd.f_name
    LEFT JOIN (SELECT  MAX(id) AS id,f_name FROM tbl_dept WHERE f_customid = c_customid GROUP BY f_name) td ON ts.f_deptname = td.f_name 
    LEFT JOIN (SELECT  MAX(id) AS id ,tu.f_no FROM tbl_user tu WHERE tu.f_customid = c_customid GROUP BY f_no) tu ON ts.f_CustodyPeople = tu.f_no
    LEFT JOIN (SELECT id,f_name FROM tbl_basic tb WHERE tb.f_customid = c_customid AND tb.f_type = 4) wz ON ts.f_PositionDept = wz.f_name
    ORDER BY ts.oderid ;
    
     
 


    SELECT id INTO c_count FROM temp_spinfo_import_two tsit WHERE tsit.f_Code = '' OR tsit.f_Code IS NULL LIMIT 0,1;
    IF IFNULL(c_count,-1) > 0 THEN  
      INSERT INTO temp_spinfo_import_return(f_state,f_errors)
      SELECT -1 AS f_state,CONCAT('第 ',c_count,'行 资产编号为空！') AS f_errors;
    END IF;
    
    SET c_count = 0;
    SELECT id INTO c_count FROM temp_spinfo_import_two tsit WHERE tsit.f_Name = '' LIMIT 0,1;
    IF IFNULL(c_count,-1) > 0 THEN  
      INSERT INTO temp_spinfo_import_return(f_state,f_errors)
      SELECT -1 AS f_state,CONCAT('第 ',c_count,'行 资产名称为空！') AS f_errors;
    END IF;

    SET c_count = 0;
    SELECT id INTO c_count FROM temp_spinfo_import_two tsit WHERE tsit.f_Typeid <=0 LIMIT 0,1;
    IF IFNULL(c_count,-1) > 0 THEN  
      INSERT INTO temp_spinfo_import_return(f_state,f_errors)
      SELECT -1 AS f_state,CONCAT('第 ',c_count,'行 资产类别匹配失败！') AS f_errors;
    END IF;

    SET c_count = 0;
    SELECT id INTO c_count FROM temp_spinfo_import_two tsit WHERE tsit.f_Dept <=0 LIMIT 0,1 ;   
    IF IFNULL(c_count,-1) > 0 THEN  
      INSERT INTO temp_spinfo_import_return(f_state,f_errors)
      SELECT -1 AS f_state,CONCAT('第 ',c_count,'行 管理部门匹配失败！') AS f_errors;
    END IF;

    SET c_count = 0;
    SELECT id INTO c_count FROM temp_spinfo_import_two tsit WHERE tsit.f_CustodyPeople <=0 LIMIT 0,1 ;   
    IF IFNULL(c_count,-1) > 0 THEN  
      INSERT INTO temp_spinfo_import_return(f_state,f_errors)
      SELECT -1 AS f_state,CONCAT('第 ',c_count,'行 管理人员匹配失败！') AS f_errors;
    END IF;

    SET c_count = 0;
    SELECT id INTO c_count FROM temp_spinfo_import_two tsit WHERE tsit.f_PositionDept <=0 LIMIT 0,1;   
    IF IFNULL(c_count,-1) > 0 THEN  
      INSERT INTO temp_spinfo_import_return(f_state,f_errors)
      SELECT -1 AS f_state,CONCAT('第 ',c_count,'行 存放位置匹配失败！') AS f_errors;
    END IF;

    SET c_count = 0;
    SELECT id INTO c_count FROM (SELECT id, tsit.f_Price REGEXP '[^0-9.]' pricetype FROM temp_spinfo_import_two tsit)a  WHERE pricetype = 1  LIMIT 0,1;  -- 判断价格
    IF IFNULL(c_count,-1) > 0 THEN  
      INSERT INTO temp_spinfo_import_return(f_state,f_errors)
      SELECT -1 AS f_state,CONCAT('第 ',c_count,'行 价格不正确！') AS f_errors;
    END IF;

    SET c_count = 0;
    SELECT id INTO c_count FROM temp_spinfo_import_two tsit WHERE f_InvoiceDate <> '' AND  DATE_FORMAT(f_InvoiceDate,'%Y%m%d') IS NULL  LIMIT 0,1 ;   
    IF IFNULL(c_count,-1) > 0 THEN  
      INSERT INTO temp_spinfo_import_return(f_state,f_errors)
      SELECT -1 AS f_state,CONCAT('第 ',c_count,'行 发票日期格错误！') AS f_errors;
    END IF;

    SET c_count = 0;
    SELECT id INTO c_count FROM temp_spinfo_import_two tsit WHERE f_BuyDate <> '' AND DATE_FORMAT(f_BuyDate,'%Y%m%d') IS NULL  LIMIT 0,1 ;   
    IF IFNULL(c_count,-1) > 0 THEN  
      INSERT INTO temp_spinfo_import_return(f_state,f_errors)
      SELECT -1 AS f_state,CONCAT('第 ',c_count,'行 购买日期格式错误！') AS f_errors;
    END IF;

    SET c_count = 0;
    SELECT id INTO c_count FROM temp_spinfo_import_two tsit WHERE f_ScrappedDate <> '' AND  DATE_FORMAT(f_ScrappedDate,'%Y%m%d') IS NULL  LIMIT 0,1 ;   
    IF IFNULL(c_count,-1) > 0 THEN  
      INSERT INTO temp_spinfo_import_return(f_state,f_errors)
      SELECT -1 AS f_state,CONCAT('第 ',c_count,'行 报废日期格错误！') AS f_errors;
    END IF;

    SET c_count = 0;
    SELECT id INTO c_count FROM temp_spinfo_import_two tsit WHERE f_MaintenanceDate <> '' AND  DATE_FORMAT(f_MaintenanceDate,'%Y%m%d') IS NULL  LIMIT 0,1 ;   
    IF IFNULL(c_count,-1) > 0 THEN  
      INSERT INTO temp_spinfo_import_return(f_state,f_errors)
      SELECT -1 AS f_state,CONCAT('第 ',c_count,'行 购买日期格错误！') AS f_errors;
    END IF;
    
    UPDATE temp_spinfo_import_two tsit SET f_InvoiceDate = NULL WHERE tsit.f_InvoiceDate = '';
    UPDATE temp_spinfo_import_two tsit SET f_BuyDate = NULL WHERE tsit.f_BuyDate = '';
    UPDATE temp_spinfo_import_two tsit SET f_ScrappedDate = NULL WHERE tsit.f_ScrappedDate = '';
    UPDATE temp_spinfo_import_two tsit SET f_MaintenanceDate = NULL WHERE tsit.f_MaintenanceDate = '';

    DELETE FROM temp_spinfo_import_two WHERE f_Code IN (SELECT f_code FROM tbl_spinfo ts where ts.f_customid = c_customid);
      
    SET c_count = 0;
    SELECT COUNT(*) INTO c_count FROM temp_spinfo_import_return tsir;
    IF c_count > 0 THEN
        SELECT * FROM temp_spinfo_import_return tsir;
    ELSE
      INSERT INTO tbl_spinfo(f_customid,f_accountid,f_code,f_name,f_status,f_typeid,f_ppid,f_providerid,f_specification,f_model,f_unit,f_price,f_source,f_company,
                             f_dept,f_custodypeople,f_usecompany,f_usepeople,f_positiondept,f_invoice,f_invoicedate,f_buydate,f_scrappeddate,f_maintenancedate,
                             f_ispd,f_note,f_qty,f_create_user,f_create_time,f_flag,f_printcount,f_default_custodypeople,f_default_positiondept)
      SELECT c_customid,1,f_Code,f_name,f_Status,f_Typeid,f_ppid,f_Providerid,f_Specification,f_Model,f_Unit,f_Price,f_Source,f_Company,
             f_Dept,f_CustodyPeople,-1,-1,f_PositionDept,f_Invoice,f_InvoiceDate,f_BuyDate,f_ScrappedDate,f_MaintenanceDate,
             f_IsPD,f_note,f_Qty,f_create_user,f_create_time,f_flag,f_printcount,f_Default_CustodyPeople,f_Default_PositionDept
      FROM temp_spinfo_import_two;


      -- 插入操作流水
      INSERT INTO tbl_spinfo_water(f_customid,f_type,f_spid,f_billid,f_billno,f_opruserid,f_memo,f_create_time)
      SELECT 0,0,ts.id,-1,'',c_userid,'资产登记',NOW() FROM tbl_spinfo ts where ts.f_customid =c_customid AND ts.f_flag = 0;

      SELECT 1 AS f_state,'导入成功！' AS f_errors;
    END IF;

  
    DROP TEMPORARY TABLE temp_spinfo_import_return;

END
$$ DELIMITER;

-- 树形表查询
DROP PROCEDURE IF EXISTS Msp_Data_Parent_Child;  
DELIMITER $$
-- 查一个父级下的所有子级
CREATE PROCEDURE Msp_Data_Parent_Child(
  IN   c_type     int,   -- 0部门 1类别 2供应商类型  4存放地点 5供应商+类型树形结构 6部门不返回默认部门
  IN   c_parentid varchar(30),   -- 父ID
  IN   c_userid   int,   -- 用户ID
  OUT  c_outid    text ) -- 条件
label:BEGIN 
 
    DECLARE c_l int;
    DECLARE c_customid int;
    DECLARE C_rolealldept int;  -- 是否存在可操作所有部门角色
    DECLARE c_admin  int; -- 是否是超管理员用户
   
    SELECT tu.f_customid INTO c_customid FROM tbl_user tu WHERE ID = c_userid;

    IF EXISTS(SELECT id FROM tbl_role tr WHERE ID IN (SELECT tru.f_roleid FROM tbl_role_user tru WHERE tru.f_userid = c_userid) AND f_DeptType = 1) THEN
      SET C_rolealldept = 1;
    ELSE 
      SET C_rolealldept = 0;
    END IF;
    
    drop table if exists temp_list;
    drop table if exists temp_list2;
 
 
    
    CREATE temporary TABLE if not exists temp_list(id VARCHAR(30),Parent_Id varchar(30),f_name varchar(100), level int ,AllParent_id varchar (200),parent1_id varchar(30),parent2_id varchar(30),parent3_id varchar(30));
    CREATE temporary TABLE if not exists temp_list2(id VARCHAR(30),Parent_Id varchar(30),f_name varchar(100), level int ,AllParent_id varchar (200),parent1_id varchar(30),parent2_id varchar(30),parent3_id varchar(30));
    CREATE temporary TABLE if not exists temporary_temp_pro_id(id VARCHAR(30),parent1_id varchar(30),parent2_id varchar(30),parent3_id varchar(30),level int);

    set c_l = 0;

    IF EXISTS(SELECT * FROM tbl_role tr INNER JOIN (SELECT tru.f_roleid AS id FROM tbl_role_user tru WHERE tru.f_userid = c_userid) b ON tr.id= b.id WHERE tr.f_admin = 1) THEN
      SET c_admin = 1;
    ELSE
      SET c_admin = 0;
    END IF;

    IF c_type IN(0,6,7) THEN  -- 部门
 
    	INSERT temp_list SELECT id,f_parentid,f_name,c_l,CONCAT(';',cast(id AS CHAR),'&'),cast(id AS CHAR),'','' from tbl_dept WHERE IFNULL(f_parentid,0)=0 AND f_flag = 0 AND f_customid = c_customid  ORDER BY f_ordid;    
          	
      WHILE row_count() >0  DO  -- 判断INSErt行数
   
    		SET c_l=c_l+1;
        DELETE FROM temp_list2;
        INSERT INTO temp_list2 SELECT * FROM temp_list tl;
  
    		IF c_l=1 then
    		  	INSERT temp_list SELECT a.id, a.f_parentid, a.f_name, c_l, CONCAT(b.allParent_id,';',cast(a.id AS CHAR),'&'), b.parent1_id,a.id,'' 
    		  	FROM tbl_dept  a,temp_list2 b WHERE a.f_parentid=b.id and b.LEVEL=c_l-1 AND f_flag = 0 AND f_customid = c_customid  ORDER BY f_ordid; 
    		ELSE 
    			  insert temp_list select a.id,a.f_parentid,a.f_name,c_l,CONCAT(b.allParent_id,';',cast(a.id AS CHAR),'&'),b.parent1_id,b.parent2_id,a.id 
    			  from tbl_dept a,temp_list2 b WHERE a.f_parentid=b.id and b.level=c_l-1 AND f_flag = 0 AND f_customid = c_customid  ORDER BY f_ordid;
        END IF ;
    	END WHILE;
 
    END IF; 
      
    IF c_type IN(1,2,3,4) THEN  -- 1类别 2供应商类别 4 存放地点
    	INSERT temp_list SELECT id,f_parentid,f_name,c_l,CONCAT(';',cast(id AS CHAR),'&'),cast(id AS CHAR),'','' 
      from tbl_basic tb WHERE f_customid = c_customid  AND f_type = c_type and   IFNULL(f_parentid,0)=0 AND tb.f_flag = 0 ORDER BY tb.f_order ;    
          	
      WHILE row_count() >0  DO  -- 判断INSErt行数
   
    		SET c_l=c_l+1;
        DELETE FROM temp_list2;
        INSERT INTO temp_list2 SELECT * FROM temp_list tl;
  
    		IF c_l=1 then
    		  	INSERT temp_list SELECT a.id, a.f_parentid, a.f_name, c_l, CONCAT(b.allParent_id,';',cast(a.id AS CHAR),'&'), b.parent1_id,a.id,'' 
    		  	FROM tbl_basic  a,temp_list2 b WHERE  a.f_customid = c_customid  AND a.f_type = c_type AND a.f_parentid=b.id and b.LEVEL=c_l-1 AND a.f_flag = 0 ORDER BY a.f_order ;
    		ELSE 
    			  insert temp_list select a.id,a.f_parentid,a.f_name,c_l,CONCAT(b.allParent_id,';',cast(a.id AS CHAR),'&'),b.parent1_id,b.parent2_id,a.id 
    			  from tbl_basic a,temp_list2 b WHERE  a.f_customid = c_customid  AND a.f_type = c_type AND a.f_parentid=b.id and b.level=c_l-1 AND a.f_flag = 0 ORDER BY a.f_order ;
        END IF ;
    	END WHILE;


    END IF; 

    IF c_type = 5 THEN  -- 1类别 2供应商类别 4 存放地点
      DELETE FROM temp_list;
    	INSERT temp_list SELECT id,f_parentid,f_name,c_l,CONCAT(';',cast(id AS CHAR),'&'),cast(id AS CHAR),'','' 
      from tbl_basic tb WHERE  f_customid = c_customid  AND f_type = 2 and   IFNULL(f_parentid,0)=0 AND tb.f_flag = 0 ORDER BY tb.f_order ;    
        
       	
      WHILE row_count() >0  DO  -- 判断INSErt行数
   
    		SET c_l=c_l+1;
        DELETE FROM temp_list2;
        INSERT INTO temp_list2 SELECT * FROM temp_list tl;
  
    		IF c_l=1 then
    		  	INSERT temp_list SELECT a.id, a.f_parentid, a.f_name, c_l, CONCAT(b.allParent_id,';',cast(a.id AS CHAR),'&'), b.parent1_id,a.id,'' 
    		  	FROM tbl_basic  a,temp_list2 b WHERE  f_customid = c_customid  AND  a.f_type = 2 AND a.f_parentid=b.id and b.LEVEL=c_l-1 AND a.f_flag = 0 ORDER BY a.f_order ;
    		ELSE 
    			  insert temp_list select a.id,a.f_parentid,a.f_name,c_l,CONCAT(b.allParent_id,';',cast(a.id AS CHAR),'&'),b.parent1_id,b.parent2_id,a.id 
    			  from tbl_basic a,temp_list2 b WHERE  f_customid = c_customid  AND a.f_type = 2 AND a.f_parentid=b.id and b.level=c_l-1 AND a.f_flag = 0 ORDER BY a.f_order ;
        END IF ;
    	END WHILE;


    END IF; 

  

    IF c_type IN (0,6) THEN
  
   
        IF C_rolealldept = 0 THEN  -- 角色中配有可操作部门         
          SELECT    GROUP_CONCAT(td.id) INTO c_outid FROM tbl_dept td           
          INNER JOIN (SELECT id FROM temp_list WHERE parent1_id = c_parentid OR parent2_id = c_parentid OR parent3_id = c_parentid GROUP BY id) c ON td.id = c.id
          WHERE td.f_customid =c_customid  AND (td.id IN (SELECT f_deptid FROM tbl_role_deptid WHERE f_roleid IN (SELECT tru.f_roleid FROM tbl_role_user tru WHERE tru.f_userid = c_userid) GROUP BY f_deptid)  OR c_admin = 1);
        ELSE  -- 角色是可以操作所有部门
          SELECT GROUP_CONCAT(td.id) INTO c_outid    FROM tbl_dept td          
          INNER JOIN (SELECT id FROM temp_list WHERE parent1_id = c_parentid OR parent2_id = c_parentid OR parent3_id = c_parentid GROUP BY id) c ON td.id = c.id
          WHERE td.f_customid = c_customid;
        end IF;
 
      
        IF (IFNULL(c_outid,'') ='') AND (c_type = 0) THEN
            SELECT tu.f_deptno INTO c_outid FROM tbl_user tu WHERE id = c_userid;
        END IF;
          
    END IF;

    drop temporary table temp_list; 
    DROP TEMPORARY TABLE temp_list2;
 
  
END
$$  
DELIMITER ; 

DROP PROCEDURE IF EXISTS schema_index_create;  
-- 增加索引存储过程
DELIMITER $$
CREATE PROCEDURE schema_index_create() BEGIN 
		DECLARE  CurrentDatabase VARCHAR(100);
		SELECT DATABASE() INTO CurrentDatabase;

		-- tbl_basic 表
		IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_basic' AND index_name = 'index_tbl_basic_f_accountid') THEN  
				ALTER TABLE `tbl_basic` ADD INDEX index_tbl_basic_f_accountid ( `f_accountid` );
		END IF; 

		IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_basic' AND index_name = 'index_tbl_basic_f_type') THEN  
				ALTER TABLE `tbl_basic` ADD INDEX index_tbl_basic_f_type ( `f_type` );
		END IF; 

		IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_basic' AND index_name = 'index_tbl_basic_f_status') THEN  
				ALTER TABLE `tbl_basic` ADD INDEX index_tbl_basic_f_status ( `f_status` );
		END IF; 

		IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_basic' AND index_name = 'index_tbl_basic_f_no') THEN  
				ALTER TABLE `tbl_basic` ADD INDEX index_tbl_basic_f_no ( `f_no` );
		END IF; 
		IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_basic' AND index_name = 'index_tbl_basic_f_flag') THEN  
				ALTER TABLE `tbl_basic` ADD INDEX index_tbl_basic_f_flag ( `f_flag` );
		END IF; 

		-- tbl_dept 表
		IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_dept' AND index_name = 'index_tbl_dept_f_accountid') THEN  
				ALTER TABLE `tbl_dept` ADD INDEX index_tbl_dept_f_accountid ( `f_accountid` );
		END IF; 
		IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_dept' AND index_name = 'index_tbl_dept_f_status') THEN  
				ALTER TABLE `tbl_dept` ADD INDEX index_tbl_dept_f_status ( `f_status` );
		END IF; 
		IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_dept' AND index_name = 'index_tbl_dept_f_flag') THEN  
				ALTER TABLE `tbl_dept` ADD INDEX index_tbl_dept_f_flag ( `f_flag` );
		END IF; 

		-- tbl_menu 表
		IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_menu' AND index_name = 'index_tbl_menu_f_accountid') THEN  
				ALTER TABLE `tbl_menu` ADD INDEX index_tbl_menu_f_accountid ( `f_accountid` );
		END IF; 
		IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_menu' AND index_name = 'index_tbl_menu_f_status') THEN  
				ALTER TABLE `tbl_menu` ADD INDEX index_tbl_menu_f_status ( `f_status` );
		END IF; 
		IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_menu' AND index_name = 'index_tbl_menu_f_flag') THEN  
				ALTER TABLE `tbl_menu` ADD INDEX index_tbl_menu_f_flag ( `f_flag` );
		END IF; 
		IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_menu' AND index_name = 'index_tbl_menu_f_qxid') THEN  
				ALTER TABLE `tbl_menu` ADD INDEX index_tbl_menu_f_qxid ( `f_qxid` );
		END IF; 

		-- tbl_perms 表
		IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_perms' AND index_name = 'index_tbl_perms_f_accountid') THEN  
				ALTER TABLE `tbl_perms` ADD INDEX index_tbl_perms_f_accountid ( `f_accountid` );
		END IF; 
		IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_perms' AND index_name = 'index_tbl_perms_f_status') THEN  
				ALTER TABLE `tbl_perms` ADD INDEX index_tbl_perms_f_status ( `f_status` );
		END IF; 
		IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_perms' AND index_name = 'index_tbl_perms_f_flag') THEN  
				ALTER TABLE `tbl_perms` ADD INDEX index_tbl_perms_f_flag ( `f_flag` );
		END IF; 
		IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_perms' AND index_name = 'index_tbl_perms_f_menu_id') THEN  
				ALTER TABLE `tbl_perms` ADD INDEX index_tbl_perms_f_menu_id ( `f_menu_id` );
		END IF; 
		IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_perms' AND index_name = 'index_tbl_perms_f_qxid') THEN  
				ALTER TABLE `tbl_perms` ADD INDEX index_tbl_perms_f_qxid ( `f_qxid` );
		END IF; 
 
    -- tbl_role_data_perms
		IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_role_data_perms' AND index_name = 'index_tbl_role_data_perms_f_roleid') THEN  
				ALTER TABLE `tbl_role_data_perms` ADD INDEX index_tbl_role_data_perms_f_roleid ( `f_roleid` );
		END IF; 		
		IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_role_data_perms' AND index_name = 'index_tbl_role_data_perms_f_accountid') THEN  
				ALTER TABLE `tbl_role_data_perms` ADD INDEX index_tbl_role_data_perms_f_accountid( `f_accountid` );
		END IF; 		

		-- tbl_role_user
--  		IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_role_user' AND index_name = 'index_tbl_role_user_f_roleid') THEN  
-- 				ALTER TABLE `tbl_role_user` ADD INDEX index_tbl_role_user_f_roleid ( `f_roleid` );
-- 		END IF; 		
		IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_role_user' AND index_name = 'index_tbl_role_user_f_accountid') THEN  
				ALTER TABLE `tbl_role_user` ADD INDEX index_tbl_role_user_f_accountid( `f_accountid` );
		END IF; 
		IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_role_user' AND index_name = 'index_tbl_role_user_f_userid') THEN  
				ALTER TABLE `tbl_role_user` ADD INDEX index_tbl_role_user_f_userid( f_userid );
		END IF; 
		
		-- tbl_user
		IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_user' AND index_name = 'index_tbl_user_f_accountid') THEN  
				ALTER TABLE `tbl_user` ADD INDEX index_tbl_user_f_accountid ( `f_accountid` );
		END IF; 
		IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_user' AND index_name = 'index_tbl_user_f_status') THEN  
				ALTER TABLE `tbl_user` ADD INDEX index_tbl_user_f_status ( `f_status` );
		END IF; 
		IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_user' AND index_name = 'index_tbl_user_f_flag') THEN  
				ALTER TABLE `tbl_user` ADD INDEX index_tbl_user_f_flag ( `f_flag` );
		END IF; 
		IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_user' AND index_name = 'index_tbl_user_f_type') THEN  
				ALTER TABLE `tbl_user` ADD INDEX index_tbl_user_f_type ( `f_type` );
		END IF; 

		-- tbl_Receive_Apply_Main
		IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_Receive_Apply_Main' AND index_name = 'index_tbl_Receive_Apply_Main_f_serno') THEN  
				ALTER TABLE `tbl_Receive_Apply_Main` ADD UNIQUE index_tbl_Receive_Apply_Main_f_serno ( `f_serno` );
		END IF; 
		IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_Receive_Apply_Main' AND index_name = 'index_tbl_Receive_Apply_Main_f_re_deptid') THEN  
				ALTER TABLE `tbl_Receive_Apply_Main` ADD INDEX index_tbl_Receive_Apply_Main_f_re_deptid ( f_re_deptid );
		END IF; 
		IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_Receive_Apply_Main' AND index_name = 'index_tbl_Receive_Apply_Main_f_create_time') THEN  
				ALTER TABLE `tbl_Receive_Apply_Main` ADD INDEX index_tbl_Receive_Apply_Main_f_create_time ( `f_create_time` );
		END IF; 
		IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_Receive_Apply_Main' AND index_name = 'index_tbl_Receive_Apply_Main_f_create_user') THEN  
				ALTER TABLE `tbl_Receive_Apply_Main` ADD INDEX index_tbl_Receive_Apply_Main_f_create_user ( `f_create_user` );
		END IF; 
		IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_Receive_Apply_Main' AND index_name = 'index_tbl_Receive_Apply_Main_f_status') THEN  
				ALTER TABLE `tbl_Receive_Apply_Main` ADD INDEX index_tbl_Receive_Apply_Main_f_status ( `f_status` );
		END IF; 
		IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_Receive_Apply_Main' AND index_name = 'index_tbl_Receive_Apply_Main_f_re_userid') THEN  
				ALTER TABLE `tbl_Receive_Apply_Main` ADD INDEX index_tbl_Receive_Apply_Main_f_re_userid ( f_re_userid );
		END IF; 	

		-- tbl_Receive_Apply_Detail
		IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_Receive_Apply_Detail' AND index_name = 'index_tbl_Receive_Apply_Detail_f_mid') THEN  
				ALTER TABLE `tbl_Receive_Apply_Detail` ADD INDEX index_tbl_Receive_Apply_Detail_f_mid ( `f_mid` );
		END IF; 
 
 		-- tbl_spinfo
		IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_spinfo' AND index_name = 'index_tbl_spinfo_f_Code') THEN  
				ALTER TABLE `tbl_spinfo` ADD UNIQUE index_tbl_spinfo_f_Code ( `f_Code` );
		END IF; 
		IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_spinfo' AND index_name = 'index_tbl_spinfo_f_Typeid') THEN  
				ALTER TABLE `tbl_spinfo` ADD INDEX index_tbl_spinfo_f_Typeid ( `f_Typeid` );
		END IF; 
		IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_spinfo' AND index_name = 'index_tbl_spinfo_f_Status') THEN  
				ALTER TABLE `tbl_spinfo` ADD INDEX index_tbl_spinfo_f_Status ( `f_Status` );
		END IF; 
		IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_spinfo' AND index_name = 'index_tbl_spinfo_f_UseDept') THEN  
				ALTER TABLE `tbl_spinfo` ADD INDEX index_tbl_spinfo_f_UseDept ( `f_UseDept` );
		END IF; 
-- 		IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_spinfo' AND index_name = 'index_tbl_spinfo_f_UsePeople') THEN  
-- 				ALTER TABLE `tbl_spinfo` ADD INDEX index_tbl_spinfo_People ( `f_People` );
-- 		END IF; 
		IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_spinfo' AND index_name = 'index_tbl_spinfo_f_PositionDept') THEN  
				ALTER TABLE `tbl_spinfo` ADD INDEX index_tbl_spinfo_f_PositionDept ( `f_PositionDept` );
		END IF; 

		IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_sys_dictionary' AND index_name = 'index_tbl_sys_dictionary_f_id') THEN  
				ALTER TABLE `tbl_sys_dictionary` ADD INDEX index_tbl_sys_dictionary_f_id ( `f_id` );
		END IF; 

    -- 表 tbl_billstream 单据流水表

		IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_billstream' AND index_name = 'index_tbl_billstream_f_type') THEN  
				ALTER TABLE `tbl_billstream` ADD INDEX index_tbl_billstream_f_type ( `f_type` );
		END IF; 
		IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_billstream' AND index_name = 'index_tbl_billstream_f_busid') THEN  
				ALTER TABLE `tbl_billstream` ADD INDEX index_tbl_billstream_f_busid ( `f_busid` );
		END IF; 

    -- tbl_receive_main 领用表
		IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_receive_main' AND index_name = 'index_tbl_receive_main_f_serno') THEN  
				ALTER TABLE `tbl_receive_main` ADD UNIQUE index_tbl_receive_main_f_serno ( `f_serno` );
		END IF; 
		IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_receive_main' AND index_name = 'index_tbl_receive_main_f_re_deptid') THEN  
				ALTER TABLE `tbl_receive_main` ADD INDEX index_tbl_receive_main_f_re_deptid ( f_re_deptid );
		END IF; 
		IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_receive_main' AND index_name = 'index_tbl_receive_main_f_create_time') THEN  
				ALTER TABLE `tbl_receive_main` ADD INDEX index_tbl_receive_main_f_create_time ( `f_create_time` );
		END IF; 
		IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_receive_main' AND index_name = 'index_tbl_receive_main_f_create_user') THEN  
				ALTER TABLE `tbl_receive_main` ADD INDEX index_tbl_receive_main_f_create_user ( `f_create_user` );
		END IF; 
		IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_receive_main' AND index_name = 'index_tbl_receive_main_f_status') THEN  
				ALTER TABLE `tbl_receive_main` ADD INDEX index_tbl_receive_main_f_status ( `f_status` );
		END IF; 
		IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_receive_main' AND index_name = 'index_tbl_receive_main_f_re_userid') THEN  
				ALTER TABLE `tbl_receive_main` ADD INDEX index_tbl_receive_main_f_re_userid ( f_re_userid );
		END IF; 	

    -- tbl_receive_detail
		IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_receive_detail' AND index_name = 'index_tbl_receive_detail_f_mid') THEN  
				ALTER TABLE `tbl_receive_detail` ADD INDEX index_tbl_receive_detail_f_mid ( `f_id` );
		END IF; 

    -- tbl_sys_dictionary
		IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_sys_dictionary' AND index_name = 'index_tbl_sys_dictionary_f_id') THEN  
				ALTER TABLE `tbl_sys_dictionary` ADD INDEX index_tbl_sys_dictionary_f_id ( `f_status` );
		END IF; 
		IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_sys_dictionary' AND index_name = 'index_tbl_sys_dictionary_f_type') THEN  
				ALTER TABLE `tbl_sys_dictionary` ADD INDEX index_tbl_sys_dictionary_f_type ( `f_type` );
		END IF; 


  
  	IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_billstream' AND index_name = 'index_tbl_billstream_f_customid') THEN  
				ALTER TABLE tbl_billstream ADD INDEX index_tbl_billstream_f_customid ( `f_customid` );
		END IF; 
  	IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_dept' AND index_name = 'index_tbl_dept_f_customid') THEN  
				ALTER TABLE tbl_dept ADD INDEX index_tbl_dept_f_customid ( `f_customid` );
		END IF; 
  	IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_dictionary' AND index_name = 'index_tbl_dictionary_f_customid') THEN  
				ALTER TABLE tbl_dictionary ADD INDEX index_tbl_dictionary_f_customid ( `f_customid` );
		END IF; 
  	IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_receive_apply_main' AND index_name = 'index_tbl_receive_apply_main_f_customid') THEN  
				ALTER TABLE tbl_receive_apply_main ADD INDEX index_tbl_receive_apply_main_f_customid ( `f_customid` );
		END IF; 
  	IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_receive_main' AND index_name = 'index_tbl_receive_main_f_customid') THEN  
				ALTER TABLE tbl_receive_main ADD INDEX index_tbl_receive_main_f_customid ( `f_customid` );
		END IF; 
  	IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_role' AND index_name = 'index_tbl_role_f_customid') THEN  
				ALTER TABLE tbl_role ADD INDEX index_tbl_role_f_customid ( `f_customid` );
		END IF; 
  	IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_role_deptid' AND index_name = 'index_tbl_role_deptid_f_customid') THEN  
				ALTER TABLE tbl_role_deptid ADD INDEX index_tbl_role_deptid_f_customid ( `f_customid` );
		END IF; 
  	IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_role_type' AND index_name = 'index_tbl_role_type_f_customid') THEN  
				ALTER TABLE tbl_role_type ADD INDEX index_tbl_role_type_f_customid ( `f_customid` );
		END IF; 
  	IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_role_user' AND index_name = 'index_tbl_role_user_f_customid') THEN  
				ALTER TABLE tbl_role_user ADD INDEX index_tbl_role_user_f_customid ( `f_customid` );
		END IF; 
  	IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_spinfo' AND index_name = 'index_tbl_spinfo_f_customid') THEN  
				ALTER TABLE tbl_spinfo ADD INDEX index_tbl_spinfo_f_customid ( `f_customid` );
		END IF; 
  	IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_spinfo_pic' AND index_name = 'index_tbl_spinfo_pic_f_customid') THEN  
				ALTER TABLE tbl_spinfo_pic ADD INDEX index_tbl_spinfo_pic_f_customid ( `f_customid` );
		END IF; 
    	IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_sys_dictionary' AND index_name = 'index_tbl_sys_dictionary_f_customid') THEN  
				ALTER TABLE tbl_sys_dictionary ADD INDEX index_tbl_sys_dictionary_f_customid ( `f_customid` );
		END IF; 
  	IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_system' AND index_name = 'index_tbl_system_f_customid') THEN  
				ALTER TABLE tbl_system ADD INDEX index_tbl_system_f_customid ( `f_customid` );
		END IF; 
  	IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_token' AND index_name = 'index_tbl_token_f_customid') THEN  
				ALTER TABLE tbl_token ADD INDEX index_tbl_token_f_customid ( `f_customid` );
		END IF; 
  	IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_user' AND index_name = 'index_tbl_user_f_customid') THEN  
				ALTER TABLE tbl_user ADD INDEX index_tbl_user_f_customid ( `f_customid` );
		END IF; 


  	IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_provider_Type' AND index_name = 'index_tbl_provider_Type_f_customid') THEN  
				ALTER TABLE tbl_provider_Type ADD INDEX index_tbl_provider_Type_f_customid ( `f_customid` );
		END IF; 
  	IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_provider_Type' AND index_name = 'index_tbl_provider_Type_f_proid') THEN  
				ALTER TABLE tbl_provider_Type ADD INDEX index_tbl_provider_Type_f_proid ( `f_proid` );
		END IF; 


  	IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_receive_apply_detail' AND index_name = 'index_tbl_receive_apply_detail_f_flag') THEN  
				ALTER TABLE tbl_receive_apply_detail ADD INDEX index_tbl_receive_apply_detail_f_flag ( `f_flag` );
		END IF; 
  	IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_receive_apply_main' AND index_name = 'index_tbl_receive_apply_main_f_flag') THEN  
				ALTER TABLE tbl_receive_apply_main ADD INDEX index_tbl_receive_apply_main_f_flag ( `f_flag` );
		END IF; 
  	IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_receive_detail' AND index_name = 'index_tbl_receive_detail_f_flag') THEN  
				ALTER TABLE tbl_receive_detail ADD INDEX index_tbl_receive_detail_f_flag ( `f_flag` );
		END IF; 
  	IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_receive_main' AND index_name = 'index_tbl_receive_main_f_flag') THEN  
				ALTER TABLE tbl_receive_main ADD INDEX index_tbl_receive_main_f_flag ( `f_flag` );
		END IF; 
  	IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_return_detail' AND index_name = 'index_tbl_return_detail_f_flag') THEN  
				ALTER TABLE tbl_return_detail ADD INDEX index_tbl_return_detail_f_flag ( `f_flag` );
		END IF; 
  	IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_return_detail' AND index_name = 'index_tbl_return_detail_f_mid') THEN  
				ALTER TABLE tbl_return_detail ADD INDEX index_tbl_return_detail_f_mid ( `f_mid` );
		END IF; 
  	IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_return_main' AND index_name = 'index_tbl_return_main_f_customid') THEN  
				ALTER TABLE tbl_return_main ADD INDEX index_tbl_return_main_f_customid ( `f_customid` );
		END IF; 
  	IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_return_main' AND index_name = 'index_tbl_return_main_f_status') THEN  
				ALTER TABLE tbl_return_main ADD INDEX index_tbl_return_main_f_status ( `f_status` );
		END IF; 
  	IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_return_main' AND index_name = 'index_tbl_return_main_f_create_time') THEN  
				ALTER TABLE tbl_return_main ADD INDEX index_tbl_return_main_f_create_time ( `f_create_time` );
		END IF; 
  	IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_return_main' AND index_name = 'index_tbl_return_main_f_deptid') THEN  
				ALTER TABLE tbl_return_main ADD INDEX index_tbl_return_main_f_deptid ( `f_deptid` );
		END IF; 

    IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_position' AND index_name = 'IDX_tbl_position_f_customid') THEN  
    		ALTER TABLE tbl_position ADD INDEX IDX_tbl_position_f_customid (f_customid);
    END IF; 
    
    IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_position' AND index_name = 'IDX_tbl_position_Status_Flag') THEN  
    		ALTER TABLE tbl_position ADD INDEX IDX_tbl_position_Status_Flag (f_status, f_flag);
    END IF; 


    IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_scrapped_main' AND index_name = 'UK_tbl_scrapped_main_customdate') THEN  
    		ALTER TABLE tbl_scrapped_main ADD  INDEX UK_tbl_scrapped_main_customdate (f_customid, f_create_time);
    END IF; 

    IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_scrapped_main' AND index_name = 'UK_tbl_scrapped_main_f_deptid') THEN  
    		ALTER TABLE tbl_scrapped_main ADD INDEX UK_tbl_scrapped_main_f_deptid (f_deptid, f_status);
    END IF; 

    IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_scrapped_main' AND index_name = 'IDX_tbl_scrapped_main_f_audit') THEN  
    		ALTER TABLE tbl_scrapped_main ADD INDEX IDX_tbl_scrapped_main_f_audit (f_audit);
    END IF;  

    IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_scrapped_detail' AND index_name = 'UK_tbl_scrapped_detail_mid') THEN  
    		ALTER TABLE tbl_scrapped_detail ADD INDEX UK_tbl_scrapped_detail_mid (f_customid, f_mid);
    END IF; 

    IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_repair_main' AND index_name = 'IDX_tbl_repair_main_customid') THEN  
    		ALTER TABLE tbl_repair_main ADD INDEX IDX_tbl_repair_main_customid (f_customid, f_create_time);
    END IF; 

    IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_repair_main' AND index_name = 'IDX_tbl_repair_main_f_audit') THEN  
    		ALTER TABLE tbl_repair_main  ADD INDEX IDX_tbl_repair_main_f_audit (f_audit);
    END IF; 

    IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_repair_main' AND index_name = 'UK_tbl_repair_main_state') THEN  
    		ALTER TABLE tbl_repair_main ADD INDEX UK_tbl_repair_main_state (f_create_time, f_status);
    END IF; 

    IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_repair_detail' AND index_name = 'IDX_tbl_repair_detail_f_mid') THEN  
    		 ALTER TABLE tbl_repair_detail ADD INDEX IDX_tbl_repair_detail_f_mid (f_mid);
    END IF; 

    IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_bus_audit_plant' AND index_name = 'IDX_tbl_bus_audit_plant_busid') THEN  
    		 ALTER TABLE tbl_bus_audit_plant  ADD INDEX IDX_tbl_bus_audit_plant_busid (f_customid, f_busid,f_mid);
    END IF; 
    IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_bus_audit_plant' AND index_name = 'IDX_tbl_bus_audit_plant_valtype') THEN  
    		 ALTER TABLE tbl_bus_audit_plant ADD INDEX IDX_tbl_bus_audit_plant_valtype (f_AuditLevel, f_valtype);
    END IF; 
    IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_User_audit_stream' AND index_name = 'tbl_User_audit_stream_busid') THEN  
    		 ALTER TABLE tbl_User_audit_stream ADD INDEX tbl_User_audit_stream_busid (f_customid, f_userid,f_busid);
    END IF; 
    IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_User_audit_stream' AND index_name = 'tbl_User_audit_stream_mid') THEN  
    		 ALTER TABLE tbl_User_audit_stream ADD INDEX tbl_User_audit_stream_mid (f_mid);
    END IF; 

    IF NOT EXISTS (SELECT * FROM information_schema.statistics WHERE table_schema=CurrentDatabase AND table_name = 'tbl_receive_apply_main' AND index_name = 'tbl_receive_apply_main_isaudit') THEN  
    		 ALTER TABLE tbl_receive_apply_main ADD INDEX  tbl_receive_apply_main_isaudit (f_isaudit);
    END IF; 
END 
$$  
DELIMITER ;  
CALL schema_index_create();


-- 商品资料查询
DROP PROCEDURE IF EXISTS msp_spinfo_query;  
DELIMITER $$
CREATE PROCEDURE msp_spinfo_query(
  IN c_userid  int,
  IN c_w_value varchar(100),
  IN c_curPage int,
  IN c_pageSize int,
  IN c_GJWhere varchar(1000),
  IN c_order   varchar(1000)) 
label:BEGIN 
    DECLARE S_WHERE varchar(1000);
    DECLARE pagebid int;
    DECLARE s_count int;
    DECLARE s_customid int;
    
    drop TEMPORARY TABLE IF EXISTS temp_spinfo;
    DROP TEMPORARY TABLE IF EXISTS temp_count;
    CREATE TEMPORARY TABLE if not exists temp_spinfo(oderid int auto_increment PRIMARY KEY,id int);
    CREATE TEMPORARY TABLE if not exists temp_count(codecount int);
    
    SELECT tu.f_customid INTO s_customid FROM tbl_user tu WHERE id = c_userid;
    SET pagebid = (c_curPage-1)*c_pageSize;
   -- SET S_WHERE = '';
    SET S_WHERE = CONCAT(' where ts.f_customid =',s_customid,' and ts.f_flag = 0 ');
    IF c_w_value <> '' THEN 
       SET S_WHERE = CONCAT(S_WHERE,'  and ts.f_code = ''',c_w_value,''' or  TS.F_name LIKE ''%',c_w_value,'%''');
    END IF;

    IF c_GJWhere <> '' THEN
      SET S_WHERE = CONCAT(S_WHERE,c_GJWhere);
    END IF;
    
 
    
    IF c_order <> '' THEN
      SET S_WHERE = CONCAT(S_WHERE,' order by ts.',c_order);
    END IF;
  
 
    SET @S_SQL = CONCAT(' INSERT INTO temp_count(codecount) SELECT count(id)   FROM tbl_spinfo ts ',IFNULL(S_WHERE,'') );
        
--     SELECT @S_SQL;
--   LEAVE label;   

    PREPARE stmt FROM  @S_SQL;  
    ## 执行SQL语句
    EXECUTE stmt;  
    ## 释放掉预处理段
    deallocate prepare stmt;

    SET @S_SQL1 = CONCAT('  INSERT INTO temp_spinfo(id) SELECT id FROM tbl_spinfo ts ',IFNULL(S_WHERE,''),' limit ',pagebid,',',c_pageSize);

--     SELECT @S_SQL1;
--     LEAVE label;
--     
    PREPARE stmt FROM  @S_SQL1;  
    ## 执行SQL语句
    EXECUTE stmt;  
    ## 释放掉预处理段
    deallocate prepare stmt;

 
    SELECT a.id,a.f_accountid,a.f_Code,a.f_Name,a.f_Status,a.f_Typeid,a.f_PPID,a.f_Providerid,a.f_Specification,a.f_Model,a.f_Unit,a.f_Price,a.f_Source,a.f_Company,
           a.f_Dept,a.f_CustodyPeople,a.f_UseCompany,a.f_UseDept,a.f_UsePeople,a.f_PositionDept,a.f_Invoice,DATE_FORMAT( a.f_InvoiceDate,'%Y-%m-%d') AS f_InvoiceDate,DATE_FORMAT(f_BuyDate,'%Y-%m-%d')AS f_BuyDate,DATE_FORMAT(a.f_ScrappedDate,'%Y-%m-%d') AS f_ScrappedDate,
           DATE_FORMAT(a.f_MaintenanceDate,'%Y-%m-%d') AS f_MaintenanceDate,
           a.f_UseDate,a.f_IsPD,a.f_UseWay,a.f_note,a.f_Qty,a.f_create_user,a.f_create_time,a.f_update_user,a.f_update_time,a.f_flag,a.f_delete_user,a.f_delete_time,
           pp.f_name AS PPName, pro.f_name AS ProviderName,comp.f_name AS f_CompanyName,dept.f_name AS f_DeptName,cp.f_name AS f_CustodyPeopleName, usd.f_name AS f_UseCompanyName,
           usdd.f_name AS f_UseDeptName,(CASE a.f_Status WHEN  2 THEN  (CASE f_lend_type WHEN 0 THEN usp.f_name WHEN 1 THEN CONCAT('外-',tw.f_name) WHEN 2 THEN CONCAT('供-',tp.f_name) ELSE '' END)  ELSE  usp.f_name END) AS f_UsePeopleName,
           usc.f_name AS f_Create_UserName,usu.f_name AS f_Update_UserName,
           (CASE a.f_status WHEN -1 THEN '报废' WHEN 0 THEN  '闲置' WHEN 1 THEN '领用' WHEN 2 THEN '借用' WHEN 3 THEN '处置' WHEN 4 THEN '维修中' ELSE '' END) AS f_StatusName,co.codecount,potion.f_name AS f_PositionDeptName,
           a.f_printcount ,PIC.f_PicName,a.f_Default_CustodyPeople,a.f_Default_PositionDept,lb.f_name AS TypeName,a.f_usecount
    FROM tbl_spinfo  a 
    INNER JOIN temp_spinfo b ON a.id = b.id  
    INNER JOIN tbl_basic lb ON a.f_typeid = lb.id AND lb.f_type = 1
    LEFT JOIN tbl_basic pp ON a.f_ppid =pp.id  AND pp.f_type =2
    LEFT JOIN tbl_basic pro ON a.f_providerid = pro.id   AND pro.f_type =3
    LEFT JOIN tbl_dept comp ON a.f_company = comp.id
    LEFT JOIN tbl_dept dept ON a.f_dept = dept.id
    LEFT JOIN tbl_user cp ON a.f_custodypeople = cp.id
    LEFT JOIN tbl_dept usd ON f_usecompany = usd.id
    LEFT JOIN tbl_dept usdd ON f_usedept = usdd.id
    LEFT JOIN tbl_user usp ON a.f_usepeople = usp.id
    LEFT JOIN tbl_user usc ON a.f_create_user = usc.id
    LEFT JOIN tbl_user usu ON a.f_update_user = usu.id
    LEFT JOIN tbl_basic potion ON a.f_PositionDept = potion.id AND potion.f_type = 4
    LEFT JOIN temp_count co ON 1=1
    LEFT JOIN TBL_SPINFO_PIC PIC ON A.ID = PIC.F_SPID 
    LEFT JOIN (SELECT id,f_name FROM tbl_basic tb WHERE tb.f_customid = s_customid AND tb.f_type = 3) tp ON a.f_lend_PID = tp.id  -- 供应商
    LEFT JOIN (SELECT id,f_name FROM tbl_basic tb WHERE tb.f_customid = s_customid AND tb.f_type = 5) tw ON a.f_len_outID = tw.id   -- 外部联系人
    WHERE a.f_flag = 0
    ORDER BY b.oderid ;
    
    drop TEMPORARY TABLE IF EXISTS temp_spinfo;
    DROP TEMPORARY TABLE IF EXISTS temp_count;
  
END
$$  
DELIMITER ; 




-- 树形表查询
DROP PROCEDURE IF EXISTS Msp_Data_Treelist;  
DELIMITER $$
CREATE PROCEDURE Msp_Data_Treelist(
  IN c_type     int, -- 0部门 1类别 2供应商类别 4 存放地点 5查询供应商类型树形结构 6按指定部门ID返回包括自已在内的所有下级部门ID
  IN c_customid int, -- 客户ID
  IN c_where    varchar(1000),
  IN c_returntable varchar(100)
  ) -- 条件
label:BEGIN 
 
    DECLARE c_l int;
 
    drop table if exists temp_list;
    drop table if exists temp_list2;
    -- 供应商类型临时表
    drop table if exists temporary_temp_pro_id;
 
    
    CREATE temporary TABLE if not exists temp_list(id VARCHAR(30),Parent_Id varchar(30),f_name varchar(100), level int ,AllParent_id varchar (200),parent1_id varchar(30),parent2_id varchar(30),parent3_id varchar(30));
    CREATE temporary TABLE if not exists temp_list2(id VARCHAR(30),Parent_Id varchar(30),f_name varchar(100), level int ,AllParent_id varchar (200),parent1_id varchar(30),parent2_id varchar(30),parent3_id varchar(30));
    CREATE temporary TABLE if not exists temporary_temp_pro_id(id VARCHAR(30),parent1_id varchar(30),parent2_id varchar(30),parent3_id varchar(30),level int);

    set c_l = 0;

    IF c_type IN(0,6) THEN  -- 部门
 
    	INSERT temp_list SELECT id,f_parentid,f_name,c_l,CONCAT(';',cast(id AS CHAR),'&'),cast(id AS CHAR),'','' from tbl_dept WHERE IFNULL(f_parentid,0)=0 AND f_flag = 0 AND f_customid = c_customid  ORDER BY f_ordid;    
          	
      WHILE row_count() >0  DO  -- 判断INSErt行数
   
    		SET c_l=c_l+1;
        DELETE FROM temp_list2;
        INSERT INTO temp_list2 SELECT * FROM temp_list tl;
  
    		IF c_l=1 then
    		  	INSERT temp_list SELECT a.id, a.f_parentid, a.f_name, c_l, CONCAT(b.allParent_id,';',cast(a.id AS CHAR),'&'), b.parent1_id,a.id,'' 
    		  	FROM tbl_dept  a,temp_list2 b WHERE a.f_parentid=b.id and b.LEVEL=c_l-1 AND f_flag = 0 AND f_customid = c_customid  ORDER BY f_ordid; 
    		ELSE 
    			  insert temp_list select a.id,a.f_parentid,a.f_name,c_l,CONCAT(b.allParent_id,';',cast(a.id AS CHAR),'&'),b.parent1_id,b.parent2_id,a.id 
    			  from tbl_dept a,temp_list2 b WHERE a.f_parentid=b.id and b.level=c_l-1 AND f_flag = 0 AND f_customid = c_customid  ORDER BY f_ordid;
        END IF ;
    	END WHILE;
 
    END IF; 
      
    IF c_type IN(1,2,3,4) THEN  -- 1类别 2供应商类别 4 存放地点
    	INSERT temp_list SELECT id,f_parentid,f_name,c_l,CONCAT(';',cast(id AS CHAR),'&'),cast(id AS CHAR),'','' 
      from tbl_basic tb WHERE f_customid = c_customid  AND f_type = c_type and   IFNULL(f_parentid,0)=0 AND tb.f_flag = 0 ORDER BY tb.f_order ;    
          	
      WHILE row_count() >0  DO  -- 判断INSErt行数
   
    		SET c_l=c_l+1;
        DELETE FROM temp_list2;
        INSERT INTO temp_list2 SELECT * FROM temp_list tl;
  
    		IF c_l=1 then
    		  	INSERT temp_list SELECT a.id, a.f_parentid, a.f_name, c_l, CONCAT(b.allParent_id,';',cast(a.id AS CHAR),'&'), b.parent1_id,a.id,'' 
    		  	FROM tbl_basic  a,temp_list2 b WHERE  a.f_customid = c_customid  AND a.f_type = c_type AND a.f_parentid=b.id and b.LEVEL=c_l-1 AND a.f_flag = 0 ORDER BY a.f_order ;
    		ELSE 
    			  insert temp_list select a.id,a.f_parentid,a.f_name,c_l,CONCAT(b.allParent_id,';',cast(a.id AS CHAR),'&'),b.parent1_id,b.parent2_id,a.id 
    			  from tbl_basic a,temp_list2 b WHERE  a.f_customid = c_customid  AND a.f_type = c_type AND a.f_parentid=b.id and b.level=c_l-1 AND a.f_flag = 0 ORDER BY a.f_order ;
        END IF ;
    	END WHILE;


    END IF; 

--     IF c_type = 5 THEN  -- 1类别 2供应商类别 4 存放地点
--       -- 查出 一级二级三级父ID
--       DELETE FROM temp_list;
--     	INSERT temp_list SELECT id,f_parentid,f_name,c_l,CONCAT(';',cast(id AS CHAR),'&'),cast(id AS CHAR),'','' 
--       from tbl_basic tb WHERE  f_customid = c_customid  AND f_type = 2 and   IFNULL(f_parentid,0)=0 AND tb.f_flag = 0 ORDER BY tb.f_order ;    
--         
--        	
--       WHILE row_count() >0  DO  -- 判断INSErt行数
--    
--     		SET c_l=c_l+1;
--         DELETE FROM temp_list2;
--         INSERT INTO temp_list2 SELECT * FROM temp_list tl;
--   
--     		IF c_l=1 then
--     		  	INSERT temp_list SELECT a.id, a.f_parentid, a.f_name, c_l, CONCAT(b.allParent_id,';',cast(a.id AS CHAR),'&'), b.parent1_id,a.id,'' 
--     		  	FROM tbl_basic  a,temp_list2 b WHERE  f_customid = c_customid  AND  a.f_type = 2 AND a.f_parentid=b.id and b.LEVEL=c_l-1 AND a.f_flag = 0 ORDER BY a.f_order ;
--     		ELSE 
--     			  insert temp_list select a.id,a.f_parentid,a.f_name,c_l,CONCAT(b.allParent_id,';',cast(a.id AS CHAR),'&'),b.parent1_id,b.parent2_id,a.id 
--     			  from tbl_basic a,temp_list2 b WHERE  f_customid = c_customid  AND a.f_type = 2 AND a.f_parentid=b.id and b.level=c_l-1 AND a.f_flag = 0 ORDER BY a.f_order ;
--         END IF ;
--     	END WHILE;
-- 
--       
-- --         SELECT *FROM temp_list;
-- --        LEAVE label;
-- 
-- 
--     END IF; 

 
    
    SET @S_SQL1 = ''; 
    IF c_type = 0 THEN
        SET @S_SQL1 =CONCAT( ' SELECT A.ID,B.F_NO,B.F_PARENTID,parent1_id,parent2_id,parent3_id,B.F_NAME,CONCAT(E.F_NAME,IFNULL(CONCAT(''/'',D.F_NAME),''''),IFNULL(CONCAT(''/'',C.F_NAME),'''')) AS F_NAMEALL 
                        FROM temp_list A 
                        INNER JOIN TBL_DEPT B ON A.ID = B.ID 
                        LEFT JOIN TBL_DEPT C ON A.parent3_id = C.ID
                        LEFT JOIN TBL_DEPT D ON A.parent2_ID = D.ID
                        LEFT JOIN TBL_DEPT E ON A.parent1_ID = E.ID',IFNULL(c_where,''));   
    END IF;

    IF c_type IN (1,2,3,4) THEN
        SET @S_SQL1 =CONCAT( ' SELECT A.ID,B.F_NO,B.F_PARENTID,parent1_id,parent2_id,parent3_id,B.F_NAME,CONCAT(E.F_NAME,IFNULL(CONCAT(''/'',D.F_NAME),''''),IFNULL(CONCAT(''/'',C.F_NAME),'''')) AS F_NAMEALL,
                        (case when ifnull(parent3_ID,'''') <> '''' then CONCAT(IFNULL(D.F_NAME,''''),IFNULL(CONCAT(''/'',C.F_NAME),'''')) else  CONCAT(E.F_NAME,IFNULL(CONCAT(''/'',D.F_NAME),''''),IFNULL(CONCAT(''/'',C.F_NAME),'''')) end) as f_nametwo
          
                        FROM temp_list A 
                        INNER JOIN tbl_basic B ON A.ID = B.ID  AND B.F_TYPE = ',c_type,'
                        LEFT JOIN tbl_basic C ON A.parent3_id = C.ID AND C.F_TYPE = ',c_type,'
                        LEFT JOIN tbl_basic D ON A.parent2_ID = D.ID  AND D.F_TYPE = ',c_type,'
                        LEFT JOIN tbl_basic E ON A.parent1_ID = E.ID AND E.F_TYPE = ',c_type, c_where);   
 
    END IF;

    IF c_type = 5 THEN       
   
--         DELETE FROM temporary_temp_pro_id;        
--         INSERT INTO temporary_temp_pro_id(id,parent1_id,parent2_id,parent3_id,level)
--         select a.id,parent1_id,parent2_id,parent3_id,a.level from temp_list a
--         inner join tbl_basic b on a.id = b.id  and b.f_type = 2 AND b.f_flag = 0;
     
--  CALL Msp_Data_Treelist (5,0, " and f_parentid = 181 ")

--  
--         SELECT *FROM temporary_temp_pro_id;
--         LEAVE label;
--         SET @S_SQL1 =CONCAT( ' select id,f_no,f_name,f_parentid from (
--                                  SELECT a.id,a.f_no,a.f_name,a.f_parentid,a.f_order,0 as level FROM tbl_basic a                                  
--                                  WHERE a.f_type = 3 AND a.f_flag = 0 and a.id in (select parent1_id from temporary_temp_pro_id)
--                                   
--                                  UNION ALL
--                                  SELECT a1.id,a1.f_no,a1.f_name,a1.f_parentid,a1.f_order,1 as level FROM tbl_basic a1                       
--                                  WHERE a1.f_type = 3 AND a1.f_flag = 0   and a1.id in (select parent2_id from temporary_temp_pro_id)
-- 
--                                  UNION ALL
--                                  SELECT a2.id,a2.f_no,a2.f_name,a2.f_parentid,a2.f_order,2 as level FROM tbl_basic a2              
--                                  WHERE a2.f_type = 3 AND a2.f_flag = 0   and a2.id in (select parent3_id from temporary_temp_pro_id)
--           
--                                )a ',c_where,' 
--                                ORDER BY a.f_order ');     -- AND b.level =0第一级
      SET @S_SQL1 = CONCAT('  select id,f_no,f_name,f_parentid from tbl_basic where f_customid = ',c_customid,' and f_type = 2 and f_flag = 0 ',c_where,' order by f_order ') ;
 
    END IF;
    
    IF c_type = 6 THEN
        SET @S_SQL1 =CONCAT( ' SELECT ID 
          
                        FROM temp_list  
                        WHERE parent1_id =', c_where,' OR parent2_id = ',c_where,' OR parent3_id = ',c_where);   
    END IF;

    
    IF c_returntable  = '' THEN
        PREPARE stmt FROM  @S_SQL1;  
        ## 执行SQL语句
        EXECUTE stmt;  
        ## 释放掉预处理段
        deallocate prepare stmt;
    ELSE
        SET @S_SQL2=CONCAT('insert into ',c_returntable,' select *from (',@S_SQL1,')a');
        PREPARE stmt FROM  @S_SQL2;  
        ## 执行SQL语句
        EXECUTE stmt;  
        ## 释放掉预处理段
        deallocate prepare stmt;
    END IF;

--   
    drop temporary table temp_list; 
    DROP TEMPORARY TABLE temp_list2;
    DROP  TEMPORARY table  temporary_temp_pro_id;
  
END
$$  
DELIMITER ;


-- 获取单号
DROP PROCEDURE IF EXISTS Msp_Get_Serno;  
DELIMITER $$
CREATE PROCEDURE Msp_Get_Serno(
  c_customid   int,
  c_tablname   varchar(30),
  c_fielnae    varchar(30),
  c_qz         varchar(30))
label:BEGIN
 
      DECLARE C_DAY varchar(30) DEFAULT '';
      DECLARE C_STR varchar(50) DEFAULT '';
      set C_DAY = CONCAT(c_qz, DATE_FORMAT(NOW(),'%Y%m%d'));

      drop table if exists temp_maxserno;
      CREATE TEMPORARY TABLE if not exists temp_maxserno(acount int,serno varchar(50));
      
      SET @S_SQL = CONCAT('insert into temp_maxserno(acount,serno) select count(*) as icount,max(',c_fielnae,') as serno from ',c_tablname,' where f_customid =',c_customid,' and ',c_fielnae,' like ''',C_DAY,'%''');
      
--   SELECT C_DAY;
--       LEAVE label;
      PREPARE stmt FROM  @S_SQL;  
      ## 执行SQL语句
      EXECUTE stmt;  
      ## 释放掉预处理段
      deallocate prepare stmt;

 
      IF EXISTS(SELECT tm.acount FROM temp_maxserno tm WHERE tm.serno <> '' LIMIT 0,1) THEN
 
          SELECT serno INTO @maxbill  FROM temp_maxserno tm;
          SET @maxbill = REPLACE(@maxbill,C_DAY,'');
          SET @maxid = CAST(@maxbill AS SIGNED) ;
          SET @maxid = @maxid + 10000001;
          SET C_STR = CONCAT(C_DAY,RIGHT(CAST(@maxid AS char(10)),4));


 
      ELSE

          SET C_STR = CONCAT(C_DAY,'0001');     
      end IF;
      
      drop temporary table temp_maxserno;
 

      SELECT C_STR AS f_serno;
END $$
DELIMITER ; 

-- 商品录入查找存储过程
DROP PROCEDURE IF EXISTS Msp_Spinfo_Input_Query;  
DELIMITER $$
CREATE PROCEDURE Msp_Spinfo_Input_Query(
  c_type    int,             -- 业务 0领用申请  1领用 2领用退库 3借用 4借用归还 5资产变更 6资产调拨 7资产报废 8资产处置 9资产维修
  c_modle   int,             -- 0查合计数据 1查所有数据
  c_value   varchar(50),     -- 普通查询条件
  c_userid  int,             -- 查询人
  c_gj_where varchar(100),   -- 高级筛选    
  c_curPage int,
  c_pageSize int)       
label:BEGIN
    DECLARE c_count  int DEFAULT 0;
    DECLARE c_status varchar(200) DEFAULT '';
    DECLARE C_BID    int DEFAULT 0;
    DECLARE C_ENID   int DEFAULT 0;
    DECLARE c_customid int;
 
    -- 供应商类型临时表
    drop table if exists temporary_temp_spinfo_input;
    
    CREATE temporary TABLE if not exists temporary_temp_spinfo_input(id INT UNSIGNED AUTO_INCREMENT,spid  int,PRIMARY KEY (`id`));  
    

    SELECT tu.f_customid INTO c_customid FROM tbl_user tu WHERE id = c_userid;
    SET  C_BID = (c_curPage-1)*c_pageSize;
    SET  C_ENID = c_pageSize;
  
    IF c_type = 0 THEN  -- 申领只查所有闲置资产
      SET c_status = CONCAT(' where f_customid = ',c_customid,' and  f_flag = 0 and f_status = 0 ');  -- -1报废 0闲置 1领用 2借用 3处置
    ELSEIF c_type = 1 THEN
      SET c_status = CONCAT(' where f_customid = ',c_customid,' and  f_flag = 0 and f_status = 0 ');
    ELSEIF c_type = 2 THEN   -- 领用退库只查已领用资产
      SET c_status = CONCAT(' where f_customid = ',c_customid,' and  f_flag = 0 and f_status = 1 ');
    ELSEIF c_type = 3 THEN   -- 借用
      SET c_status = CONCAT(' where f_customid = ',c_customid,' and  f_flag = 0 and f_status = 0 ');
    ELSEIF c_type = 4 THEN   -- 借用归还
      SET c_status = CONCAT(' where f_customid = ',c_customid,' and  f_flag = 0 and f_status = 2 ');
    ELSEIF c_type = 5 THEN   -- 资产变更
      SET c_status = CONCAT(' where f_customid = ',c_customid,' and  f_flag = 0 and f_status in (0)');        
    ELSEIF c_type = 6 THEN   -- 资产调拨
      SET c_status = CONCAT(' where f_customid = ',c_customid,' and  f_flag = 0 and f_status in (0)');   
    ELSEIF c_type = 7 THEN   -- 资产报废
      SET c_status = CONCAT(' where f_customid = ',c_customid,' and  f_flag = 0  and f_status in (0) '); 
    ELSEIF c_type = 8 THEN   -- 资产处置
      SET c_status = CONCAT(' where f_customid = ',c_customid,' and  f_flag = 0 and f_status = 0');
    ELSEIF c_type = 9 THEN
      SET c_status = CONCAT(' where f_customid = ',c_customid,' and  f_flag = 0 and f_status = 0');
    END if;

    IF c_gj_where <> '' THEN
      SET c_status = CONCAT(c_status,' AND ',c_gj_where);
    END IF;

    IF c_value <> '' THEN
      
        SET @c_sql = CONCAT(' insert into temporary_temp_spinfo_input(spid) select id from tbl_spinfo ',c_status,' and (f_code = ''',c_value,''' or f_name =''',c_value,''')');
        PREPARE stmt FROM  @c_sql;  
        ## 执行SQL语句
        EXECUTE stmt;  
        ## 释放掉预处理段
        deallocate prepare stmt;  
        IF NOT EXISTS(SELECT id FROM temporary_temp_spinfo_input  LIMIT 0,1) THEN
            SET @c_sql = CONCAT(' insert into temporary_temp_spinfo_input(spid) select id from tbl_spinfo ',c_status,' and (f_code like ''%',c_value,'%'' or f_name like''%',c_value,'%'')');
            PREPARE stmt FROM  @c_sql;  
            ## 执行SQL语句
            EXECUTE stmt;  
            ## 释放掉预处理段
            deallocate prepare stmt; 
        END IF;
        
    ELSE
        IF c_gj_where <> '' THEN
          SET @c_sql = CONCAT(' insert into temporary_temp_spinfo_input(spid) select id from tbl_spinfo ',c_status,' and ',c_gj_where);
        ELSE 
          SET @c_sql = CONCAT(' insert into temporary_temp_spinfo_input(spid) select id from tbl_spinfo ',c_status);
        END IF;

        PREPARE stmt FROM  @c_sql;  
        ## 执行SQL语句
        EXECUTE stmt;  
        ## 释放掉预处理段
        deallocate prepare stmt; 
    END IF;

    SELECT IFNULL(COUNT(*),0) INTO c_count FROM temporary_temp_spinfo_input;

    IF c_modle = 0 THEN
        SELECT c_count AS f_count;
    ELSE
--         SELECT * FROM temporary_temp_spinfo_input LIMIT C_BID,C_ENID ;
--         LEAVE label;

        SELECT a.id AS ordid,ts.f_spid,ts.f_Code,ts.f_Name,ts.f_Providerid,ts.f_Specification,ts.f_Model,ts.f_Unit,ts.f_Price,ts.f_Source,ts.f_Dept,ts.f_CustodyPeople,ts.f_UseDept,
              ts.f_UsePeople,ts.f_PositionDept,ts.f_Invoice,ts.f_InvoiceDate,ts.f_BuyDate,ts.f_ScrappedDate,ts.f_note,ts.f_typename,ts.providername,ts.f_deptname,ts.f_UseDeptname,
              ts.f_CustodyPeoplename,ts.f_PositionDeptname
        FROM ( SELECT * FROM temporary_temp_spinfo_input LIMIT C_BID,C_ENID) a
        INNER JOIN View_SPInfo ts ON a.spid = ts.id;
   
 
 
    end IF;
    drop temporary table temporary_temp_spinfo_input;
END $$
DELIMITER ;



-- 从单明细
DROP PROCEDURE IF EXISTS Msp_BillDetail_Query;  
DELIMITER $$
CREATE PROCEDURE Msp_BillDetail_Query(
  c_type    int,             -- 业务 0领用申请  1领用查询 2退货查询  3借用查询 4借用归还 5资产变动 6资产调拨 7资产处置 8资产报废
  c_mid     int,
  c_userid  int,
  c_model   int)             -- 0查合计 1查明细
label:BEGIN
    DECLARE c_customid int;
    DECLARE c_temp     int;
    SELECT tu.f_customid INTO c_customid FROM tbl_user tu WHERE ID = c_userid;
    IF c_type = 0 THEN  -- 领用申请
        IF c_model = 0 THEN
            SELECT COUNT(*) AS icount FROM tbl_receive_apply_detail WHERE f_mid = c_mid;
        ELSE 

            SELECT trad.* ,td.f_name AS f_custody_deptname,tu.f_name AS f_custody_username,td1.f_name AS f_postionname,tu1.f_name AS f_use_username,
                   vs.f_Code,vs.f_Name,vs.f_Model,vs.f_Unit,vs.f_Price,vs.f_Source,vs.f_Invoice,vs.f_InvoiceDate,vs.f_note,vs.f_UseWay,vs.f_typename,vs.f_StatusNAME,
                   td2.f_name AS f_use_deptidname
            FROM tbl_receive_apply_detail trad
            INNER JOIN view_spinfo vs ON trad.f_spid = vs.id
            LEFT JOIN tbl_dept td ON trad.f_custody_deptid =td.id
            LEFT JOIN tbl_user tu ON trad.f_custody_userid = tu.id
            LEFT JOIN tbl_dept td2 ON trad.f_use_deptid = td2.id
            LEFT JOIN (SELECT id,f_name FROM tbl_basic tb WHERE tb.f_customid =c_customid AND tb.f_type = 4) td1 ON trad.f_postion = td1.id
            LEFT JOIN tbl_user tu1 ON trad.f_use_userid = tu1.id
            WHERE trad.f_mid = c_mid;
        end IF;                                                 
    ELSEIF c_type = 1 THEN
        IF c_model = 0 THEN
            SELECT COUNT(*) AS icount FROM tbl_receive_detail WHERE f_mid = c_mid;
        ELSE 
            SELECT trad.* ,td.f_name AS f_custody_deptname,tu.f_name AS f_custody_username,td1.f_name AS f_postionname,tu1.f_name AS f_use_username,
                   vs.f_Code,vs.f_Name,vs.f_Model,vs.f_Unit,vs.f_Price,vs.f_Source,vs.f_Invoice,vs.f_InvoiceDate,vs.f_note AS f_spnote,vs.f_UseWay,vs.f_typename,vs.f_StatusNAME,
                   td2.f_name AS f_use_deptidname
            FROM tbl_receive_detail trad
            INNER JOIN view_spinfo vs ON trad.f_spid = vs.id
            LEFT JOIN tbl_dept td ON trad.f_custody_deptid =td.id
            LEFT JOIN tbl_user tu ON trad.f_custody_userid = tu.id
            LEFT JOIN tbl_dept td2 ON trad.f_use_deptid = td2.id
            LEFT JOIN (SELECT id,f_name FROM tbl_basic tb WHERE tb.f_customid =c_customid AND tb.f_type = 4) td1 ON trad.f_postion = td1.id
            LEFT JOIN tbl_user tu1 ON trad.f_use_userid = tu1.id
            WHERE trad.f_mid = c_mid;
        end IF; 
    ELSEIF c_type = 2 THEN
        IF c_model = 0 THEN
            SELECT COUNT(*) AS icount FROM tbl_Return_Detail WHERE f_mid = c_mid;
        ELSE 

            SELECT trad.* ,td.f_name AS f_custody_deptname,tu.f_name AS f_custody_username,td1.f_name AS f_postionname,
                   vs.f_Code,vs.f_Name,vs.f_Model,vs.f_Unit,vs.f_Price,vs.f_Source,vs.f_Invoice,vs.f_InvoiceDate,vs.f_note,vs.f_UseWay,vs.f_typename,vs.f_StatusNAME,vs.f_Specification
            FROM tbl_Return_Detail trad
            INNER JOIN view_spinfo vs ON trad.f_spid = vs.id
            LEFT JOIN tbl_dept td ON trad.f_custody_deptid =td.id
            LEFT JOIN tbl_user tu ON trad.f_custody_userid = tu.id
            LEFT JOIN (SELECT id,f_name FROM tbl_basic tb WHERE tb.f_customid =c_customid AND tb.f_type = 4) td1 ON trad.f_postion = td1.id
            WHERE trad.f_mid = c_mid;
        end IF;    
    ELSEIF c_type = 3 THEN
        IF c_model = 0 THEN
            SELECT COUNT(*) AS icount FROM tbl_lend_out_detail WHERE f_mid = c_mid;
        ELSE 
            SELECT tlom.f_customid INTO c_customid FROM tbl_lend_out_main tlom WHERE ID = c_mid;

            SELECT trad.* ,td.f_name AS f_custody_deptname,td1.f_name AS f_postionname,
                   vs.f_Code,vs.f_Name,vs.f_Model,vs.f_Unit,vs.f_Price,vs.f_Source,vs.f_Invoice,vs.f_InvoiceDate,vs.f_note AS f_spnote,vs.f_UseWay,vs.f_typename,vs.f_StatusNAME,vs.f_Specification,
                   (CASE trad.f_Type WHEN 0 THEN tu.f_name WHEN 1 THEN tb.f_name WHEN 2 THEN tb1.f_name ELSE '' END) AS f_lendname,
                   (CASE trad.f_Type WHEN 0 THEN  trad.f_Lend_In_people WHEN 1 THEN trad.f_Lend_Out_people WHEN 2 THEN trad.f_Lend_PID ELSE -1 END) AS f_lendid
            FROM tbl_lend_out_detail trad            
            INNER JOIN view_spinfo vs ON trad.f_spid = vs.id
            LEFT JOIN tbl_dept td ON trad.f_lend_deptid =td.id
            LEFT JOIN tbl_user tu ON trad.f_Lend_In_people = tu.id
            LEFT JOIN (SELECT id,f_name FROM tbl_basic tb WHERE tb.f_customid =c_customid AND tb.f_type = 4) td1 ON trad.f_postion = td1.id
            LEFT JOIN (SELECT id,f_name FROM tbl_basic WHERE f_customid =c_customid AND f_type = 5 ) tb ON trad.f_Lend_Out_people = tb.id
            LEFT JOIN (SELECT id,f_name FROM tbl_basic WHERE f_customid =c_customid AND f_type = 3 ) tb1 ON trad.f_Lend_PID = tb1.id
            WHERE trad.f_mid = c_mid;
        end IF;
    ELSEIF c_type = 4 THEN
        IF c_model = 0 THEN
            SELECT COUNT(*) AS icount FROM tbl_lend_in_detail WHERE f_mid = c_mid;
        ELSE 
            SELECT tlom.f_customid INTO c_customid FROM tbl_lend_in_main tlom WHERE ID = c_mid;

            SELECT trad.* ,td.f_name AS f_custody_deptname,tu.f_name AS f_custody_username,td1.f_name AS f_postionname,
                   vs.f_Code,vs.f_Name,vs.f_Model,vs.f_Unit,vs.f_Price,vs.f_Source,vs.f_Invoice,vs.f_InvoiceDate,vs.f_note AS f_spnote,vs.f_UseWay,vs.f_typename,vs.f_StatusNAME,vs.f_Specification,
                   (CASE trad.f_Type WHEN 0 THEN tu1.f_name WHEN 1 THEN tb.f_name WHEN 2 THEN tb1.f_name ELSE '' END) AS f_lendname,
                   (CASE trad.f_Type WHEN 0 THEN  f_R_In_people WHEN 1 THEN f_R_Out_people WHEN 2 THEN f_R_PID ELSE -1 END) AS f_lendid
            FROM tbl_lend_in_detail trad            
            INNER JOIN view_spinfo vs ON trad.f_spid = vs.id
            LEFT JOIN tbl_dept td ON trad.f_custody_deptid =td.id
            LEFT JOIN tbl_user tu ON trad.f_custody_userid = tu.id
            LEFT JOIN (SELECT id,f_name FROM tbl_basic tb WHERE tb.f_customid =c_customid AND tb.f_type = 4) td1 ON trad.f_postion = td1.id
            LEFT JOIN tbl_user tu1 ON trad.f_R_In_people = tu1.id
            LEFT JOIN (SELECT id,f_name FROM tbl_basic WHERE f_customid =c_customid AND f_type = 5 ) tb ON trad.f_R_Out_people = tb.id
            LEFT JOIN (SELECT id,f_name FROM tbl_basic WHERE f_customid =c_customid AND f_type = 3 ) tb1 ON trad.f_R_PID = tb1.id
            WHERE trad.f_mid = c_mid;
        end IF;    
    ELSEIF c_type = 5 THEN
        IF c_model = 0 THEN
            SELECT COUNT(*) AS icount FROM tbl_change_detail WHERE f_mid = c_mid;
        ELSE 
            SELECT tlom.f_customid INTO c_customid FROM tbl_change_main tlom WHERE ID = c_mid;

            SELECT trad.* ,td.f_name AS f_to_deptname,td1.f_name AS f_to_usedeptname,tu.f_name AS f_to_username,tu1.f_name AS f_to_useusername,wz.f_name AS f_to_pstionname,
                   vs.f_Code,vs.f_Name,vs.f_Model,vs.f_Unit,vs.f_Price,vs.f_Source,vs.f_Invoice,vs.f_InvoiceDate,vs.f_note AS f_spnote,vs.f_UseWay,vs.f_StatusNAME,vs.f_Specification,
                   vs.F_TYPENAME,vs.F_DEPTNAME,vs.f_UseDeptname,vs.f_CustodyPeopleNAME,vs.f_UsePeoplename,VS.f_PositionDeptname    
            FROM tbl_change_detail trad            
            INNER JOIN view_spinfo vs ON trad.f_spid = vs.id
            LEFT JOIN tbl_dept td ON trad.f_To_Deptid =td.id
            LEFT JOIN tbl_dept td1 ON trad.f_To_UseDeptid = td1.id
            LEFT JOIN tbl_user tu ON trad.f_To_UserID = tu.id            
            LEFT JOIN tbl_user tu1 ON trad.f_To_UseUserID = tu1.id
            LEFT JOIN (SELECT id,f_name FROM tbl_basic tb WHERE tb.f_customid =c_customid AND tb.f_type = 4) wz ON trad.f_To_Postion = wz.id 
            WHERE trad.f_mid = c_mid;
        end IF; 
    ELSEIF c_type = 6 THEN
        IF c_model = 0 THEN
            SELECT COUNT(*) AS icount FROM tbl_DB_Detail tdd WHERE f_mid = c_mid;
        ELSE 
            SELECT tlom.f_customid INTO c_customid FROM tbl_lend_in_main tlom WHERE ID = c_mid;

            SELECT trad.* ,td.f_name AS f_custody_deptname,tu.f_name AS f_custody_username,td1.f_name AS f_postionname,
                   vs.f_Code,vs.f_Name,vs.f_Model,vs.f_Unit,vs.f_Price,vs.f_Source,vs.f_Invoice,vs.f_InvoiceDate,vs.f_note AS f_spnote,vs.f_UseWay,vs.f_typename,vs.f_StatusNAME,vs.f_Specification,
                   td2.f_name AS f_out_deptname
            FROM tbl_DB_Detail trad            
            INNER JOIN view_spinfo vs ON trad.f_spid = vs.id
            LEFT JOIN tbl_dept td ON trad.f_custody_deptid =td.id
            LEFT JOIN tbl_user tu ON trad.f_custody_userid = tu.id
            LEFT JOIN (SELECT id,f_name FROM tbl_basic tb WHERE tb.f_customid =c_customid AND tb.f_type = 4) td1 ON trad.f_postion = td1.id 
            LEFT JOIN tbl_dept td2 ON trad.f_Out_Deptid = td2.id
            WHERE trad.f_mid = c_mid;
        end IF;                                  
   ELSEIF c_type = 7 THEN  -- 资产处置
        IF c_model = 0 THEN
            SELECT COUNT(*) AS icount FROM tbl_Handle_Detail tdd WHERE f_mid = c_mid;
        ELSE 
            SELECT tlom.f_customid INTO c_customid FROM tbl_handle_main tlom WHERE ID = c_mid;

            SELECT id INTO c_temp FROM tbl_dictionary td WHERE td.f_issys = 1 AND td.f_type = 0 AND td.f_customid = c_customid AND td.f_Ch_name= '处置方式';


            SELECT trad.* ,
                   vs.f_Code,vs.f_Name,vs.f_Model,vs.f_Unit,vs.f_Price,vs.f_Source,vs.f_Invoice,vs.f_InvoiceDate,vs.f_note AS f_spnote,vs.f_UseWay,vs.f_typename,vs.f_StatusNAME,vs.f_Specification,
                   tsd.f_name AS f_statename,cz.f_Ch_name as cz_name
            FROM tbl_Handle_Detail trad            
            INNER JOIN view_spinfo vs ON trad.f_spid = vs.id
            LEFT JOIN (SELECT f_id AS id ,f_name from tbl_sys_dictionary tsd where tsd.f_type = 0 AND f_id IN (5,6,7)) tsd ON trad.f_state = tsd.id
            LEFT JOIN (SELECT id,td.f_Ch_name FROM tbl_dictionary td WHERE td.f_customid = c_customid and td.f_parentid = c_temp) cz ON trad.f_state= cz.id
            WHERE trad.f_mid = c_mid;
        END IF;  
   ELSEIF c_type = 8 THEN  -- 资产报废
        IF c_model = 0 THEN
            SELECT COUNT(*) AS icount FROM tbl_Scrapped_Detail tdd WHERE f_mid = c_mid;
        ELSE 
            SELECT tlom.f_customid INTO c_customid FROM tbl_Scrapped_main tlom WHERE ID = c_mid;

            SELECT trad.* ,
                   vs.f_Code,vs.f_Name,vs.f_Model,vs.f_Unit,vs.f_Price,vs.f_Source,vs.f_Invoice,vs.f_InvoiceDate,vs.f_note AS f_spnote,vs.f_UseWay,vs.f_typename,vs.f_StatusNAME,vs.f_Specification,
                   tsd.f_name AS f_reasonname,wz.f_name AS f_postionname,td.f_name AS f_custody_deptname,tu.f_name AS f_custody_username
            FROM tbl_Scrapped_Detail trad            
            INNER JOIN view_spinfo vs ON trad.f_spid = vs.id
            LEFT JOIN (SELECT id,td.f_Ch_name AS f_name FROM  tbl_dictionary td WHERE td.f_parentid IN(SELECT id from tbl_dictionary td where td.f_Ch_name = '报废原因' and f_customid = c_customid)) tsd ON trad.f_reason = tsd.id
            LEFT JOIN (SELECT id,f_name from tbl_basic tb WHERE tb.f_type = 4 AND  tb.f_customid = c_customid ) wz ON trad.f_postion = wz.id
            LEFT JOIN tbl_dept td ON trad.f_custody_deptid = td.id
            LEFT JOIN tbl_user tu ON trad.f_custody_userid = tu.id
            WHERE trad.f_mid = c_mid;
        END IF;  
    ELSEIF c_type = 9 THEN  -- 资产维修
        IF c_model = 0 THEN
            SELECT COUNT(*) AS icount FROM tbl_repair_detail  tdd WHERE f_mid = c_mid;
        ELSE 
            SELECT tlom.f_customid INTO c_customid FROM tbl_repair_main tlom WHERE ID = c_mid;

            SELECT trad.* ,
                   vs.f_Code,vs.f_Name,vs.f_Model,vs.f_Unit,vs.f_Price,vs.f_Source,vs.f_Invoice,vs.f_InvoiceDate,vs.f_note AS f_spnote,vs.f_UseWay,vs.f_typename,vs.f_StatusNAME,vs.f_Specification                  
            FROM tbl_repair_detail trad            
            INNER JOIN view_spinfo vs ON trad.f_spid = vs.id                                    
            WHERE trad.f_mid = c_mid;
        END IF;  

   END IF;
  
END $$
DELIMITER ;






--  CALL Msp_Get_OprDept_Level(38,78)
DROP PROCEDURE IF EXISTS Msp_Get_OprDept_Level;  
-- 按用户为条件按层级 获取可操作部门
DELIMITER $$
CREATE PROCEDURE Msp_Get_OprDept_Level(
  IN c_userid     int, -- 用户ID
  IN c_parentid   int) -- 父级ID
label:BEGIN 
 
    DECLARE c_user_type int;
    DECLARE c_user_deptid int;
    DECLARE c_parentid2  int DEFAULT -1;
    DECLARE c_admin     int;
    DECLARE c_customid  int;  -- 客户ID
    DECLARE C_rolealldept int; 

    drop table if exists temp_dept_list;
    drop table if exists temp_role_list;
 
    CREATE temporary TABLE if not exists temp_dept_list(id int,parentid int);
    CREATE temporary TABLE if not exists temp_role_list(id int);
  
    SELECT tu.f_type,f_deptno,tu.f_customid INTO c_user_type,c_user_deptid,c_customid FROM tbl_user tu WHERE id = c_userid;
    INSERT INTO temp_role_list(id)
    SELECT tru.f_roleid   FROM tbl_role_user tru WHERE tru.f_userid = c_userid;

    IF EXISTS(SELECT id FROM tbl_role tr WHERE ID IN (SELECT tru.f_roleid FROM tbl_role_user tru WHERE tru.f_userid = c_userid) AND f_DeptType = 1) THEN
      SET C_rolealldept = 1;
    ELSE 
      SET C_rolealldept = 0;
    END IF;

--   SELECT c_user_type,c_user_deptid,c_customid ;
--   LEAVE label;
--     SELECT ID,td.f_parentid FROM tbl_dept td WHERE td.f_flag = 0 AND f_customid  = c_customid  ;
--   LEAVE label;

    IF EXISTS(SELECT * FROM tbl_role tr INNER JOIN temp_role_list b ON tr.id= b.id WHERE tr.f_admin = 1) THEN
      SET c_admin = 1;
    ELSE
      SET c_admin = 0;
    END IF;

    IF c_user_type = 1 THEN  -- 用户信息
      IF c_admin = 1 THEN
        INSERT INTO temp_dept_list(id,parentid) 
        SELECT ID,td.f_parentid FROM tbl_dept td WHERE td.f_flag = 0 AND f_customid  = c_customid  ;
      else
        INSERT INTO temp_dept_list(id,parentid) 
        SELECT id,td.f_parentid FROM tbl_dept td WHERE ID IN (
           SELECT trd.f_deptid FROM tbl_role_deptid trd 
           INNER JOIN temp_role_list b  ON trd.f_roleid = b.id WHERE   f_customid  = c_customid ) OR C_rolealldept = 1;
      end IF;
    END IF;

    IF c_user_type = 2 THEN  -- 员工信息找出所有树形部门
      INSERT INTO temp_dept_list(id,parentid) 
      SELECT id,td.f_parentid FROM tbl_dept td WHERE id = c_user_deptid AND   f_customid  = c_customid;
      
      SELECT td.f_parentid INTO c_parentid2 FROM tbl_dept td WHERE ID = c_user_deptid;
      WHILE c_parentid2 <>0  DO  -- 判断INSErt行数
        INSERT INTO temp_dept_list(id,parentid) 
        SELECT id,td.f_parentid FROM tbl_dept td WHERE id =c_parentid2 AND f_customid  = c_customid;
        SELECT td.f_parentid INTO c_parentid2 FROM tbl_dept td WHERE id =c_parentid2 AND f_customid  = c_customid;
      END WHILE;
 
    end IF;

    SELECT td.id,td.f_parentid,td.f_no,td.f_name FROM tbl_dept td INNER JOIN temp_dept_list tdl ON td.id = tdl.id
    WHERE TD.f_parentid = c_parentid AND td.f_customid  = c_customid;

    
--  CALL Msp_Get_OprDept_Level (1,98)

    drop temporary table temp_dept_list; 
    DROP TEMPORARY TABLE temp_role_list;
 
  
END
$$  
DELIMITER ; 


--  CALL Msp_Get_OprUser (1,1,'',1,20,'')
DROP PROCEDURE IF EXISTS Msp_Get_OprUser;  
-- 按用户可操作部门查询出人员信息
DELIMITER $$
CREATE PROCEDURE Msp_Get_OprUser(
  IN  c_userid     int,
  IN  c_model      int, -- 0查合计  1查明细
  IN  c_deptid     varchar(30),
  IN  c_curPage    int,
  IN  c_pageSize   int,
  IN  c_w_value    varchar(200) )-- 用户ID
label:BEGIN 
 
    DECLARE c_user_type int;
    DECLARE c_user_deptid int;
    DECLARE c_admin     int;
    DECLARE c_customid  int;  -- 客户ID
    DECLARE C_BID       int;
    DECLARE C_ENID      int;
    DECLARE c_dept      text;
    DECLARE c_where     varchar(1000);
  
    drop table if exists temp_dept_list;
    drop table if exists temp_role_list;  

    SET  C_BID = (c_curPage-1)*c_pageSize;
    SET  C_ENID = c_pageSize;



    set c_where = '';
--     IF c_deptid <> '' THEN
--         set c_where =CONCAT(' and tu.f_deptno = ',c_deptid);
--     END IF;
    IF c_w_value <> '' THEN
        SET c_where = CONCAT(c_where,' and (tu.f_no like ''%',c_w_value,'%'' or tu.f_name like ''%',c_w_value,'%'')');
    end IF;
 
    CREATE temporary TABLE if not exists temp_dept_list(id int);
    CREATE temporary TABLE if not exists temp_role_list(id int);

  
    SELECT tu.f_type,f_deptno,tu.f_customid INTO c_user_type,c_user_deptid,c_customid FROM tbl_user tu WHERE id = c_userid;
    INSERT INTO temp_role_list(id)
    SELECT tru.f_roleid   FROM tbl_role_user tru WHERE tru.f_userid = c_userid;

 

    IF EXISTS(SELECT * FROM tbl_role tr INNER JOIN temp_role_list b ON tr.id= b.id WHERE tr.f_admin = 1) THEN
      SET c_admin = 1;
    ELSE
      SET c_admin = 0;
    END IF;

    IF c_user_type = 1 THEN  -- 用户信息
      IF c_admin = 1 THEN  -- 超级管理员不限部门
   
          IF c_deptid <> '' THEN  -- 有传部门是只想查这个部门下的人员，没传部门查所有人员
            CALL Msp_Data_Parent_Child(0,c_deptid,c_userid,c_dept);
   
            SET @c_sql = CONCAT(' insert into temp_dept_list(id) select id from tbl_dept where id in (',c_dept,')');
            PREPARE stmt FROM  @c_sql;  
            ## 执行SQL语句
            EXECUTE stmt;  
            ## 释放掉预处理段
            deallocate prepare stmt;               
          else
            INSERT INTO temp_dept_list(id) 
            SELECT ID FROM tbl_dept td WHERE td.f_flag = 0 AND f_customid  = c_customid  ;
          END IF;
 
      ELSE
            -- 普通用户按配置部门走
            CALL Msp_Data_Parent_Child(0,c_deptid,c_userid,c_dept);
   
            SET @c_sql = CONCAT(' insert into temp_dept_list(id) select id from tbl_dept where id in (',c_dept,')');
            PREPARE stmt FROM  @c_sql;  
            ## 执行SQL语句
            EXECUTE stmt;  
            ## 释放掉预处理段
            deallocate prepare stmt; 
        --     select *FROM temp_dept_list;
        --     LEAVE label;
      end IF;
    END IF;
    
    IF c_model =0 THEN
      IF c_user_type = 1 THEN  --  1 用户 2员工
          SET @c_sql = CONCAT(' SELECT count(*) as icount
                                FROM tbl_user tu                                  
                                WHERE tu.f_customid = ',c_customid,' AND tu.f_flag = 0 ',c_where ) ;
      ELSE
          SET @c_sql = CONCAT(' SELECT  count(*) as icount
                                FROM tbl_user tu 
                                WHERE tu.f_flag = 0 and  tu.id = ',c_userid ) ;
          
      END IF;
    ELSE 
      IF c_user_type = 1 THEN  --  1 用户 2员工
          SET @c_sql = CONCAT(' SELECT tu.id,tu.f_no,tu.f_name,td1.f_name as f_deptname, tu.f_position,tu.f_phone,tu.f_email,tu.f_note
                                FROM tbl_user tu 
                                INNER JOIN temp_dept_list td ON tu.f_deptno = td.id 
                                INNER JOIN TBL_dept td1 on tu.f_deptno = td1.id
                                WHERE tu.f_customid = ',c_customid,' AND tu.f_flag = 0 ',c_where,' order by id  LIMIT ', C_BID,' , ',C_ENID ) ;
      ELSE
          SET @c_sql = CONCAT(' SELECT tu.id,tu.f_no,tu.f_name,td1.f_name as f_deptname, tu.f_position,tu.f_phone,tu.f_email,tu.f_note
                                FROM tbl_user tu 
                                INNER JOIN TBL_dept td1 on tu.f_deptno = td1.id WHERE tu.f_flag = 0 and  tu.id = ',c_userid ) ;
          
      END IF;
    end IF;
 
    PREPARE stmt FROM  @c_sql;  
    ## 执行SQL语句
    EXECUTE stmt;  
    ## 释放掉预处理段
    deallocate prepare stmt; 
    

    drop temporary table temp_dept_list; 
    DROP TEMPORARY TABLE temp_role_list;
 
  
END
$$  
DELIMITER ; 



DROP PROCEDURE IF EXISTS msp_Basic_Query;
-- 基础资料查询过程
DELIMITER $$
CREATE PROCEDURE msp_Basic_Query(
  IN c_model       int, -- 0查询合计 1查询明细
  IN c_typeid      int, -- 1 资产类型  2供应商类型 3供应商 4存放位置
  IN c_userid      int,
  IN c_customerid  int,
  IN c_curPage     int,
  IN c_pageSize    int,
  IN c_where       varchar(1000),
  IN c_order       varchar(1000) 
  )
label: BEGIN
    DECLARE c_bid   int;
    DECLARE c_eid   int;
    drop temporary table if exists temp_basic;

		CREATE TEMPORARY TABLE  if not exists temp_basic(id int);

	  SET c_bid = (c_curPage-1)*c_pageSize;
	  SET c_eid = c_pageSize;
    
    IF c_where <> '' then
        SET @sql = CONCAT('insert into temp_basic(id) select id from tbl_basic a where f_customid = ',c_customerid,' and f_flag = 0 and f_type =',c_typeid,c_where);
    ELSE 
        SET @sql = CONCAT('insert into temp_basic(id) select id from tbl_basic a where f_customid = ',c_customerid,' and f_flag = 0 and f_type =',c_typeid);
    END IF;
 
    PREPARE stmt FROM  @sql;  
    ## 执行SQL语句
    EXECUTE stmt;  
    ## 释放掉预处理段
    deallocate prepare stmt;   
  
    IF c_model = 0 THEN
        SELECT COUNT(*) AS icount FROM temp_basic tb;
    ELSE
        IF c_typeid = 3 THEN
            SET @sql1 = CONCAT('
              SELECT a.*,b.f_name AS f_create_username,c.f_name AS f_update_username,(SELECT GROUP_CONCAT(b.f_name) FROM tbl_provider_type p INNER JOIN tbl_basic b ON p.f_typeid = b.id WHERE p.f_proid = a.id) AS typename
              FROM tbl_basic a
              inner join temp_basic tb1 on a.id = tb1.id
              LEFT JOIN tbl_user b ON a.f_create_user = b.id LEFT JOIN tbl_user c ON a.f_update_user = c.id ',c_order,' limit ',c_bid,',',c_eid);
        ELSE 
            SET @sql1 = CONCAT('
              SELECT a.*,b.f_name AS f_create_username,c.f_name AS f_update_username 
              FROM tbl_basic a
              inner join temp_basic tb1 on a.id = tb1.id
              LEFT JOIN tbl_user b ON a.f_create_user = b.id LEFT JOIN tbl_user c ON a.f_update_user = c.id ',c_order,' limit ',c_bid,',',c_eid) ;
        END IF;
--  
--         SELECT @sql1;
--         LEAVE label;
        PREPARE stmt FROM @sql1;
        EXECUTE stmt;
        DEALLOCATE PREPARE stmt;
    END IF;



    DROP TEMPORARY TABLE IF EXISTS temp_basic;
END
$$ 
DELIMITER ;


--  CALL msp_Postion_Chang (6,4,1,0)
DROP PROCEDURE IF EXISTS msp_Postion_Chang;
-- 资产位置变更存储过程----查询所有单据以最后一次位置写入资产信息表
DELIMITER $$
CREATE PROCEDURE msp_Postion_Chang(
  IN c_model       int, -- 1资产领用 2资产退库 3资产借用 4借用归还 5资产变更 6资产调拨 7资产报废 8资产维修 9  10资产处置
  IN c_mid         int, -- 单据ID
  IN c_userid      int,
  IN c_customerid  int
  )
label: BEGIN
    DECLARE c_waterstate  int;
    DROP TEMPORARY TABLE IF EXISTS temporary_temp_spinfo;
    DROP TEMPORARY TABLE IF EXISTS temporary_temp_各业务关联单据;
    DROP TEMPORARY TABLE IF EXISTS temporary_temp_各业务明细表;
    DROP TEMPORARY TABLE IF EXISTS temporary_temp_最终修改表;

    CREATE TEMPORARY TABLE IF NOT EXISTS temporary_temp_spinfo(id int,f_custody_deptid int,f_custody_userid int,f_postion int);
    CREATE TEMPORARY TABLE IF NOT EXISTS temporary_temp_各业务关联单据(id int,maxdate datetime, atype int);  -- 1领用单  2退库单 
    CREATE TEMPORARY TABLE IF NOT EXISTS temporary_temp_各业务明细表(spid int,f_custody_deptid int,f_custody_userid int,f_postion int, atype int,maxdate datetime,memo varchar(100),lendtype int,借出供应商ID int,
                                                                     借出外部联系人ID int,借出归还日期 datetime,otherstate int);  -- 1领用单  2退库单 
    CREATE TEMPORARY TABLE IF NOT EXISTS temporary_temp_最终修改表(spid int,f_custody_deptid int,f_custody_userid int,f_postion int, atype int,maxdate datetime,memo varchar(100),lendtype int,借出供应商ID int,
                                                                     借出外部联系人ID INT,借出归还日期 datetime,otherstate int);   -- otherstate 资产的其他状态比如报废方式等
    
    -- 先找出要修改的资产信息
    IF c_model = 1 THEN  -- 资产领用
        INSERT INTO temporary_temp_spinfo(id,f_custody_deptid,f_custody_userid,f_postion)
        SELECT trd.f_spid,MAX(trd.f_custody_deptid),MAX(trd.f_custody_userid),MAX(trd.f_postion)
        FROM tbl_receive_detail trd 
        WHERE trd.f_customid = c_customerid AND trd.f_mid = c_mid
        GROUP BY trd.f_spid;
    END IF;
 
    IF c_model = 2 THEN  -- 资产退库
        INSERT INTO temporary_temp_spinfo(id,f_custody_deptid,f_custody_userid,f_postion)
        SELECT trd.f_spid,MAX(trd.f_custody_deptid),MAX(trd.f_custody_userid),MAX(trd.f_postion)
        FROM tbl_return_detail trd  
        WHERE trd.f_customid = c_customerid AND trd.f_mid = c_mid
        GROUP BY trd.f_spid;    
    END IF;
    
    IF c_model = 3 THEN  -- 资产借用
        INSERT INTO temporary_temp_spinfo(id,f_custody_deptid,f_custody_userid,f_postion)
        SELECT trd.f_spid,MAX(trd.f_lend_deptid),MAX((CASE trd.f_Type WHEN 0 THEN  trd.f_Lend_In_people WHEN 1 THEN trd.f_Lend_Out_people WHEN 2 THEN trd.f_Lend_PID ELSE -1 end)),MAX(trd.f_postion)
        FROM tbl_lend_out_detail trd  
        WHERE trd.f_customid = c_customerid AND trd.f_mid = c_mid
        GROUP BY trd.f_spid;  
    END if;

    IF c_model = 4 THEN -- 借用归还
        INSERT INTO temporary_temp_spinfo(id,f_custody_deptid,f_custody_userid,f_postion)
        SELECT trd.f_spid,MAX(trd.f_custody_deptid),MAX(trd.f_custody_userid),MAX(trd.f_postion)
        FROM tbl_lend_in_detail trd  
        WHERE trd.f_customid = c_customerid AND trd.f_mid = c_mid
        GROUP BY trd.f_spid;        
    end IF;
    IF c_model = 5 THEN -- 资产变更
        INSERT INTO temporary_temp_spinfo(id,f_custody_deptid,f_custody_userid,f_postion)
        SELECT trd.f_spid,MAX(trd.f_To_UseDeptid),MAX(trd.f_To_UseUserID),MAX(trd.f_To_Postion)
        FROM tbl_change_detail trd  
        WHERE trd.f_customid = c_customerid AND trd.f_mid = c_mid AND (trd.f_To_UseDeptid <> -1 OR trd.f_To_Postion <> -1 OR trd.f_To_UseUserID <> -1)
        GROUP BY trd.f_spid;        
        
        -- 修改没有变更的商品为属性为原属性
        UPDATE temporary_temp_spinfo a
        INNER JOIN tbl_spinfo ts ON a.id = ts.id
        SET a.f_custody_deptid = ts.f_UseDept
        WHERE a.f_custody_deptid = -1;

        UPDATE temporary_temp_spinfo a
        INNER JOIN tbl_spinfo ts ON a.id = ts.id
        SET a.f_custody_userid = ts.f_CustodyPeople
        WHERE a.f_custody_userid = -1;

        UPDATE temporary_temp_spinfo a
        INNER JOIN tbl_spinfo ts ON a.id = ts.id
        SET a.f_postion = ts.f_PositionDept
        WHERE a.f_postion = -1;
    END IF;

    IF c_model = 6 THEN -- 资产调拨
        INSERT INTO temporary_temp_spinfo(id,f_custody_deptid,f_custody_userid,f_postion)
        SELECT trd.f_spid,MAX(trd.f_custody_deptid),MAX(trd.f_custody_userid),MAX(trd.f_postion)
        FROM tbl_db_detail trd  
        WHERE trd.f_customid = c_customerid AND trd.f_mid = c_mid
        GROUP BY trd.f_spid;    
    END IF;
    IF c_model = 7 THEN -- 资产报废
        INSERT INTO temporary_temp_spinfo(id,f_custody_deptid,f_custody_userid,f_postion)
        SELECT trd.f_spid,MAX(trd.f_custody_deptid),MAX(trd.f_custody_userid),MAX(trd.f_postion)
        FROM tbl_Scrapped_Detail  trd  
        WHERE trd.f_customid = c_customerid AND trd.f_mid = c_mid
        GROUP BY trd.f_spid;        
    END IF;

    if c_model = 8 THEN
        INSERT INTO temporary_temp_spinfo(id,f_custody_deptid,f_custody_userid,f_postion)
        SELECT trd.f_spid,-1,-1,-1
        FROM tbl_repair_detail  trd  
        WHERE trd.f_customid = c_customerid AND trd.f_mid = c_mid
        GROUP BY trd.f_spid;   
    END IF;
    
    IF c_model = 10 THEN
        INSERT INTO temporary_temp_spinfo(id,f_custody_deptid,f_custody_userid,f_postion)
        SELECT trd.f_spid,-1,-1,-1
        FROM tbl_handle_detail  trd  
        WHERE trd.f_customid = c_customerid AND trd.f_mid = c_mid
        GROUP BY trd.f_spid;       
    END IF;

    -- 找出所有关联单据(领用)
    INSERT INTO temporary_temp_各业务关联单据(id,maxdate,atype)
    SELECT trm.id,trm.f_audit_date,1
    FROM temporary_temp_spinfo tts 
    INNER JOIN tbl_receive_detail trd ON tts.id = trd.f_spid
    INNER JOIN tbl_receive_main trm ON trd.f_mid = trm.id
    WHERE trm.f_customid = c_customerid AND  trm.f_audit = 1;
 
    
    -- 再找出最后的位置信息,再把不相关的单都删除(领用)
    DELETE a  FROM temporary_temp_各业务关联单据 a
    INNER JOIN (
        SELECT trd.f_spid,MAX(trm.f_audit_date) AS f_audit_date
        FROM temporary_temp_spinfo tts 
        INNER JOIN tbl_receive_detail trd ON tts.id = trd.f_spid
        INNER JOIN tbl_receive_main trm ON trd.f_mid = trm.id
        WHERE trm.f_customid = c_customerid AND  trm.f_audit = 1
        GROUP BY trd.f_spid
    ) b ON a.maxdate <> b.f_audit_date AND a.atype = 1;

    -- 插入明细表
    INSERT INTO temporary_temp_各业务明细表(spid,f_custody_deptid,f_custody_userid,f_postion, atype,maxdate)
    SELECT trd.f_spid,trd.f_custody_deptid,trd.f_custody_userid,trd.f_postion, atype,tt各.maxdate 
    FROM tbl_receive_detail trd
    INNER JOIN temporary_temp_各业务关联单据 tt各 ON trd.f_mid = tt各.id
    INNER JOIN temporary_temp_spinfo sp ON trd.f_spid = sp.id;
  
    DELETE FROM temporary_temp_各业务关联单据;


    -- 找出所有关联单据(退库)
    INSERT INTO temporary_temp_各业务关联单据(id,maxdate,atype)
    SELECT trm.id,trm.f_audit_date,2
    FROM temporary_temp_spinfo tts 
    INNER JOIN tbl_return_detail   trd ON tts.id = trd.f_spid
    INNER JOIN tbl_return_main  trm ON trd.f_mid = trm.id
    WHERE trm.f_customid = c_customerid AND  trm.f_audit = 1;
    
    -- 再找出最后的位置信息,再把不相关的单都删除(退库)
    DELETE a  FROM temporary_temp_各业务关联单据 a
    INNER JOIN (
        SELECT trd.f_spid,MAX(trm.f_audit_date) AS f_audit_date
        FROM temporary_temp_spinfo tts 
        INNER JOIN tbl_return_detail trd ON tts.id = trd.f_spid
        INNER JOIN tbl_return_main trm ON trd.f_mid = trm.id
        WHERE trm.f_customid = c_customerid AND  trm.f_audit = 1
        GROUP BY trd.f_spid
    ) b ON a.maxdate <> b.f_audit_date AND a.atype =2;


    -- 插入明细表
    INSERT INTO temporary_temp_各业务明细表(spid,f_custody_deptid,f_custody_userid,f_postion, atype,maxdate)
    SELECT trd.f_spid,trd.f_custody_deptid,trd.f_custody_userid,trd.f_postion, atype,tt各.maxdate 
    FROM tbl_return_detail trd
    INNER JOIN temporary_temp_各业务关联单据 tt各 ON trd.f_mid = tt各.id
    INNER JOIN temporary_temp_spinfo sp ON trd.f_spid = sp.id;
  
    DELETE FROM temporary_temp_各业务关联单据;


    -- 找借出表
    INSERT INTO temporary_temp_各业务关联单据(id,maxdate,atype)
    SELECT trm.id,trm.f_audit_date,3
    FROM temporary_temp_spinfo tts 
    INNER JOIN tbl_lend_out_detail trd ON tts.id = trd.f_spid
    INNER JOIN tbl_lend_out_main  trm ON trd.f_mid = trm.id
    WHERE trm.f_customid = c_customerid AND  trm.f_audit = 1;


    -- 再找出最后的位置信息,再把不相关的单都删除(退库)
    DELETE a  FROM temporary_temp_各业务关联单据 a
    INNER JOIN (
        SELECT trd.f_spid,MAX(trm.f_audit_date) AS f_audit_date
        FROM temporary_temp_spinfo tts 
        INNER JOIN tbl_lend_out_detail trd ON tts.id = trd.f_spid
        INNER JOIN tbl_lend_out_main trm ON trd.f_mid = trm.id
        WHERE trm.f_customid = c_customerid AND  trm.f_audit = 1
        GROUP BY trd.f_spid
    ) b ON a.maxdate <> b.f_audit_date AND a.atype =3;


    -- 插入明细表
    INSERT INTO temporary_temp_各业务明细表(spid,f_custody_deptid,f_custody_userid,f_postion, atype,maxdate,lendtype,借出供应商ID,借出外部联系人ID,借出归还日期)
    SELECT trd.f_spid,trd.f_lend_deptid,(CASE trd.f_Type WHEN 0 THEN f_Lend_In_people WHEN 1 THEN trd.f_Lend_Out_people WHEN 2 THEN trd.f_Lend_PID ELSE -1 END) ,
           trd.f_postion, atype,tt各.maxdate,trd.f_Type ,TRD.f_Lend_PID,TRD.f_Lend_Out_people,trd.f_Return_date
    FROM tbl_lend_out_detail trd
    INNER JOIN temporary_temp_各业务关联单据 tt各 ON trd.f_mid = tt各.id
    INNER JOIN temporary_temp_spinfo sp ON trd.f_spid = sp.id;
        
    DELETE FROM temporary_temp_各业务关联单据;


    -- 找借出归还
    INSERT INTO temporary_temp_各业务关联单据(id,maxdate,atype)
    SELECT trm.id,trm.f_audit_date,4
    FROM temporary_temp_spinfo tts 
    INNER JOIN tbl_lend_in_detail trd ON tts.id = trd.f_spid
    INNER JOIN tbl_lend_in_main  trm ON trd.f_mid = trm.id
    WHERE trm.f_customid = c_customerid AND  trm.f_audit = 1;


    -- 再找出最后的位置信息,再把不相关的单都删除(退库)
    DELETE a  FROM temporary_temp_各业务关联单据 a
    INNER JOIN (
        SELECT trd.f_spid,MAX(trm.f_audit_date) AS f_audit_date
        FROM temporary_temp_spinfo tts 
        INNER JOIN tbl_lend_in_detail trd ON tts.id = trd.f_spid
        INNER JOIN tbl_lend_in_main trm ON trd.f_mid = trm.id
        WHERE trm.f_customid = c_customerid AND  trm.f_audit = 1
        GROUP BY trd.f_spid
    ) b ON a.maxdate <> b.f_audit_date AND a.atype =3;


    -- 插入明细表
    INSERT INTO temporary_temp_各业务明细表(spid,f_custody_deptid,f_custody_userid,f_postion, atype,maxdate,lendtype,借出供应商ID,借出外部联系人ID)
    SELECT trd.f_spid,trd.f_custody_deptid,sp.f_custody_userid,sp.f_postion
           , atype,tt各.maxdate,-1,-1,-1
    FROM tbl_lend_in_detail trd
    INNER JOIN temporary_temp_各业务关联单据 tt各 ON trd.f_mid = tt各.id
    INNER JOIN temporary_temp_spinfo sp ON trd.f_spid = sp.id;
        
    DELETE FROM temporary_temp_各业务关联单据;


    -- 找出调拨
    INSERT INTO temporary_temp_各业务关联单据(id,maxdate,atype)
    SELECT trm.id,trm.f_audit_date,6
    FROM temporary_temp_spinfo tts 
    INNER JOIN tbl_DB_Detail  trd ON tts.id = trd.f_spid
    INNER JOIN tbl_DB_Main   trm ON trd.f_mid = trm.id
    WHERE trm.f_customid = c_customerid AND  trm.f_audit = 2; -- 1已调出 2已调入

    -- 再找出最后的位置信息,再把不相关的单都删除(退库)
    DELETE a  FROM temporary_temp_各业务关联单据 a
    INNER JOIN (
        SELECT trd.f_spid,MAX(trm.f_audit_date) AS f_audit_date
        FROM temporary_temp_spinfo tts 
        INNER JOIN tbl_DB_Detail trd ON tts.id = trd.f_spid
        INNER JOIN tbl_DB_Main trm ON trd.f_mid = trm.id
        WHERE trm.f_customid = c_customerid AND  trm.f_audit = 2
        GROUP BY trd.f_spid
    ) b ON a.maxdate <> b.f_audit_date AND a.atype =6;


    -- 插入明细表
    INSERT INTO temporary_temp_各业务明细表(spid,f_custody_deptid,f_custody_userid,f_postion, atype,maxdate,lendtype,借出供应商ID,借出外部联系人ID)
    SELECT trd.f_spid,trd.f_custody_deptid,sp.f_custody_userid,sp.f_postion
           , atype,tt各.maxdate,-1,-1,-1
    FROM tbl_DB_Detail trd
    INNER JOIN temporary_temp_各业务关联单据 tt各 ON trd.f_mid = tt各.id
    INNER JOIN temporary_temp_spinfo sp ON trd.f_spid = sp.id;
    

     -- 找出资产变动主单
    INSERT INTO temporary_temp_各业务关联单据(id,maxdate,atype)
    SELECT trm.id,trm.f_audit_date,5
    FROM temporary_temp_spinfo tts 
    INNER JOIN tbl_Change_Detail trd ON tts.id = trd.f_spid
    INNER JOIN tbl_Change_Main   trm ON trd.f_mid = trm.id
    WHERE trm.f_customid = c_customerid AND  trm.f_audit = 1;  

    -- 再找出最后的位置信息,再把不相关的单都删除
    DELETE a  FROM temporary_temp_各业务关联单据 a
    INNER JOIN (
        SELECT trd.f_spid,MAX(trm.f_audit_date) AS f_audit_date
        FROM temporary_temp_spinfo tts 
        INNER JOIN tbl_DB_Detail trd ON tts.id = trd.f_spid
        INNER JOIN tbl_DB_Main trm ON trd.f_mid = trm.id
        WHERE trm.f_customid = c_customerid AND  trm.f_audit = 1
        GROUP BY trd.f_spid
    ) b ON a.maxdate <> b.f_audit_date AND a.atype =5;


    -- 插入明细表
    INSERT INTO temporary_temp_各业务明细表(spid,f_custody_deptid,f_custody_userid,f_postion, atype,maxdate,lendtype,借出供应商ID,借出外部联系人ID)
    SELECT trd.f_spid,trd.f_To_UseDeptid,sp.f_custody_userid,sp.f_postion
           , atype,tt各.maxdate,-1,-1,-1
    FROM tbl_change_detail trd
    INNER JOIN temporary_temp_各业务关联单据 tt各 ON trd.f_mid = tt各.id
    INNER JOIN temporary_temp_spinfo sp ON trd.f_spid = sp.id;


     -- 找出资产报废主单
    INSERT INTO temporary_temp_各业务关联单据(id,maxdate,atype)
    SELECT trm.id,trm.f_audit_date,7
    FROM temporary_temp_spinfo tts 
    INNER JOIN tbl_scrapped_detail trd ON tts.id = trd.f_spid
    INNER JOIN tbl_Scrapped_Main   trm ON trd.f_mid = trm.id
    WHERE trm.f_customid = c_customerid AND  trm.f_audit = 1;  

    -- 再找出最后的位置信息,再把不相关的单都删除
    DELETE a  FROM temporary_temp_各业务关联单据 a
    INNER JOIN (
        SELECT trd.f_spid,MAX(trm.f_audit_date) AS f_audit_date
        FROM temporary_temp_spinfo tts 
        INNER JOIN tbl_Scrapped_Detail trd ON tts.id = trd.f_spid
        INNER JOIN tbl_Scrapped_Main  trm ON trd.f_mid = trm.id
        WHERE trm.f_customid = c_customerid AND  trm.f_audit = 1
        GROUP BY trd.f_spid
    ) b ON a.maxdate <> b.f_audit_date AND a.atype =7;

    
    -- 插入明细表
    INSERT INTO temporary_temp_各业务明细表(spid,f_custody_deptid,f_custody_userid,f_postion, atype,maxdate,otherstate) -- 当最后一条记录是报废时要把对应的报废方式也更改到资产表
    SELECT trd.f_spid,trd.f_custody_deptid,sp.f_custody_userid,sp.f_postion
           , atype,tt各.maxdate,trd.f_reason
    FROM tbl_Scrapped_Detail  trd
    INNER JOIN temporary_temp_各业务关联单据 tt各 ON trd.f_mid = tt各.id
    INNER JOIN temporary_temp_spinfo sp ON trd.f_spid = sp.id;


     -- 找出资产维修主单
    INSERT INTO temporary_temp_各业务关联单据(id,maxdate,atype)
    SELECT trm.id,trm.f_audit_date,(CASE WHEN trm.f_wxstate IN (1,2) THEN  8 ELSE 9 END) -- 8表示还在维修中，资产状态要打到维修状态 9是已修完状态要打到闲置状态
    FROM temporary_temp_spinfo tts 
    INNER JOIN tbl_repair_detail trd ON tts.id = trd.f_spid
    INNER JOIN tbl_repair_main trm ON trd.f_mid = trm.id
    WHERE trm.f_customid = c_customerid AND  trm.f_wxstate IN (1,2,3) ;   -- 送修，维修中，已修完


    -- 再找出最后的位置信息,再把不相关的单都删除
    DELETE a  FROM temporary_temp_各业务关联单据 a
    INNER JOIN (
        SELECT trd.f_spid,MAX(trm.f_audit_date) AS f_audit_date
        FROM temporary_temp_spinfo tts 
        INNER JOIN tbl_repair_detail trd ON tts.id = trd.f_spid
        INNER JOIN tbl_repair_main trm ON trd.f_mid = trm.id
        WHERE trm.f_customid = c_customerid AND  trm.f_wxstate IN (1,2,3)
        GROUP BY trd.f_spid
    ) b ON a.maxdate <> b.f_audit_date AND a.atype IN (8,9);

    
    -- 插入明细表
    INSERT INTO temporary_temp_各业务明细表(spid,f_custody_deptid,f_custody_userid,f_postion, atype,maxdate,otherstate) 
    SELECT trd.f_spid,ts.f_UseDept,ts.f_UsePeople,ts.f_PositionDept
           , atype,tt各.maxdate,0
    FROM tbl_repair_detail trd
    inner join tbl_spinfo ts on trd.f_spid = ts.id -- 维修不更改位置和使用人等信息
    INNER JOIN temporary_temp_各业务关联单据 tt各 ON trd.f_mid = tt各.id
    INNER JOIN temporary_temp_spinfo sp ON trd.f_spid = sp.id;



     -- 找出资产处置主单
    INSERT INTO temporary_temp_各业务关联单据(id,maxdate,atype)
    SELECT trm.id,trm.f_audit_date,10
    FROM temporary_temp_spinfo tts 
    INNER JOIN tbl_handle_detail trd ON tts.id = trd.f_spid
    INNER JOIN tbl_handle_main trm ON trd.f_mid = trm.id
    WHERE trm.f_customid = c_customerid AND  trm.f_audit = 1;


    -- 再找出最后的位置信息,再把不相关的单都删除
    DELETE a  FROM temporary_temp_各业务关联单据 a
    INNER JOIN (
        SELECT trd.f_spid,MAX(trm.f_audit_date) AS f_audit_date
        FROM temporary_temp_spinfo tts 
        INNER JOIN tbl_handle_detail trd ON tts.id = trd.f_spid
        INNER JOIN tbl_handle_main trm ON trd.f_mid = trm.id
        WHERE trm.f_customid = c_customerid   AND  trm.f_audit = 1
        GROUP BY trd.f_spid
    ) b ON a.maxdate <> b.f_audit_date AND a.atype =10;

    
    -- 插入明细表
    INSERT INTO temporary_temp_各业务明细表(spid,f_custody_deptid,f_custody_userid,f_postion, atype,maxdate,otherstate) 
    SELECT trd.f_spid,-1,-1,-1
           , atype,tt各.maxdate,0
    FROM tbl_handle_detail trd
    inner join tbl_spinfo ts on trd.f_spid = ts.id -- 维修不更改位置和使用人等信息
    INNER JOIN temporary_temp_各业务关联单据 tt各 ON trd.f_mid = tt各.id
    INNER JOIN temporary_temp_spinfo sp ON trd.f_spid = sp.id;


    -- 最终信息修改
    INSERT INTO temporary_temp_最终修改表(spid)
    SELECT id FROM temporary_temp_spinfo;

    UPDATE temporary_temp_最终修改表 a
    INNER JOIN ( SELECT spid,MAX(maxdate) AS maxdate FROM temporary_temp_各业务明细表 GROUP BY spid) b ON a.spid = b.spid
    SET a.maxdate = IFNULL(b.maxdate,NULL);

    UPDATE temporary_temp_最终修改表 a
    INNER JOIN temporary_temp_各业务明细表 b ON a.maxdate = b.maxdate
    sET a.f_custody_deptid = IFNULL(b.f_custody_deptid,-1),a.f_custody_userid=IFNULL(b.f_custody_userid,-1),
        a.f_postion =IFNULL(b.f_postion,-1),a.atype = b.atype,A.lendtype = B.lendtype,A.借出供应商ID=B.借出供应商ID,
        A.借出外部联系人ID = B.借出外部联系人ID,a.借出归还日期 = b.借出归还日期 ,a.otherstate = b.otherstate;

    
    -- 最后更改商品信息位置
    UPDATE temporary_temp_最终修改表 SET 借出供应商ID = -1 WHERE 借出供应商ID IS NULL;
    UPDATE temporary_temp_最终修改表 SET 借出外部联系人ID = -1 WHERE 借出外部联系人ID IS NULL;

    -- 修改前插入流水表
    IF c_model IN (1,2,3,4,6,7,8,10) THEN
       CALL msp_Spinfo_Water(c_model,c_mid,c_userid,c_customerid,c_waterstate); -- c_model 1资产领用 2资产退库 3资产借用 4借用归还 5资产变更 6资产调拨 7资产报废 8资产维修 9  10资产处置
    ELSE 
       SET c_waterstate = 1;
    END IF;

-- SELECT c_waterstate ;
-- LEAVE label;
 
    IF c_waterstate  = 1 THEN

        UPDATE tbl_spinfo SP 
        INNER JOIN temporary_temp_最终修改表 b ON SP.id = b.spid
        SET SP.f_UsePeople=  IFNULL(b.f_custody_userid,-1),SP.f_UseDept = IFNULL(b.f_custody_deptid,-1),SP.f_PositionDept =IFNULL(b.f_postion,-1),SP.f_UseDate = b.maxdate,
            sp.f_Status = (CASE WHEN b.atype = 1 THEN 1 WHEN b.atype = 2 THEN 0 WHEN b.atype =3 THEN 2 WHEN b.atype = 7 THEN -1 WHEN b.atype = 8 THEN 4 WHEN b.atype = 9 then 0 WHEN b.atype = 10 THEN 3 ELSE 0 END),  -- -1	报废 0	闲置 1	领用 2	借用 3处置 4维修中
            SP.f_lend_PID= IFNULL(B.借出供应商ID,-1),SP.f_len_outID = IFNULL(B.借出外部联系人ID,-1),sp.f_lend_type = b.lendtype,sp.f_len_ReturnDate = b.借出归还日期,
            sp.f_OtherState = IFNULL(b.otherstate,-1),sp.f_usecount =sp.f_usecount+1 ;
    
        UPDATE tbl_spinfo ts INNER JOIN  temporary_temp_最终修改表 b ON ts.id = b.spid
        set ts.f_Status = 0 WHERE b.f_custody_deptid  = -1 AND b.f_custody_userid = -1 AND b.f_postion = -1 AND b.借出供应商ID=-1 AND b.借出外部联系人ID = -1 AND b.atype <> 10;  -- 没找到对应单的资产改为闲置状态,处置除外
        
        
     
        SELECT 1 AS f_state;  
    ELSE 
        SELECT -1 AS f_state;
    END IF;

    drop temporary table temporary_temp_spinfo;
    drop temporary table temporary_temp_各业务关联单据;
    drop temporary table temporary_temp_各业务明细表;
    drop temporary table temporary_temp_最终修改表;

END $$
DELIMITER ;   
 



DROP PROCEDURE IF EXISTS Msp_Role_DeptQx;
-- 角色新增修改时查询可操作部门
DELIMITER $$
CREATE PROCEDURE Msp_Role_DeptQx(
  IN c_rolid       int, -- 查询的角色ID，新增角色就传-1，新增时选中状态全是未选，修改时按权限返回是否选中
  IN c_parentid    int, -- 父ID
  IN c_userid      int  -- 查询人，通过人员判断 customid
  )
label: BEGIN
    DECLARE C_cusromid  int;
    DECLARE c_all       int;

    DROP TEMPORARY TABLE IF EXISTS temporary_temp_部门表;

    CREATE TEMPORARY TABLE IF NOT EXISTS temporary_temp_部门表(id int,f_name nvarchar(100),f_pid int,chk int);  -- chk 0不选  1选中
  
    SELECT tu.f_customid INTO C_cusromid FROM tbl_user tu WHERE id = c_userid;  
    SELECT tr.f_DeptType INTO c_all FROM tbl_role tr WHERE ID = c_rolid;
    
    INSERT temporary_temp_部门表(id,f_name,f_pid)
    SELECT id,f_name,td.f_parentid FROM tbl_dept td WHERE td.f_customid = C_cusromid AND td.f_parentid = c_parentid AND td.f_flag = 0 ORDER BY td.f_ordid;

    -- 检查有没有权限
    UPDATE temporary_temp_部门表 tt部  SET tt部.chk = 0;

    IF c_rolid <> -1 THEN
      UPDATE temporary_temp_部门表 tt部 SET tt部.chk = 1 WHERE id IN(SELECT trd.f_deptid FROM tbl_role_deptid trd WHERE trd.f_customid = C_cusromid AND trd.f_roleid = c_rolid);
    END IF;

    IF c_all = 1 THEN
      UPDATE temporary_temp_部门表 tt部 SET tt部.chk = 1;
    END IF;
    
    SELECT * FROM temporary_temp_部门表 tt部;
    DROP TEMPORARY TABLE temporary_temp_部门表;
END $$
DELIMITER;


-- 资产流水浏览
DROP PROCEDURE IF EXISTS Msp_Spinfo_StockList;  
DELIMITER $$
CREATE PROCEDURE Msp_Spinfo_StockList(
    c_spid     int,
    c_userid   int,
    c_model    int,  -- 0查合计  1查明细
    c_curPage int,
    c_pageSize  int)
label:BEGIN
    DECLARE c_customid  int;
    DECLARE c_begiid    int;
    DECLARE c_endid     int;
    
    SET c_begiid = (c_curPage-1)*c_pageSize;

    SELECT f_customid INTO c_customid FROM tbl_user WHERE id = c_userid;   

    DROP TEMPORARY TABLE IF EXISTS temp_spstock_list;

    CREATE TEMPORARY TABLE IF NOT EXISTS temp_spstock_list(spid int,f_type varchar(100), billid varchar(100),stockdate datetime,userid int,f_use_userid int,f_use_deptid int,f_postion int,
                              f_lendtype int,外部联系人ID int,供应商ID int,statename nvarchar(100));
    
    -- 插入领用单明细
    INSERT INTO temp_spstock_list(spid,f_type,billid,stockdate,userid,f_use_userid,f_use_deptid,f_postion,f_lendtype,外部联系人ID,供应商ID,statename)
    SELECT trd.f_spid,'资产领用',trm.f_serno,trm.f_re_date,trm.f_create_user,trd.f_custody_userid,trd.f_custody_deptid,trd.f_postion,-1,-1,-1,'领用'
    FROM tbl_receive_detail trd 
    INNER JOIN tbl_receive_main trm ON trd.f_mid = trm.id
    WHERE trm.f_customid = c_customid AND  trd.f_spid = c_spid AND trm.f_audit = 1;

    -- 插入 领用退库单明细
    INSERT INTO temp_spstock_list(spid,f_type,billid,stockdate,userid,f_use_userid,f_use_deptid,f_postion,f_lendtype,外部联系人ID,供应商ID,statename)
    SELECT trd.f_spid,'领用退库',trm.f_serno,trm.f_return_date,trm.f_create_user,trd.f_custody_userid,trd.f_custody_deptid,trd.f_postion,-1 ,-1,-1,'闲置'
    FROM tbl_return_detail trd INNER JOIN tbl_return_main trm ON trd.f_mid = trm.id
    WHERE trm.f_customid = c_customid AND  trd.f_spid = c_spid AND trm.f_audit = 1;

    -- 插入 借出明细
    INSERT INTO temp_spstock_list(spid,f_type,billid,stockdate,userid,f_use_userid,f_use_deptid,f_postion,f_lendtype,外部联系人ID ,供应商ID,statename)
    SELECT trd.f_spid,'资产借用',trm.f_serno,trm.f_Lend_date,trm.f_create_user,trd.f_Lend_In_people,trd.f_lend_deptid,trd.f_postion,trd.f_Type,trd.f_Lend_Out_people,trd.f_Lend_PID,'借用'
    FROM tbl_lend_out_detail trd INNER JOIN tbl_lend_out_main trm ON trd.f_mid = trm.id
    WHERE trm.f_customid = c_customid AND  trd.f_spid = c_spid AND trm.f_audit = 1;

    -- 插入 借出归还明细
    INSERT INTO temp_spstock_list(spid,f_type,billid,stockdate,userid,f_use_userid,f_use_deptid,f_postion,f_lendtype,外部联系人ID ,供应商ID,statename )
    SELECT trd.f_spid,'借用归还',trm.f_serno,trm.f_R_date,trm.f_create_user,trd.f_custody_userid,trd.f_custody_deptid,trd.f_postion,trd.f_Type,-1,-1,'闲置'
    FROM tbl_lend_in_detail trd INNER JOIN tbl_lend_in_main trm ON trd.f_mid = trm.id
    WHERE trm.f_customid = c_customid AND  trd.f_spid = c_spid AND trm.f_audit = 1;
        
    IF c_model =0 THEN
      SELECT COUNT(*) AS icount FROM temp_spstock_list tsl;
    else
      
      SELECT spid,ts.f_Code,ts.f_Name,  tsl.f_type,  billid,stockdate,tu1.f_name AS createusername,
            (CASE f_lendtype WHEN -1 THEN  tu1.f_name WHEN 0 THEN tu1.f_name WHEN 1 THEN CONCAT('外-',ww.f_name)  WHEN 2 THEN  CONCAT('供-',wp.f_name) ELSE '' END) AS f_use_username, 
            td.f_name AS f_use_deptname,wz.f_name AS f_postionname
      FROM temp_spstock_list tsl 
      INNER JOIN view_spinfo ts ON tsl.spid = ts.id
      LEFT JOIN tbl_dept td ON tsl.f_use_deptid = td.id
      LEFT JOIN tbl_user tu ON tsl.f_use_userid = tu.id
      LEFT JOIN tbl_user tu1 ON tsl.userid = tu1.id
      LEFT JOIN (SELECT id,f_name FROM tbl_basic tb WHERE tb.f_type = 4) wz ON tsl.f_postion = wz.id
      LEFT JOIN (SELECT id,f_name FROM tbl_basic tb WHERE tb.f_type = 3 ) wp ON tsl.供应商ID = wp.id
      LEFT JOIN (SELECT id,f_name FROM tbl_basic tb WHERE tb.f_type = 5 ) ww ON tsl.外部联系人ID = ww.id
      ORDER BY tsl.stockdate LIMIT c_begiid, c_pageSize;
    END IF;

    DROP TEMPORARY TABLE IF EXISTS temp_spstock_list;
END $$
DELIMITER;



 
DROP PROCEDURE IF EXISTS msp_SPinfo_Chang;
-- 单据 资产信息修改,不涉及位置信息，位置修改有另外的存储过程
DELIMITER $$
CREATE PROCEDURE msp_SPinfo_Chang(
  IN c_model       int, -- 1资产处置  2资产报废
  IN c_mid         int, -- 单据ID
  IN c_userid      int,
  IN c_customerid  int
  )
label: BEGIN
    DECLARE c_iresult    int;
    DECLARE c_watertype  int;
    IF c_model = 1 THEN
      SET c_watertype = 8; 
    ELSEIF c_model = 2 THEN
      set c_watertype = 7;
    END IF;

    CALL msp_Spinfo_Water(c_watertype,c_mid,c_userid,c_customerid,c_iresult); -- c_model 1资产领用 2资产退库 3资产借用 4借用归还 5资产变更 6资产调拨

    IF c_iresult = 1 THEN
      SET @t_afterupdat_On_tbl_spinfo = 1; 
      
      IF c_model = 1 then
          UPDATE  tbl_spinfo ts 
    			INNER JOIN tbl_Handle_Detail tcd ON ts.id = tcd.f_spid 
    			INNER JOIN tbl_Handle_Main tcm ON tcd.f_mid = tcm.id 
    			SET ts.f_Status = 3,ts.f_OtherState = tcd.f_state
    			WHERE tcm.id = c_mid AND tcm.f_audit = 1;
      END IF;
      IF c_model = 2 then
          UPDATE  tbl_spinfo ts 
    			INNER JOIN tbl_Scrapped_Detail  tcd ON ts.id = tcd.f_spid 
    			INNER JOIN tbl_Scrapped_Main   tcm ON tcd.f_mid = tcm.id 
    			SET ts.f_Status = -1,ts.f_OtherState = tcd.f_reason
    			WHERE tcm.id = c_mid AND tcm.f_audit = 1;
      END IF;
    END IF;

    SELECT c_iresult AS F_STATE;

END $$
DELIMITER ;  


--  CALL msp_public_dictionary ('处置方式',4,1)
DROP PROCEDURE IF EXISTS msp_public_dictionary;
-- 系统字典查询,如果新客户没有字典这里会自动创建默认字典
DELIMITER $$
CREATE PROCEDURE msp_public_dictionary(
  IN c_model       varchar(100), -- 1资产处置 
  IN c_userid      int,
  IN c_customerid  int,
  IN c_type        int -- 0不返回结果只插入没插的数据  1反回查询结果,也插入数据 
  )
label: BEGIN
    DECLARE c_maxid int;
    DECLARE c_id    int;

    DROP TEMPORARY TABLE IF EXISTS temporary_temp_dictionary; 
    DROP TEMPORARY TABLE IF EXISTS temporary_temp_dictionary_two; 
    CREATE TEMPORARY TABLE temporary_temp_dictionary(ID int,f_name varchar(100),isdel int,newid int);
    CREATE TEMPORARY TABLE temporary_temp_dictionary_two(ID int,f_name varchar(100),isdel int,newid int);
    
    

    IF NOT EXISTS(SELECT id FROM tbl_dictionary td where td.f_customid = c_customerid AND td.f_issys = 1) THEN
        -- 插入第一层
        INSERT INTO tbl_dictionary(f_customid,f_no,f_Ch_name,f_Eh_name,f_parentid,f_status,f_default,f_issys,f_ordid,f_type,f_level,f_create_user,f_create_time,f_accountid)
        SELECT c_customerid,f_no,f_Ch_name,f_Eh_name,f_parentid,f_status,f_default,f_issys,f_ordid,f_type,f_level,f_create_user,f_create_time,f_accountid 
        FROM tbl_dictionary td where td.f_customid = 0 AND td.f_parentid = 0;

        INSERT INTO temporary_temp_dictionary(id,f_name,isdel)
        SELECT id,td.f_Ch_name,0 FROM tbl_dictionary td where td.f_customid = 0 AND td.f_parentid = 0;
        INSERT INTO temporary_temp_dictionary_two(id,f_name,isdel)
        SELECT id,td.f_Ch_name,0 FROM tbl_dictionary td where td.f_customid = 0 AND td.f_parentid = 0;

 

        UPDATE temporary_temp_dictionary a INNER JOIN (SELECT td.id,td.f_Ch_name from tbl_dictionary td where td.f_customid =c_customerid) b ON a.f_name = b.f_Ch_name
        SET a.newid = b.id;
        UPDATE temporary_temp_dictionary_two  a INNER JOIN (SELECT td.id,td.f_Ch_name from tbl_dictionary td where td.f_customid =c_customerid) b ON a.f_name = b.f_Ch_name
        SET a.newid = b.id;
        
  
        
        SELECT MAX(td.id) INTO c_maxid FROM tbl_dictionary td where td.f_customid = c_customerid;

        -- 插入第二层
        INSERT INTO tbl_dictionary(f_customid,f_no,f_Ch_name,f_Eh_name,f_parentid,f_status,f_default,f_issys,f_ordid,f_type,f_level,f_create_user,f_create_time,f_accountid)
        SELECT c_customerid,f_no,f_Ch_name,f_Eh_name,(SELECT newid FROM temporary_temp_dictionary_two WHERE id = td.f_parentid),f_status,f_default,f_issys,f_ordid,f_type,f_level,f_create_user,f_create_time,f_accountid 
        FROM tbl_dictionary td 
        where td.f_customid = 0 AND td.f_parentid IN (SELECT id FROM temporary_temp_dictionary ttd);
        
        
        DELETE FROM temporary_temp_dictionary;
        DELETE FROM temporary_temp_dictionary_two;

        INSERT INTO temporary_temp_dictionary(id,f_name,isdel)
        SELECT td. id,td.f_Ch_name,0 FROM tbl_dictionary td INNER JOIN   (SELECT  f_Ch_name FROM tbl_dictionary td where td.f_customid =c_customerid AND id > c_maxid) b ON td.f_Ch_name = b.f_Ch_name
        WHERE td.f_customid = 0;

 
        INSERT INTO temporary_temp_dictionary_two(id,f_name,isdel)   
        SELECT  td.id,td.f_Ch_name,0 FROM tbl_dictionary td INNER JOIN   (SELECT  f_Ch_name FROM tbl_dictionary td where td.f_customid =c_customerid AND id > c_maxid) b ON td.f_Ch_name = b.f_Ch_name
        WHERE td.f_customid = 0;

        UPDATE temporary_temp_dictionary a INNER JOIN (SELECT td.id,td.f_Ch_name from tbl_dictionary td where td.f_customid =c_customerid) b ON a.f_name = b.f_Ch_name
        SET a.newid = b.id;
        UPDATE temporary_temp_dictionary_two  a INNER JOIN (SELECT td.id,td.f_Ch_name from tbl_dictionary td where td.f_customid =c_customerid) b ON a.f_name = b.f_Ch_name
        SET a.newid = b.id;

        -- 插入第三层
        INSERT INTO tbl_dictionary(f_customid,f_no,f_Ch_name,f_Eh_name,f_parentid,f_status,f_default,f_issys,f_ordid,f_type,f_level,f_create_user,f_create_time,f_accountid)
        SELECT c_customerid,f_no,f_Ch_name,f_Eh_name,(SELECT newid FROM temporary_temp_dictionary_two WHERE id = td.f_parentid),f_status,f_default,f_issys,f_ordid,f_type,f_level,f_create_user,f_create_time,f_accountid 
        FROM tbl_dictionary td 
        where td.f_customid = 0 AND td.f_parentid IN (SELECT id FROM temporary_temp_dictionary ttd);

    END IF;

    IF c_type = 1 THEN
    
        SELECT id INTO c_id from tbl_dictionary td where td.f_customid = c_customerid and td.f_Ch_name = c_model;
         
        SELECT id,td.f_Ch_name,f_no,td.f_parentid from tbl_dictionary td WHERE td.f_customid = c_customerid and  td.f_parentid =c_id;        
  
    ELSE
        SELECT 1 AS f_state;
    END IF;
    DROP TEMPORARY TABLE temporary_temp_dictionary ;
    DROP TEMPORARY TABLE temporary_temp_dictionary_two ;
END $$
DELIMITER ;  


DROP PROCEDURE IF EXISTS Msp_Bus_BillSubmit;   
DELIMITER $$ 
-- 业务提交，辙消提交存储过程，包含状态检测 
CREATE PROCEDURE Msp_Bus_BillSubmit( 
    c_busid      int,  -- 业务类型  602领用申请  401领用 402 资产借用 403资产变更 404资产调拨 405资产退库  501资产维修  502资产报废  504资产处置
    c_mid        int,  -- 主单 ID
    c_userid     int,  -- 操作用户ID
    c_model      int,  -- 操作类型 1提交 0辙消提交  2调拨辙消出 3调拨辙消入库
    c_memo       varchar(500)  -- 操作备注
)

label:BEGIN
    DECLARE C_MAIN_TABLE    varchar(100);  -- 各业务对应表名
    DECLARE C_ERROR_INT     int;           -- 状态返回
    DECLARE C_ERROR_STR     varchar(100);  -- 返回说明
    DECLARE C_STATUS        int;           -- 单据状态
    DECLARE C_OPR           varchar(100);  -- 操作类型

    DROP TEMPORARY TABLE  IF EXISTS TEMP_BUS_BILLSTATE;
 
    
    CREATE TEMPORARY TABLE TEMP_BUS_BILLSTATE(ID int,f_status int,f_audit int,f_is_approval int,f_customid int,f_audit_sys_level int);  -- 审批配置部门表,f_is_approval字段表示是否要审批
    
    SET C_ERROR_INT = 1;
    SET C_ERROR_STR = '';

    IF c_busid = 401 THEN
        SET C_MAIN_TABLE = 'tbl_receive_main';
    ELSEIF c_busid = 402 THEN
        SET C_MAIN_TABLE = 'tbl_lend_out_main';
    ELSEIF c_busid = 403 THEN
        SET C_MAIN_TABLE = 'tbl_change_main';
    ELSEIF c_busid = 404 THEN
        SET C_MAIN_TABLE = 'tbl_db_main';
    ELSEIF c_busid = 405 THEN
        SET C_MAIN_TABLE = 'tbl_return_main';
    ELSEIF c_busid = 406 THEN
        SET C_MAIN_TABLE = 'tbl_lend_in_main';
    ELSEIF c_busid = 501 THEN
        SET C_MAIN_TABLE = 'tbl_repair_main';
    ELSEIF c_busid = 502 THEN
        SET C_MAIN_TABLE = 'tbl_scrapped_main';
    ELSEIF c_busid = 504 THEN
        SET C_MAIN_TABLE = 'tbl_handle_main';
    END IF;


    SET @sql =CONCAT(' insert into TEMP_BUS_BILLSTATE(id,f_status,f_audit,f_is_approval,f_customid,f_audit_sys_level) select id,f_status,f_audit,f_is_approval,f_customid,f_audit_sys_level from ',C_MAIN_TABLE,' where id = ',c_mid);
 
    PREPARE stmt FROM @sql;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;

 
    -- 状态检测
    IF c_model = 1 THEN  -- 提交
        IF NOT EXISTS(SELECT id FROM TEMP_BUS_BILLSTATE WHERE id = c_mid AND f_status IN (0,2)) THEN
            SET C_ERROR_INT = -1;
            SET C_ERROR_STR = '当单据状态不允许提交！';
        END IF;
        set C_OPR = '单据提交';
        
    ELSEif c_model = 0 THEN -- 辙消到草稿
        IF EXISTS(SELECT ID FROM TEMP_BUS_BILLSTATE WHERE f_audit_sys_level = 0) THEN        
            IF NOT EXISTS(SELECT id FROM TEMP_BUS_BILLSTATE WHERE id = c_mid AND f_audit = 1 AND f_audit_Sys_level = 0) THEN
                SET C_ERROR_INT = -1;
                SET C_ERROR_STR = '当单据状态不允许辙消提交！';   
            END IF;       
        else
            IF NOT EXISTS(SELECT id FROM TEMP_BUS_BILLSTATE WHERE id = c_mid AND f_audit = 0 AND f_status = 1) THEN
                SET C_ERROR_INT = -1;
                SET C_ERROR_STR = '当单据状态不允许辙消提交！';   
            END IF;  
        END IF;      
        set C_OPR = '辙消提交';
    ELSEIF c_model = 2 THEN -- 调拨（辙消调出） 维修（辙消送修）
        IF NOT EXISTS(SELECT id FROM TEMP_BUS_BILLSTATE WHERE id = c_mid AND f_audit = 1) THEN
            SET C_ERROR_INT = -1;
            IF c_busid = 404 THEN 
                set C_OPR = '辙消出库'; 
                SET C_ERROR_STR = '当单据状态不允许辙消出库！';
            ELSE
                set C_OPR = '辙消送修'; 
                SET  C_ERROR_STR = '当单据状态不允许辙消送修！';
            END IF;  
        END IF;             
            
    ELSEIF c_model = 3 THEN -- 调拨（辙消调入） 维修（辙消完成维修）
        IF NOT EXISTS(SELECT id FROM TEMP_BUS_BILLSTATE WHERE id = c_mid AND f_audit = 2) THEN
            SET C_ERROR_INT = -1;
            if c_busid = 404 THEN
                set C_OPR = '辙消入库'; 
                SET C_ERROR_STR = '当单据状态不允许辙消入库！';
            ELSE
                set C_OPR = '辙消完结'; 
                SET C_ERROR_STR = '当单据状态不允许辙消！';
            END IF;   
        END IF;                        
    END IF;

 


    -- 开启处理单据状态
    IF (C_ERROR_INT = 1) AND (c_busid <>404) AND (c_busid <> 501) THEN  -- 调拨有维修状态不同单独处理地
        IF c_model = 1 THEN
            SET @sql = CONCAT('  update ',C_MAIN_TABLE,' SET f_audit = 1,f_audit_date=NOW() WHERE ID =',C_MID );                   
        ELSE
            -- 查找单据是否有审批，有审批取消提交后状态为审批完成，没有就是草稿
            IF EXISTS(select id FROM TEMP_BUS_BILLSTATE WHERE id = c_mid AND f_is_approval = 2) THEN
                SET C_STATUS = 2;
            ELSE 
                set C_STATUS = 0;
            END IF;

            SET @sql = CONCAT('  update ',C_MAIN_TABLE,' SET f_audit = 0,f_audit_date=NULL,f_status = ',C_STATUS,' WHERE ID =',C_MID );   
        END IF;
        
   
        PREPARE stmt FROM @sql;
        EXECUTE stmt;
        DEALLOCATE PREPARE stmt; 
    END IF;

    IF (C_ERROR_INT =1) AND (c_busid = 404) THEN
        IF c_model = 1 THEN
            SET @sql = CONCAT('  update ',C_MAIN_TABLE,' SET f_status = 1  WHERE ID =',C_MID );                   
        ELSEIF c_model = 0 THEN -- 辙消到草稿
            SET @sql = CONCAT('  update ',C_MAIN_TABLE,' SET f_status = 0,f_audit = 0,f_audit_date = NULL  WHERE ID =',C_MID ); 
        ELSEIF c_model = 2 THEN  -- 辙消调出
            -- 查找单据是否有审批，有审批取消提交后状态为审批完成，没有就是草稿
            IF EXISTS(select id FROM TEMP_BUS_BILLSTATE WHERE id = c_mid AND f_is_approval = 2) THEN
                SET C_STATUS = 2;
            ELSE 
                set C_STATUS = 0;
            END IF;

            SET @sql = CONCAT('  update ',C_MAIN_TABLE,' SET f_audit = 0,f_audit_date=NULL,f_status = ',C_STATUS,' WHERE ID =',C_MID );   
        ELSEIF c_model = 3 THEN -- 辙消调入
            SET @sql = CONCAT('  update ',C_MAIN_TABLE,' SET f_audit = 1,f_audit_date=now()  WHERE ID =',C_MID );  
        END IF;
        
        PREPARE stmt FROM @sql;
        EXECUTE stmt;
        DEALLOCATE PREPARE stmt; 
    END IF;


    -- 出入库操作，相当于扣减库存,是另一个存储过程，在接口中一起调用,这里不做处理

    -- 打流水
    IF C_ERROR_INT = 1 THEN
        INSERT INTO tbl_billStream(f_customid,f_type,f_opruserid,f_oprtime,f_opr,f_memo,f_busid) 
        SELECT f_customid,c_busid,c_userid,NOW(),C_OPR,c_memo,c_mid  FROM TEMP_BUS_BILLSTATE;
	  END IF;

    SELECT C_ERROR_INT AS f_state,C_ERROR_STR AS f_error;

    DROP TEMPORARY TABLE  IF EXISTS TEMP_BUS_BILLSTATE;
END $$
DELIMITER;

/**********************************************存储过程区域-end*********************************************************/


/**********************************************升级脚本区域- begin*********************************************************/
UPDATE tbl_menu tm SET tm.F_visible = 0 WHERE tm.f_qxid IN (503);
update tbl_menu tm SET tm.f_name = '资产处置',tm.f_alias ='资产处置',tm.f_code ='AssetsHandle' WHERE tm.f_qxid = 504;

update tbl_perms tp SET tp.f_code='AssetsHandle:browse',tp.f_api = 'AssetsHandle/browse' WHERE tp.f_qxid = 50401;
update tbl_perms tp SET tp.f_code='AssetsHandle:create',tp.f_api = 'AssetsHandle/create' WHERE tp.f_qxid = 50402;
update tbl_perms tp SET tp.f_code='AssetsHandle:update',tp.f_api = 'AssetsHandle/update' WHERE tp.f_qxid = 50403;
update tbl_perms tp SET tp.f_code='AssetsHandle:delete',tp.f_api = 'AssetsHandle/delete' WHERE tp.f_qxid = 50404;

INSERT INTO tbl_sys_dictionary(f_customid,f_id,f_name,f_order,f_type,f_status,f_note)
SELECT 0,0,'草稿',1,9,1,'资产处置' WHERE NOT EXISTS(SELECT id FROM tbl_sys_dictionary tsd1 where tsd1.f_type = 9 AND tsd1.f_name ='草稿');
INSERT INTO tbl_sys_dictionary(f_customid,f_id,f_name,f_order,f_type,f_status,f_note)
SELECT 0,1,'单据',1,9,1,'资产处置' WHERE NOT EXISTS(SELECT id FROM tbl_sys_dictionary tsd1 where tsd1.f_type = 9 AND tsd1.f_name ='单据');

INSERT INTO tbl_sys_dictionary(f_customid,f_id,f_name,f_order,f_type,f_status,f_note)
SELECT 0,0,'草稿',1,10,1,'资产报废' WHERE NOT EXISTS(SELECT id FROM tbl_sys_dictionary tsd1 where tsd1.f_type = 10 AND tsd1.f_name ='草稿');
INSERT INTO tbl_sys_dictionary(f_customid,f_id,f_name,f_order,f_type,f_status,f_note)
SELECT 0,1,'单据',1,10,1,'资产报废' WHERE NOT EXISTS(SELECT id FROM tbl_sys_dictionary tsd1 where tsd1.f_type = 10 AND tsd1.f_name ='单据');

INSERT INTO tbl_position(f_customid,f_name,f_status,f_memo,f_create_user,f_create_time,f_ordid)
SELECT tu.f_customid,'总裁' AS f_name,1 as f_status,'' as f_memo,1 AS f_create_user,NOW() as f_create_time,0 as f_ordid FROM tbl_user tu  WHERE NOT EXISTS(SELECT id FROM tbl_position tp where f_name = '总裁')
GROUP BY tu.f_customid; 

INSERT INTO tbl_position(f_customid,f_name,f_status,f_memo,f_create_user,f_create_time,f_ordid)
SELECT tu.f_customid,'经理' AS f_name,1 as f_status,'' as f_memo,1 AS f_create_user,NOW() as f_create_time,0 as f_ordid FROM tbl_user tu  WHERE NOT EXISTS(SELECT id FROM tbl_position tp where f_name = '经理')
GROUP BY tu.f_customid; 

INSERT INTO tbl_position(f_customid,f_name,f_status,f_memo,f_create_user,f_create_time,f_ordid)
SELECT tu.f_customid,'财务' AS f_name,1 as f_status,'' as f_memo,1 AS f_create_user,NOW() as f_create_time,0 as f_ordid FROM tbl_user tu  WHERE NOT EXISTS(SELECT id FROM tbl_position tp where f_name = '财务')
GROUP BY tu.f_customid; 

INSERT INTO tbl_position(f_customid,f_name,f_status,f_memo,f_create_user,f_create_time,f_ordid)
SELECT tu.f_customid,'主管' AS f_name,1 as f_status,'' as f_memo,1 AS f_create_user,NOW() as f_create_time,0 as f_ordid FROM tbl_user tu  WHERE NOT EXISTS(SELECT id FROM tbl_position tp where f_name = '主管')
GROUP BY tu.f_customid; 

alter table tbl_Handle_Main comment '资产处置主表';
alter table tbl_Handle_Detail comment '资产处置从表';
alter table tbl_scrapped_main comment '资产报废主表';
alter table tbl_scrapped_detail comment '资产报废从表';
alter table tbl_role_data_perms comment '角色关联权限表';
alter table tbl_role_deptid comment '角色关联部门表';
alter table tbl_role_type comment '角色关联资产类别表，这个角色可以使用哪些类别';
alter table tbl_role_user comment '角色关联用户表';
alter table tbl_spinfo comment '资产信息表';
alter table tbl_spinfo_pic comment '资产图片表';
alter table tbl_spinfo_water comment '资产变动流水日志表';
alter table tbl_system comment '系统表，比如证书等';
alter table tbl_token comment 'TOKEN记录表';
alter table tbl_user comment '用户表';
alter table sys_get_bill comment '单号获取表，用来记录最后一次的单号';
alter table sys_log comment '操作日志表';
alter table tbl_basic comment '基础资料表 存供应商，存放位置等';
alter table tbl_change_detail comment '资产变更从表';
alter table tbl_change_main comment '资产变更主表';
alter table tbl_db_detail comment '调拨从表';
alter table tbl_db_main comment '调拨主表';
alter table tbl_dept comment '部门表';
alter table tbl_dictionary comment '数据字典表，包含系统认字典和客户自定义字典';
alter table tbl_lend_in_detail comment '借用归还从表';
alter table tbl_lend_in_main comment '借用归还主表';
alter table tbl_lend_out_detail comment '借用从表';
alter table tbl_lend_out_main comment '借用主表';
alter table tbl_menu comment '系统功能表';
alter table tbl_perms comment '系统功能对应权限表';
alter table tbl_provider_type comment '供应商类型表';
alter table tbl_receive_apply_detail comment '领用申请从表';
alter table tbl_receive_apply_main comment '领用申请主表';
alter table tbl_receive_detail comment '领用从表';
alter table tbl_receive_main comment '领用主表';
alter table tbl_return_detail comment '领用退库从表';
alter table tbl_role COMMENT '角色表';

INSERT INTO tbl_sys_dictionary(f_customid,f_id,f_name,f_order,f_type,f_status,f_note)
SELECT 0,-1,'已关闭',1,11,1,'资产维修' WHERE NOT EXISTS(SELECT id FROM tbl_sys_dictionary tsd1 where tsd1.f_type = 11 AND tsd1.f_name ='已关闭');
INSERT INTO tbl_sys_dictionary(f_customid,f_id,f_name,f_order,f_type,f_status,f_note)
SELECT 0,0,'草稿',1,11,1,'资产维修' WHERE NOT EXISTS(SELECT id FROM tbl_sys_dictionary tsd1 where tsd1.f_type = 11 AND tsd1.f_name ='草稿');
INSERT INTO tbl_sys_dictionary(f_customid,f_id,f_name,f_order,f_type,f_status,f_note)
SELECT 0,1,'已申请',1,11,1,'资产维修' WHERE NOT EXISTS(SELECT id FROM tbl_sys_dictionary tsd1 where tsd1.f_type = 11 AND tsd1.f_name ='已申请');
INSERT INTO tbl_sys_dictionary(f_customid,f_id,f_name,f_order,f_type,f_status,f_note)
SELECT 0,2,'已送修',1,11,1,'资产维修' WHERE NOT EXISTS(SELECT id FROM tbl_sys_dictionary tsd1 where tsd1.f_type = 11 AND tsd1.f_name ='已送修');
INSERT INTO tbl_sys_dictionary(f_customid,f_id,f_name,f_order,f_type,f_status,f_note)
SELECT 0,3,'已修完',1,11,1,'资产维修' WHERE NOT EXISTS(SELECT id FROM tbl_sys_dictionary tsd1 where tsd1.f_type = 11 AND tsd1.f_name ='已修完');
INSERT INTO tbl_sys_dictionary(f_customid,f_id,f_name,f_order,f_type,f_status,f_note)
SELECT 0,4,'交付完成',1,11,1,'资产维修' WHERE NOT EXISTS(SELECT id FROM tbl_sys_dictionary tsd1 where tsd1.f_type = 11 AND tsd1.f_name ='交付完成'); 

-- 加入权限
INSERT INTO tbl_perms(f_qxid,f_menu_id,f_name,f_code,f_api,f_method,f_status,f_orderid,f_create_user,f_create_time,f_flag)
SELECT * FROM (

  SELECT CONCAT(f_qxid,'05') AS qxid,f_qxid,'拒绝' AS f_name,CONCAT(f_code,':refuse')AS d,CONCAT(f_code,'/refuse') AS ff,5 AS f_method,1 f_status,5 f_orderid,1 f_create_user,now() f_create_time,0 f_flat 
  FROM tbl_menu 
  WHERE f_qxid = 501 AND  NOT EXISTS(SELECT id FROM tbl_perms tsd1 WHERE tsd1.f_menu_id = 501 AND f_qxid =50105)
  UNION all
  SELECT CONCAT(f_qxid,'06') AS qxid,f_qxid,'送修' AS f_name,CONCAT(f_code,':confirm')AS d,CONCAT(f_code,'/confirm') AS ff,6 AS f_method ,1 f_status,6 f_orderid,1 f_create_user,now() f_create_time,0 f_flat 
  FROM tbl_menu 
  WHERE f_qxid = 501 AND  NOT EXISTS(SELECT id FROM tbl_perms tsd1 WHERE tsd1.f_menu_id = 501 AND f_qxid =50106)
  UNION all
  SELECT CONCAT(f_qxid,'07') AS qxid,f_qxid,'修理完成' AS f_name,CONCAT(f_code,':repair')AS d,CONCAT(f_code,'/repair') AS ff,7 AS f_method ,1 f_status,7 f_orderid,1 f_create_user,now() f_create_time,0 f_flat 
  FROM tbl_menu 
  WHERE f_qxid = 501 AND  NOT EXISTS(SELECT id FROM tbl_perms tsd1 WHERE tsd1.f_menu_id = 501 AND f_qxid =50107)
  UNION all
  SELECT CONCAT(f_qxid,'08') AS qxid,f_qxid,'交付完成' AS f_name,CONCAT(f_code,':complete')AS d,CONCAT(f_code,'/complete') AS ff,8 AS f_method ,1 f_status,8 f_orderid,1 f_create_user,now() f_create_time,0 f_flat 
  FROM tbl_menu 
  WHERE f_qxid = 501 AND  NOT EXISTS(SELECT id FROM tbl_perms tsd1 WHERE tsd1.f_menu_id = 501 AND f_qxid =50108)

) a ORDER BY f_qxid,f_orderid;


alter table tbl_spinfo modify column f_len_ReturnDate datetime NULL comment '最后归还时间';


UPDATE tbl_menu tm SET tm.f_orderid = 2 where tm.f_qxid = 111;
UPDATE tbl_menu tm SET tm.f_orderid = 3 where tm.f_qxid = 102;
UPDATE tbl_menu tm SET tm.f_orderid = 4 where tm.f_qxid = 104;
UPDATE tbl_menu tm SET tm.f_orderid = 5 where tm.f_qxid = 109;
update tbl_menu tm SET tm.f_flag = 0 WHERE tm.f_qxid = 109;
UPDATE tbl_menu tm SET tm.f_flag = 1 WHERE tm.f_qxid = 110;
UPDATE tbl_menu tm SET f_pid = 9 where tm.f_qxid = 905;

UPDATE tbl_menu tm set tm.f_flag  = 1 WHERE tm.f_qxid = 3;
UPDATE tbl_menu tm set tm.f_flag  = 1 WHERE tm.f_pid = 3;

UPDATE tbl_menu tm SET tm.f_flag = 0,tm.f_orderid = 0,tm.f_pid = 4 WHERE tm.f_qxid = 602;
UPDATE tbl_menu tm SET tm.f_flag = 0,tm.f_orderid = 1,tm.f_pid = 4 WHERE tm.f_qxid = 401;
UPDATE tbl_menu tm SET tm.f_flag = 0,tm.f_orderid = 2,tm.f_pid = 4 WHERE tm.f_qxid = 405;
UPDATE tbl_menu tm SET tm.f_flag = 0,tm.f_orderid = 3,tm.f_pid = 4 WHERE tm.f_qxid = 402;
UPDATE tbl_menu tm SET tm.f_flag = 0,tm.f_orderid = 4,tm.f_pid = 4 WHERE tm.f_qxid = 406;
UPDATE tbl_menu tm SET tm.f_flag = 0,tm.f_orderid = 5,tm.f_pid = 4 WHERE tm.f_qxid = 403;
UPDATE tbl_menu tm SET tm.f_flag = 0,tm.f_orderid = 6,tm.f_pid = 4 WHERE tm.f_qxid = 404;
UPDATE tbl_menu tm set tm.f_flag  = 1 WHERE tm.f_qxid = 6;
UPDATE tbl_menu tm set tm.f_flag  = 1 WHERE tm.f_pid = 6;
UPDATE tbl_menu tm SET tm.f_flag = 1 WHERE tm.f_qxid = 901;
UPDATE tbl_menu tm set tm.f_orderid = 5 WHERE tm.f_qxid = 904;


INSERT INTO tbl_Audit_Process_Set(f_accountid,f_customid,f_busid,f_first_bool,f_first_deptid,f_first_PostionID,f_create_user,f_create_time)
SELECT a.accountid,a.f_customid,a.f_qxid,a.f_first_bool,a.f_first_deptid,a.f_first_PostionID,a.f_create_user,a.f_create_time 
FROM (
  SELECT a.*,IFNULL(b.f_busid,-1) AS newid FROM (
    SELECT 1 as accountid,b.f_customid,tm.f_qxid,1 as f_first_bool,-1 AS f_first_deptid,-1 AS f_first_PostionID,1 AS f_create_user,NOW() AS f_create_time FROM tbl_menu tm 
    INNER JOIN (SELECT tu.f_customid from tbl_user tu GROUP BY tu.f_customid) b ON 1=1
    WHERE tm.f_qxid IN (602)  
  )a
  LEFT JOIN (SELECT taps.f_busid,taps.f_customid FROM tbl_audit_process_set taps WHERE taps.f_busid IN (602) AND taps.f_customid IN (SELECT tu.f_customid from tbl_user tu GROUP BY tu.f_customid )) b ON a.f_qxid = b.f_busid AND a.f_customid = b.f_customid
) a WHERE a.newid = -1;


INSERT INTO tbl_Audit_Process_Set(f_accountid,f_customid,f_busid,f_busname,f_first_bool,f_first_deptid,f_first_PostionID,f_create_user,f_create_time)
SELECT a.accountid,a.f_customid,a.f_qxid,a.f_name,a.f_first_bool,a.f_first_deptid,a.f_first_PostionID,a.f_create_user,a.f_create_time 
FROM (
  SELECT a.*,IFNULL(b.f_busid,-1) AS newid FROM (
    SELECT 1 as accountid,b.f_customid,tm.f_qxid,tm.f_name,1 as f_first_bool,-1 AS f_first_deptid,-1 AS f_first_PostionID,1 AS f_create_user,NOW() AS f_create_time FROM tbl_menu tm 
    INNER JOIN (SELECT tu.f_customid from tbl_user tu GROUP BY tu.f_customid) b ON 1=1
    WHERE tm.f_qxid IN (602)  
  )a
  LEFT JOIN (SELECT taps.f_busid,taps.f_customid FROM tbl_audit_process_set taps WHERE taps.f_busid IN (602) AND taps.f_customid IN (SELECT tu.f_customid from tbl_user tu GROUP BY tu.f_customid )) b ON a.f_qxid = b.f_busid AND a.f_customid = b.f_customid
) a WHERE a.newid = -1;

update tbl_sys_dictionary tsd set tsd.f_note2 = '主管或是经理审批，不管是几级审批没完成时都叫待审批' WHERE f_id = 1 and tsd.f_type = 1;
update tbl_sys_dictionary tsd set tsd.f_note2 = '最后确认人，这步是仓库确认' WHERE f_id = 2 and tsd.f_type = 1;


UPDATE tbl_dictionary td SET td.f_status = 0 WHERE id = 6;  -- 职位单独做页面，这里隐藏
insert into tbl_menu(f_qxid,f_pid,f_code,f_name,f_alias,f_component,f_status,f_type,f_level,f_orderid,f_create_user,f_create_time,f_flag)
SELECT 906,9,'Position','职位管理','职位管理',0,1,1,2,1,1,NOW(),0 where NOT EXISTS(SELECT id from tbl_menu WHERE f_qxid = 906);

insert into tbl_menu(f_qxid,f_pid,f_code,f_name,f_alias,f_component,f_status,f_type,f_level,f_orderid,f_create_user,f_create_time,f_flag)
SELECT 930,9,'SystemOption','系统设置','系统设置',0,1,1,2,30,1,NOW(),0 where NOT EXISTS(SELECT id from tbl_menu WHERE f_qxid = 930);


UPDATE tbl_sys_dictionary tsd SET f_name = '审批完成' WHERE tsd.f_type =1 and f_id = 2;
update tbl_sys_dictionary tsd SET tsd.f_status = 0 WHERE tsd.f_type =1 and f_id = 3;


INSERT INTO tbl_perms (f_qxid,f_menu_id,f_name,f_code,f_api,f_method,f_status,f_orderid,f_create_user,f_create_time,f_flag)
SELECT * FROM (

  SELECT CONCAT(f_qxid,'01') AS qxid,f_qxid,'浏览' AS f_name,CONCAT(f_code,':browse')AS d,CONCAT(f_code,'/browse') AS ff,5 AS f_method,1 f_status,5 f_orderid,1 f_create_user,now() f_create_time,0 f_flat 
  FROM tbl_menu 
  WHERE f_qxid = 906 AND  NOT EXISTS(SELECT id FROM tbl_perms tsd1 WHERE tsd1.f_menu_id = 906 AND f_qxid =90601)
  UNION all
  SELECT CONCAT(f_qxid,'02') AS qxid,f_qxid,'新增' AS f_name,CONCAT(f_code,':create')AS d,CONCAT(f_code,'/create') AS ff,6 AS f_method ,1 f_status,6 f_orderid,1 f_create_user,now() f_create_time,0 f_flat 
  FROM tbl_menu 
  WHERE f_qxid = 906 AND  NOT EXISTS(SELECT id FROM tbl_perms tsd1 WHERE tsd1.f_menu_id = 906 AND f_qxid =90602)
  UNION all
  SELECT CONCAT(f_qxid,'03') AS qxid,f_qxid,'修改' AS f_name,CONCAT(f_code,':update')AS d,CONCAT(f_code,'/update') AS ff,7 AS f_method ,1 f_status,7 f_orderid,1 f_create_user,now() f_create_time,0 f_flat 
  FROM tbl_menu 
  WHERE f_qxid = 906 AND  NOT EXISTS(SELECT id FROM tbl_perms tsd1 WHERE tsd1.f_menu_id = 906 AND f_qxid =90603)
  UNION all
  SELECT CONCAT(f_qxid,'04') AS qxid,f_qxid,'删除' AS f_name,CONCAT(f_code,':delete')AS d,CONCAT(f_code,'/delete') AS ff,8 AS f_method ,1 f_status,8 f_orderid,1 f_create_user,now() f_create_time,0 f_flat 
  FROM tbl_menu 
  WHERE f_qxid = 906 AND  NOT EXISTS(SELECT id FROM tbl_perms tsd1 WHERE tsd1.f_menu_id = 906 AND f_qxid =90604)

) a ORDER BY f_qxid,f_orderid; 


INSERT INTO tbl_perms (f_qxid,f_menu_id,f_name,f_code,f_api,f_method,f_status,f_orderid,f_create_user,f_create_time,f_flag)
SELECT * FROM (

  SELECT CONCAT(f_qxid,'01') AS qxid,f_qxid,'浏览' AS f_name,CONCAT(f_code,':browse')AS d,CONCAT(f_code,'/browse') AS ff,5 AS f_method,1 f_status,5 f_orderid,1 f_create_user,now() f_create_time,0 f_flat 
  FROM tbl_menu 
  WHERE f_qxid = 930 AND  NOT EXISTS(SELECT id FROM tbl_perms tsd1 WHERE tsd1.f_menu_id = 930 AND f_qxid =93001)
  UNION all
  SELECT CONCAT(f_qxid,'02') AS qxid,f_qxid,'修改' AS f_name,CONCAT(f_code,':update')AS d,CONCAT(f_code,'/update') AS ff,6 AS f_method ,1 f_status,6 f_orderid,1 f_create_user,now() f_create_time,0 f_flat 
  FROM tbl_menu 
  WHERE f_qxid = 930 AND  NOT EXISTS(SELECT id FROM tbl_perms tsd1 WHERE tsd1.f_menu_id = 930 AND f_qxid =93002) 

) a ORDER BY f_qxid,f_orderid; 



INSERT INTO tbl_position(f_customid,f_name,f_status,f_memo,f_create_user,f_create_time,f_ordid)
SELECT a.f_customid ,a.f_name,a.f_status,a.f_memo,a.f_create_user,a.f_create_time,a.f_ordid
FROM (
  SELECT a.*,IFNULL(tp.id,-1) AS newid
  FROM ( SELECT tu.f_customid,'总裁' AS f_name,0 as f_status,'' as f_memo,1 as f_create_user,NOW() as f_create_time,0 as f_ordid FROM tbl_user tu GROUP BY tu.f_customid )a
  left join tbl_position tp ON a.f_customid = tp.f_customid AND a.f_name = tp.f_name
)a WHERE a.newid = -1;
INSERT INTO tbl_position(f_customid,f_name,f_status,f_memo,f_create_user,f_create_time,f_ordid)
SELECT a.f_customid ,a.f_name,a.f_status,a.f_memo,a.f_create_user,a.f_create_time,a.f_ordid
FROM (
  SELECT a.*,IFNULL(tp.id,-1) AS newid
  FROM ( SELECT tu.f_customid,'经理' AS f_name,0 as f_status,'' as f_memo,1 as f_create_user,NOW() as f_create_time,1 as f_ordid FROM tbl_user tu GROUP BY tu.f_customid )a
  left join tbl_position tp ON a.f_customid = tp.f_customid AND a.f_name = tp.f_name
)a WHERE a.newid = -1;
INSERT INTO tbl_position(f_customid,f_name,f_status,f_memo,f_create_user,f_create_time,f_ordid)
SELECT a.f_customid ,a.f_name,a.f_status,a.f_memo,a.f_create_user,a.f_create_time,a.f_ordid
FROM (
  SELECT a.*,IFNULL(tp.id,-1) AS newid
  FROM ( SELECT tu.f_customid,'财务' AS f_name,0 as f_status,'' as f_memo,1 as f_create_user,NOW() as f_create_time,2 as f_ordid FROM tbl_user tu GROUP BY tu.f_customid )a
  left join tbl_position tp ON a.f_customid = tp.f_customid AND a.f_name = tp.f_name
)a WHERE a.newid = -1;
INSERT INTO tbl_position(f_customid,f_name,f_status,f_memo,f_create_user,f_create_time,f_ordid)
SELECT a.f_customid ,a.f_name,a.f_status,a.f_memo,a.f_create_user,a.f_create_time,a.f_ordid
FROM (
  SELECT a.*,IFNULL(tp.id,-1) AS newid
  FROM ( SELECT tu.f_customid,'主管' AS f_name,0 as f_status,'' as f_memo,1 as f_create_user,NOW() as f_create_time,3 as f_ordid FROM tbl_user tu GROUP BY tu.f_customid )a
  left join tbl_position tp ON a.f_customid = tp.f_customid AND a.f_name = tp.f_name
)a WHERE a.newid = -1;



INSERT INTO tbl_Audit_Process_Set(f_accountid,f_customid,f_busid,f_busname,f_first_bool,f_first_deptid,f_first_PostionID,f_create_user,f_create_time)
SELECT a.accountid,a.f_customid,a.f_qxid,a.f_name,a.f_first_bool,a.f_first_deptid,a.f_first_PostionID,a.f_create_user,a.f_create_time 
FROM (
  SELECT a.*,IFNULL(b.f_busid,-1) AS newid FROM (
    SELECT 1 as accountid,b.f_customid,tm.f_qxid,1 as f_first_bool,-1 AS f_first_deptid,-1 AS f_first_PostionID,1 AS f_create_user,NOW() AS f_create_time,tm.f_name FROM tbl_menu tm 
    INNER JOIN (SELECT tu.f_customid from tbl_user tu GROUP BY tu.f_customid) b ON 1=1
    WHERE tm.f_qxid IN (401)  
  )a
  LEFT JOIN (SELECT taps.f_busid,taps.f_customid FROM tbl_audit_process_set taps WHERE taps.f_busid IN (401) AND taps.f_customid IN (SELECT tu.f_customid from tbl_user tu GROUP BY tu.f_customid )) b ON a.f_qxid = b.f_busid AND a.f_customid = b.f_customid
) a WHERE a.newid = -1;


INSERT INTO tbl_Audit_Process_Set(f_accountid,f_customid,f_busid,f_busname,f_first_bool,f_first_deptid,f_first_PostionID,f_create_user,f_create_time)
SELECT a.accountid,a.f_customid,a.f_qxid,a.f_name,a.f_first_bool,a.f_first_deptid,a.f_first_PostionID,a.f_create_user,a.f_create_time 
FROM (
  SELECT a.*,IFNULL(b.f_busid,-1) AS newid FROM (
    SELECT 1 as accountid,b.f_customid,tm.f_qxid,1 as f_first_bool,-1 AS f_first_deptid,-1 AS f_first_PostionID,1 AS f_create_user,NOW() AS f_create_time,tm.f_name FROM tbl_menu tm 
    INNER JOIN (SELECT tu.f_customid from tbl_user tu GROUP BY tu.f_customid) b ON 1=1
    WHERE tm.f_qxid IN (402)  
  )a
  LEFT JOIN (SELECT taps.f_busid,taps.f_customid FROM tbl_audit_process_set taps WHERE taps.f_busid IN (402) AND taps.f_customid IN (SELECT tu.f_customid from tbl_user tu GROUP BY tu.f_customid )) b ON a.f_qxid = b.f_busid AND a.f_customid = b.f_customid
) a WHERE a.newid = -1;

INSERT INTO tbl_Audit_Process_Set(f_accountid,f_customid,f_busid,f_busname,f_first_bool,f_first_deptid,f_first_PostionID,f_create_user,f_create_time)
SELECT a.accountid,a.f_customid,a.f_qxid,a.f_name,a.f_first_bool,a.f_first_deptid,a.f_first_PostionID,a.f_create_user,a.f_create_time 
FROM (
  SELECT a.*,IFNULL(b.f_busid,-1) AS newid FROM (
    SELECT 1 as accountid,b.f_customid,tm.f_qxid,1 as f_first_bool,-1 AS f_first_deptid,-1 AS f_first_PostionID,1 AS f_create_user,NOW() AS f_create_time,tm.f_name FROM tbl_menu tm 
    INNER JOIN (SELECT tu.f_customid from tbl_user tu GROUP BY tu.f_customid) b ON 1=1
    WHERE tm.f_qxid IN (403)  
  )a
  LEFT JOIN (SELECT taps.f_busid,taps.f_customid FROM tbl_audit_process_set taps WHERE taps.f_busid IN (403) AND taps.f_customid IN (SELECT tu.f_customid from tbl_user tu GROUP BY tu.f_customid )) b ON a.f_qxid = b.f_busid AND a.f_customid = b.f_customid
) a WHERE a.newid = -1;

INSERT INTO tbl_Audit_Process_Set(f_accountid,f_customid,f_busid,f_busname,f_first_bool,f_first_deptid,f_first_PostionID,f_create_user,f_create_time)
SELECT a.accountid,a.f_customid,a.f_qxid,a.f_name,a.f_first_bool,a.f_first_deptid,a.f_first_PostionID,a.f_create_user,a.f_create_time 
FROM (
  SELECT a.*,IFNULL(b.f_busid,-1) AS newid FROM (
    SELECT 1 as accountid,b.f_customid,tm.f_qxid,1 as f_first_bool,-1 AS f_first_deptid,-1 AS f_first_PostionID,1 AS f_create_user,NOW() AS f_create_time,tm.f_name FROM tbl_menu tm 
    INNER JOIN (SELECT tu.f_customid from tbl_user tu GROUP BY tu.f_customid) b ON 1=1
    WHERE tm.f_qxid IN (404)  
  )a
  LEFT JOIN (SELECT taps.f_busid,taps.f_customid FROM tbl_audit_process_set taps WHERE taps.f_busid IN (404) AND taps.f_customid IN (SELECT tu.f_customid from tbl_user tu GROUP BY tu.f_customid )) b ON a.f_qxid = b.f_busid AND a.f_customid = b.f_customid
) a WHERE a.newid = -1;

INSERT INTO tbl_Audit_Process_Set(f_accountid,f_customid,f_busid,f_busname,f_first_bool,f_first_deptid,f_first_PostionID,f_create_user,f_create_time)
SELECT a.accountid,a.f_customid,a.f_qxid,a.f_name,a.f_first_bool,a.f_first_deptid,a.f_first_PostionID,a.f_create_user,a.f_create_time 
FROM (
  SELECT a.*,IFNULL(b.f_busid,-1) AS newid FROM (
    SELECT 1 as accountid,b.f_customid,tm.f_qxid,1 as f_first_bool,-1 AS f_first_deptid,-1 AS f_first_PostionID,1 AS f_create_user,NOW() AS f_create_time,tm.f_name FROM tbl_menu tm 
    INNER JOIN (SELECT tu.f_customid from tbl_user tu GROUP BY tu.f_customid) b ON 1=1
    WHERE tm.f_qxid IN (405)  
  )a
  LEFT JOIN (SELECT taps.f_busid,taps.f_customid FROM tbl_audit_process_set taps WHERE taps.f_busid IN (405) AND taps.f_customid IN (SELECT tu.f_customid from tbl_user tu GROUP BY tu.f_customid )) b ON a.f_qxid = b.f_busid AND a.f_customid = b.f_customid
) a WHERE a.newid = -1;

INSERT INTO tbl_Audit_Process_Set(f_accountid,f_customid,f_busid,f_busname,f_first_bool,f_first_deptid,f_first_PostionID,f_create_user,f_create_time)
SELECT a.accountid,a.f_customid,a.f_qxid,a.f_name,a.f_first_bool,a.f_first_deptid,a.f_first_PostionID,a.f_create_user,a.f_create_time 
FROM (
  SELECT a.*,IFNULL(b.f_busid,-1) AS newid FROM (
    SELECT 1 as accountid,b.f_customid,tm.f_qxid,1 as f_first_bool,-1 AS f_first_deptid,-1 AS f_first_PostionID,1 AS f_create_user,NOW() AS f_create_time,tm.f_name FROM tbl_menu tm 
    INNER JOIN (SELECT tu.f_customid from tbl_user tu GROUP BY tu.f_customid) b ON 1=1
    WHERE tm.f_qxid IN (406)  
  )a
  LEFT JOIN (SELECT taps.f_busid,taps.f_customid FROM tbl_audit_process_set taps WHERE taps.f_busid IN (406) AND taps.f_customid IN (SELECT tu.f_customid from tbl_user tu GROUP BY tu.f_customid )) b ON a.f_qxid = b.f_busid AND a.f_customid = b.f_customid
) a WHERE a.newid = -1;

INSERT INTO tbl_Audit_Process_Set(f_accountid,f_customid,f_busid,f_busname,f_first_bool,f_first_deptid,f_first_PostionID,f_create_user,f_create_time)
SELECT a.accountid,a.f_customid,a.f_qxid,a.f_name,a.f_first_bool,a.f_first_deptid,a.f_first_PostionID,a.f_create_user,a.f_create_time 
FROM (
  SELECT a.*,IFNULL(b.f_busid,-1) AS newid FROM (
    SELECT 1 as accountid,b.f_customid,tm.f_qxid,1 as f_first_bool,-1 AS f_first_deptid,-1 AS f_first_PostionID,1 AS f_create_user,NOW() AS f_create_time,tm.f_name FROM tbl_menu tm 
    INNER JOIN (SELECT tu.f_customid from tbl_user tu GROUP BY tu.f_customid) b ON 1=1
    WHERE tm.f_qxid IN (501)  
  )a
  LEFT JOIN (SELECT taps.f_busid,taps.f_customid FROM tbl_audit_process_set taps WHERE taps.f_busid IN (501) AND taps.f_customid IN (SELECT tu.f_customid from tbl_user tu GROUP BY tu.f_customid )) b ON a.f_qxid = b.f_busid AND a.f_customid = b.f_customid
) a WHERE a.newid = -1;

INSERT INTO tbl_Audit_Process_Set(f_accountid,f_customid,f_busid,f_busname,f_first_bool,f_first_deptid,f_first_PostionID,f_create_user,f_create_time)
SELECT a.accountid,a.f_customid,a.f_qxid,a.f_name,a.f_first_bool,a.f_first_deptid,a.f_first_PostionID,a.f_create_user,a.f_create_time 
FROM (
  SELECT a.*,IFNULL(b.f_busid,-1) AS newid FROM (
    SELECT 1 as accountid,b.f_customid,tm.f_qxid,1 as f_first_bool,-1 AS f_first_deptid,-1 AS f_first_PostionID,1 AS f_create_user,NOW() AS f_create_time,tm.f_name FROM tbl_menu tm 
    INNER JOIN (SELECT tu.f_customid from tbl_user tu GROUP BY tu.f_customid) b ON 1=1
    WHERE tm.f_qxid IN (502)  
  )a
  LEFT JOIN (SELECT taps.f_busid,taps.f_customid FROM tbl_audit_process_set taps WHERE taps.f_busid IN (502) AND taps.f_customid IN (SELECT tu.f_customid from tbl_user tu GROUP BY tu.f_customid )) b ON a.f_qxid = b.f_busid AND a.f_customid = b.f_customid
) a WHERE a.newid = -1;

INSERT INTO tbl_Audit_Process_Set(f_accountid,f_customid,f_busid,f_busname,f_first_bool,f_first_deptid,f_first_PostionID,f_create_user,f_create_time)
SELECT a.accountid,a.f_customid,a.f_qxid,a.f_name,a.f_first_bool,a.f_first_deptid,a.f_first_PostionID,a.f_create_user,a.f_create_time 
FROM (
  SELECT a.*,IFNULL(b.f_busid,-1) AS newid FROM (
    SELECT 1 as accountid,b.f_customid,tm.f_qxid,1 as f_first_bool,-1 AS f_first_deptid,-1 AS f_first_PostionID,1 AS f_create_user,NOW() AS f_create_time,tm.f_name FROM tbl_menu tm 
    INNER JOIN (SELECT tu.f_customid from tbl_user tu GROUP BY tu.f_customid) b ON 1=1
    WHERE tm.f_qxid IN (504)  
  )a
  LEFT JOIN (SELECT taps.f_busid,taps.f_customid FROM tbl_audit_process_set taps WHERE taps.f_busid IN (504) AND taps.f_customid IN (SELECT tu.f_customid from tbl_user tu GROUP BY tu.f_customid )) b ON a.f_qxid = b.f_busid AND a.f_customid = b.f_customid
) a WHERE a.newid = -1;



INSERT INTO tbl_perms(f_qxid,f_menu_id,f_name,f_code,f_api,f_method,f_status,f_orderid,f_create_user,f_create_time,f_flag)
SELECT * FROM (

  SELECT CONCAT(f_qxid,'06') AS qxid,f_qxid,'单据审批' AS f_name,CONCAT(f_code,':ManagerApproval')AS d,CONCAT(f_code,'/ManagerApproval') AS ff,6 AS f_method,1 f_status,6 f_orderid,1 f_create_user,now() f_create_time,0 f_flat 
  FROM tbl_menu 
  WHERE f_qxid = 401 AND  NOT EXISTS(SELECT id FROM tbl_perms tsd1 WHERE tsd1.f_menu_id = 401 AND f_qxid =40106)
  UNION ALL
  SELECT CONCAT(f_qxid,'06') AS qxid,f_qxid,'单据审批' AS f_name,CONCAT(f_code,':ManagerApproval')AS d,CONCAT(f_code,'/ManagerApproval') AS ff,6 AS f_method,1 f_status,6 f_orderid,1 f_create_user,now() f_create_time,0 f_flat 
  FROM tbl_menu 
  WHERE f_qxid = 402 AND  NOT EXISTS(SELECT id FROM tbl_perms tsd1 WHERE tsd1.f_menu_id = 402 AND f_qxid =40206)  
  UNION ALL
  SELECT CONCAT(f_qxid,'07') AS qxid,f_qxid,'单据审批' AS f_name,CONCAT(f_code,':ManagerApproval')AS d,CONCAT(f_code,'/ManagerApproval') AS ff,7 AS f_method,1 f_status,5 f_orderid,1 f_create_user,now() f_create_time,0 f_flat 
  FROM tbl_menu 
  WHERE f_qxid = 403 AND  NOT EXISTS(SELECT id FROM tbl_perms tsd1 WHERE tsd1.f_menu_id = 403 AND f_qxid =40307)
  UNION ALL
  SELECT CONCAT(f_qxid,'06') AS qxid,f_qxid,'单据审批' AS f_name,CONCAT(f_code,':ManagerApproval')AS d,CONCAT(f_code,'/ManagerApproval') AS ff,6 AS f_method,1 f_status,6 f_orderid,1 f_create_user,now() f_create_time,0 f_flat 
  FROM tbl_menu 
  WHERE f_qxid = 405 AND  NOT EXISTS(SELECT id FROM tbl_perms tsd1 WHERE tsd1.f_menu_id = 405 AND f_qxid =40506)
  UNION ALL
  SELECT CONCAT(f_qxid,'06') AS qxid,f_qxid,'单据审批' AS f_name,CONCAT(f_code,':ManagerApproval')AS d,CONCAT(f_code,'/ManagerApproval') AS ff,6 AS f_method,1 f_status,6 f_orderid,1 f_create_user,now() f_create_time,0 f_flat 
  FROM tbl_menu 
  WHERE f_qxid = 406 AND  NOT EXISTS(SELECT id FROM tbl_perms tsd1 WHERE tsd1.f_menu_id = 406 AND f_qxid =40606)
  UNION ALL
  SELECT CONCAT(f_qxid,'09') AS qxid,f_qxid,'单据审批' AS f_name,CONCAT(f_code,':ManagerApproval')AS d,CONCAT(f_code,'/ManagerApproval') AS ff,6 AS f_method,1 f_status,5 f_orderid,1 f_create_user,now() f_create_time,0 f_flat 
  FROM tbl_menu 
  WHERE f_qxid = 501 AND  NOT EXISTS(SELECT id FROM tbl_perms tsd1 WHERE tsd1.f_menu_id = 501 AND f_qxid =50109)
  UNION ALL
  SELECT CONCAT(f_qxid,'05') AS qxid,f_qxid,'提交' AS f_name,CONCAT(f_code,':submit')AS d,CONCAT(f_code,'/submit') AS ff,5 AS f_method,1 f_status,6 f_orderid,1 f_create_user,now() f_create_time,0 f_flat 
  FROM tbl_menu 
  WHERE f_qxid = 502 AND  NOT EXISTS(SELECT id FROM tbl_perms tsd1 WHERE tsd1.f_menu_id = 502 AND f_qxid =50205) 
  UNION ALL
  SELECT CONCAT(f_qxid,'06') AS qxid,f_qxid,'单据审批' AS f_name,CONCAT(f_code,':ManagerApproval')AS d,CONCAT(f_code,'/ManagerApproval') AS ff,6 AS f_method,1 f_status,6 f_orderid,1 f_create_user,now() f_create_time,0 f_flat 
  FROM tbl_menu 
  WHERE f_qxid = 502 AND  NOT EXISTS(SELECT id FROM tbl_perms tsd1 WHERE tsd1.f_menu_id = 502 AND f_qxid =50206) 
  UNION ALL
  SELECT CONCAT(f_qxid,'05') AS qxid,f_qxid,'提交' AS f_name,CONCAT(f_code,':submit')AS d,CONCAT(f_code,'/submit') AS ff,5 AS f_method,1 f_status,6 f_orderid,1 f_create_user,now() f_create_time,0 f_flat 
  FROM tbl_menu 
  WHERE f_qxid = 504 AND  NOT EXISTS(SELECT id FROM tbl_perms tsd1 WHERE tsd1.f_menu_id = 504 AND f_qxid =50405)         
  UNION ALL
  SELECT CONCAT(f_qxid,'06') AS qxid,f_qxid,'单据审批' AS f_name,CONCAT(f_code,':ManagerApproval')AS d,CONCAT(f_code,'/ManagerApproval') AS ff,6 AS f_method,1 f_status,6 f_orderid,1 f_create_user,now() f_create_time,0 f_flat 
  FROM tbl_menu 
  WHERE f_qxid = 504 AND  NOT EXISTS(SELECT id FROM tbl_perms tsd1 WHERE tsd1.f_menu_id = 504 AND f_qxid =50406)            

) a ORDER BY f_qxid,f_orderid;


UPDATE tbl_perms tp SET F_NAME = '单据审批' WHERE tp.f_qxid = 60205;
update tbl_perms tp SET tp.f_flag = 1 WHERE tp.f_qxid = 60206 AND f_name ='仓库审批';

UPDATE tbl_sys_dictionary tsd SET F_NAME = '待审批' WHERE tsd.f_type = 2 AND f_id = 1 and tsd.f_status = 1;
INSERT INTO tbl_sys_dictionary(f_customid,f_id,f_name,f_order,f_type,f_status,f_note)
SELECT 0,2,'审批完成/待领用',1,2,1,'领用流程状态' WHERE NOT EXISTS(SELECT id FROM tbl_sys_dictionary tsd1 where tsd1.f_type = 2 AND tsd1.f_name ='审批完成/待领用');
INSERT INTO tbl_sys_dictionary(f_customid,f_id,f_name,f_order,f_type,f_status,f_note)
SELECT 0,-1,'已驳回',1,2,1,'领用流程状态' WHERE NOT EXISTS(SELECT id FROM tbl_sys_dictionary tsd1 where tsd1.f_type = 2 AND tsd1.f_name ='已驳回');

UPDATE tbl_sys_dictionary tsd SET F_NAME = '待审批' WHERE tsd.f_type = 3 AND f_id = 1 and tsd.f_status = 1;
INSERT INTO tbl_sys_dictionary(f_customid,f_id,f_name,f_order,f_type,f_status,f_note)
SELECT 0,2,'审批完成/待退库',1,3,1,'退库流程状态' WHERE NOT EXISTS(SELECT id FROM tbl_sys_dictionary tsd1 where tsd1.f_type = 3 AND tsd1.f_name ='审批完成/待退库');
INSERT INTO tbl_sys_dictionary(f_customid,f_id,f_name,f_order,f_type,f_status,f_note)
SELECT 0,-1,'已驳回',1,3,1,'退库流程状态' WHERE NOT EXISTS(SELECT id FROM tbl_sys_dictionary tsd1 where tsd1.f_type = 3 AND tsd1.f_name ='已驳回');

-- UPDATE tbl_sys_dictionary tsd SET F_NAME = '待审批' WHERE tsd.f_type = 3 AND f_id = 1 and tsd.f_status = 1;
-- INSERT INTO tbl_sys_dictionary(f_customid,f_id,f_name,f_order,f_type,f_status,f_note)
-- SELECT 0,2,'审批完成',1,3,1,'领用流程状态' WHERE NOT EXISTS(SELECT id FROM tbl_sys_dictionary tsd1 where tsd1.f_type = 3 AND tsd1.f_name ='审批完成');
-- INSERT INTO tbl_sys_dictionary(f_customid,f_id,f_name,f_order,f_type,f_status,f_note)
-- SELECT 0,-1,'已驳回',1,3,1,'领用流程状态' WHERE NOT EXISTS(SELECT id FROM tbl_sys_dictionary tsd1 where tsd1.f_type = 3 AND tsd1.f_name ='已驳回');
-- 

UPDATE tbl_sys_dictionary tsd SET F_NAME = '待审批' WHERE tsd.f_type = 4 AND f_id = 1 and tsd.f_status = 1;
INSERT INTO tbl_sys_dictionary(f_customid,f_id,f_name,f_order,f_type,f_status,f_note)
SELECT 0,2,'审批完成/待借出',1,4,1,'借用流程状态' WHERE NOT EXISTS(SELECT id FROM tbl_sys_dictionary tsd1 where tsd1.f_type = 4 AND tsd1.f_name ='审批完成/待借出');
INSERT INTO tbl_sys_dictionary(f_customid,f_id,f_name,f_order,f_type,f_status,f_note)
SELECT 0,-1,'已驳回',1,4,1,'借用流程状态' WHERE NOT EXISTS(SELECT id FROM tbl_sys_dictionary tsd1 where tsd1.f_type = 4 AND tsd1.f_name ='已驳回');


UPDATE tbl_sys_dictionary tsd SET F_NAME = '待审批' WHERE tsd.f_type = 5 AND f_id = 1 and tsd.f_status = 1;
INSERT INTO tbl_sys_dictionary(f_customid,f_id,f_name,f_order,f_type,f_status,f_note)
SELECT 0,2,'审批完成/待归还',1,5,1,'借用归还流程状态' WHERE NOT EXISTS(SELECT id FROM tbl_sys_dictionary tsd1 where tsd1.f_type = 5 AND tsd1.f_name ='审批完成/待归还');
INSERT INTO tbl_sys_dictionary(f_customid,f_id,f_name,f_order,f_type,f_status,f_note)
SELECT 0,-1,'已驳回',1,5,1,'借用归还流程状态' WHERE NOT EXISTS(SELECT id FROM tbl_sys_dictionary tsd1 where tsd1.f_type = 5 AND tsd1.f_name ='已驳回');


UPDATE tbl_sys_dictionary tsd SET F_NAME = '待调出/待审批' WHERE tsd.f_type = 6 AND f_id = 1 and tsd.f_status = 1;
UPDATE tbl_sys_dictionary tsd SET F_NAME = '审批完成/待调出' WHERE tsd.f_type = 6 AND f_id = 2 and tsd.f_status = 1; 
INSERT INTO tbl_sys_dictionary(f_customid,f_id,f_name,f_order,f_type,f_status,f_note)
SELECT 0,-1,'已驳回',1,6,1,'资产调拨' WHERE NOT EXISTS(SELECT id FROM tbl_sys_dictionary tsd1 where tsd1.f_type = 6 AND tsd1.f_name ='已驳回');


UPDATE tbl_sys_dictionary tsd SET F_NAME = '待审批' WHERE tsd.f_type = 7 AND f_id = 1 and tsd.f_status = 1;
INSERT INTO tbl_sys_dictionary(f_customid,f_id,f_name,f_order,f_type,f_status,f_note)
SELECT 0,2,'审批完成/待确认',1,7,1,'资产变更' WHERE NOT EXISTS(SELECT id FROM tbl_sys_dictionary tsd1 where tsd1.f_type = 7 AND tsd1.f_name ='审批完成/待确认');
INSERT INTO tbl_sys_dictionary(f_customid,f_id,f_name,f_order,f_type,f_status,f_note)
SELECT 0,-1,'已驳回',1,7,1,'资产变更' WHERE NOT EXISTS(SELECT id FROM tbl_sys_dictionary tsd1 where tsd1.f_type = 7 AND tsd1.f_name ='已驳回');


UPDATE tbl_sys_dictionary tsd SET F_NAME = '待审批' WHERE tsd.f_type = 9 AND f_id = 1 and tsd.f_status = 1;
INSERT INTO tbl_sys_dictionary(f_customid,f_id,f_name,f_order,f_type,f_status,f_note)
SELECT 0,2,'审批完成/待处置',1,9,1,'资产处理' WHERE NOT EXISTS(SELECT id FROM tbl_sys_dictionary tsd1 where tsd1.f_type = 9 AND tsd1.f_name ='审批完成/待处置');
INSERT INTO tbl_sys_dictionary(f_customid,f_id,f_name,f_order,f_type,f_status,f_note)
SELECT 0,-1,'已驳回',1,9,1,'资产处理' WHERE NOT EXISTS(SELECT id FROM tbl_sys_dictionary tsd1 where tsd1.f_type = 9 AND tsd1.f_name ='已驳回');


UPDATE tbl_sys_dictionary tsd SET F_NAME = '待审批' WHERE tsd.f_type = 10 AND f_id = 1 and tsd.f_status = 1;
INSERT INTO tbl_sys_dictionary(f_customid,f_id,f_name,f_order,f_type,f_status,f_note)
SELECT 0,2,'审批完成/待报废',1,10,1,'资产报废' WHERE NOT EXISTS(SELECT id FROM tbl_sys_dictionary tsd1 where tsd1.f_type = 10 AND tsd1.f_name ='审批完成/待报废');
INSERT INTO tbl_sys_dictionary(f_customid,f_id,f_name,f_order,f_type,f_status,f_note)
SELECT 0,-1,'已驳回',1,10,1,'资产报废' WHERE NOT EXISTS(SELECT id FROM tbl_sys_dictionary tsd1 where tsd1.f_type = 10 AND tsd1.f_name ='已驳回');

UPDATE tbl_sys_dictionary tsd SET F_NAME = '已提交/待审批' WHERE tsd.f_type = 11 AND f_id = 1 and tsd.f_status = 1;
UPDATE tbl_sys_dictionary tsd SET F_NAME = '审批完成/待送修' WHERE tsd.f_type = 11 AND f_id = 2 and tsd.f_status = 1;
UPDATE tbl_sys_dictionary tsd SET F_NAME = '已驳回' WHERE tsd.f_type = 11 AND f_id = -1 and tsd.f_status = 1;


update tbl_sys_dictionary tsd set f_name = '审批完成/待领用' WHERE tsd.f_type = 2 AND f_id = 2;
update tbl_sys_dictionary tsd set f_name = '审批完成/待退库' WHERE tsd.f_type = 3 AND f_id = 2;
update tbl_sys_dictionary tsd set f_name = '审批完成/待借出' WHERE tsd.f_type = 4 AND f_id = 2;
update tbl_sys_dictionary tsd set f_name = '审批完成/待归还' WHERE tsd.f_type = 5 AND f_id = 2;
update tbl_sys_dictionary tsd set f_name = '审批完成/待调出' WHERE tsd.f_type = 6 AND f_id = 2;
update tbl_sys_dictionary tsd set f_name = '审批完成/待确认' WHERE tsd.f_type = 7 AND f_id = 2;
update tbl_sys_dictionary tsd set f_name = '审批完成/待处置' WHERE tsd.f_type = 9 AND f_id = 2;
update tbl_sys_dictionary tsd set f_name = '审批完成/待报废' WHERE tsd.f_type = 10 AND f_id = 2;
update tbl_sys_dictionary tsd set f_name = '审批完成/待送修' WHERE tsd.f_type = 11 AND f_id = 2; 
UPDATE tbl_sys_dictionary tsd SET f_name = '待审批' WHERE f_id = 1 AND tsd.f_type = 7;
UPDATE tbl_sys_dictionary tsd set tsd.f_status = 1 WHERE tsd.f_type =6 AND f_id= 2;

/**********************************************升级脚本区域-    end*********************************************************/


/**********************************************每次升级必执行脚本-    begin*********************************************************/
-- 加入超级管理员所有权限
INSERT INTO tbl_role_data_perms(f_roleid,f_qxid,f_qx_pid,f_accountid) 
SELECT 1,f_qxid,f_menu_id,1 FROM tbl_perms  WHERE f_qxid NOT IN 
(SELECT f_qxid FROM tbl_role_data_perms WHERE f_roleid = 1) ;

/**********************************************每次升级必执行脚本-       end*********************************************************/



-- BEGIN
--    declare num int;
--    SELECT count(*) into num  FROM tbl_perms tp WHERE f_qxid = 10105
-- 
--    IF (num =0) THEN
--    begin
--       INSERT INTO tbl_perms(f_qxid,f_menu_id,f_name,f_code,f_api,f_method,f_status,f_orderid,f_create_user,f_create_time,f_flag)
--       VALUES(10105,101,'启用/停用','Deptno:SetStatus','Deptno/SetStatus',5,1,5,1,now(),0)
--    END IF;
-- 
--  END